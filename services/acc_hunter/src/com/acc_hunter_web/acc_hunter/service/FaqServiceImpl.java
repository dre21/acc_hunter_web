/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Faq;


/**
 * ServiceImpl object for domain model class Faq.
 *
 * @see Faq
 */
@Service("acc_hunter.FaqService")
@Validated
public class FaqServiceImpl implements FaqService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FaqServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.FaqDao")
    private WMGenericDao<Faq, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Faq, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Faq create(Faq faq) {
        LOGGER.debug("Creating a new Faq with information: {}", faq);

        Faq faqCreated = this.wmGenericDao.create(faq);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(faqCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Faq getById(Integer faqId) {
        LOGGER.debug("Finding Faq by id: {}", faqId);
        return this.wmGenericDao.findById(faqId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Faq findById(Integer faqId) {
        LOGGER.debug("Finding Faq by id: {}", faqId);
        try {
            return this.wmGenericDao.findById(faqId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Faq found with id: {}", faqId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Faq> findByMultipleIds(List<Integer> faqIds, boolean orderedReturn) {
        LOGGER.debug("Finding Faqs by ids: {}", faqIds);

        return this.wmGenericDao.findByMultipleIds(faqIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Faq update(Faq faq) {
        LOGGER.debug("Updating Faq with information: {}", faq);

        this.wmGenericDao.update(faq);
        this.wmGenericDao.refresh(faq);

        return faq;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Faq partialUpdate(Integer faqId, Map<String, Object>faqPatch) {
        LOGGER.debug("Partially Updating the Faq with id: {}", faqId);

        Faq faq = getById(faqId);

        try {
            ObjectReader faqReader = this.objectMapper.reader().forType(Faq.class).withValueToUpdate(faq);
            faq = faqReader.readValue(this.objectMapper.writeValueAsString(faqPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", faqPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        faq = update(faq);

        return faq;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Faq delete(Integer faqId) {
        LOGGER.debug("Deleting Faq with id: {}", faqId);
        Faq deleted = this.wmGenericDao.findById(faqId);
        if (deleted == null) {
            LOGGER.debug("No Faq found with id: {}", faqId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Faq.class.getSimpleName(), faqId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Faq faq) {
        LOGGER.debug("Deleting Faq with {}", faq);
        this.wmGenericDao.delete(faq);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Faq> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Faqs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Faq> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Faqs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Faq to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Faq to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}