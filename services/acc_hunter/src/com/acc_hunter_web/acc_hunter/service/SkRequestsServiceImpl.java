/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.SkRequests;


/**
 * ServiceImpl object for domain model class SkRequests.
 *
 * @see SkRequests
 */
@Service("acc_hunter.SkRequestsService")
@Validated
public class SkRequestsServiceImpl implements SkRequestsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SkRequestsServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.SkRequestsDao")
    private WMGenericDao<SkRequests, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<SkRequests, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public SkRequests create(SkRequests skRequests) {
        LOGGER.debug("Creating a new SkRequests with information: {}", skRequests);

        SkRequests skRequestsCreated = this.wmGenericDao.create(skRequests);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(skRequestsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public SkRequests getById(Integer skrequestsId) {
        LOGGER.debug("Finding SkRequests by id: {}", skrequestsId);
        return this.wmGenericDao.findById(skrequestsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public SkRequests findById(Integer skrequestsId) {
        LOGGER.debug("Finding SkRequests by id: {}", skrequestsId);
        try {
            return this.wmGenericDao.findById(skrequestsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No SkRequests found with id: {}", skrequestsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<SkRequests> findByMultipleIds(List<Integer> skrequestsIds, boolean orderedReturn) {
        LOGGER.debug("Finding SkRequests by ids: {}", skrequestsIds);

        return this.wmGenericDao.findByMultipleIds(skrequestsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public SkRequests update(SkRequests skRequests) {
        LOGGER.debug("Updating SkRequests with information: {}", skRequests);

        this.wmGenericDao.update(skRequests);
        this.wmGenericDao.refresh(skRequests);

        return skRequests;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public SkRequests partialUpdate(Integer skrequestsId, Map<String, Object>skRequestsPatch) {
        LOGGER.debug("Partially Updating the SkRequests with id: {}", skrequestsId);

        SkRequests skRequests = getById(skrequestsId);

        try {
            ObjectReader skRequestsReader = this.objectMapper.reader().forType(SkRequests.class).withValueToUpdate(skRequests);
            skRequests = skRequestsReader.readValue(this.objectMapper.writeValueAsString(skRequestsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", skRequestsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        skRequests = update(skRequests);

        return skRequests;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public SkRequests delete(Integer skrequestsId) {
        LOGGER.debug("Deleting SkRequests with id: {}", skrequestsId);
        SkRequests deleted = this.wmGenericDao.findById(skrequestsId);
        if (deleted == null) {
            LOGGER.debug("No SkRequests found with id: {}", skrequestsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), SkRequests.class.getSimpleName(), skrequestsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(SkRequests skRequests) {
        LOGGER.debug("Deleting SkRequests with {}", skRequests);
        this.wmGenericDao.delete(skRequests);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<SkRequests> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all SkRequests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<SkRequests> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all SkRequests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table SkRequests to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table SkRequests to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}