/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSkDetailImages;


/**
 * ServiceImpl object for domain model class LelangSkDetailImages.
 *
 * @see LelangSkDetailImages
 */
@Service("acc_hunter.LelangSkDetailImagesService")
@Validated
public class LelangSkDetailImagesServiceImpl implements LelangSkDetailImagesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkDetailImagesServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.LelangSkDetailImagesDao")
    private WMGenericDao<LelangSkDetailImages, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LelangSkDetailImages, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages create(LelangSkDetailImages lelangSkDetailImages) {
        LOGGER.debug("Creating a new LelangSkDetailImages with information: {}", lelangSkDetailImages);

        LelangSkDetailImages lelangSkDetailImagesCreated = this.wmGenericDao.create(lelangSkDetailImages);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(lelangSkDetailImagesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages getById(Integer lelangskdetailimagesId) {
        LOGGER.debug("Finding LelangSkDetailImages by id: {}", lelangskdetailimagesId);
        return this.wmGenericDao.findById(lelangskdetailimagesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages findById(Integer lelangskdetailimagesId) {
        LOGGER.debug("Finding LelangSkDetailImages by id: {}", lelangskdetailimagesId);
        try {
            return this.wmGenericDao.findById(lelangskdetailimagesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LelangSkDetailImages found with id: {}", lelangskdetailimagesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<LelangSkDetailImages> findByMultipleIds(List<Integer> lelangskdetailimagesIds, boolean orderedReturn) {
        LOGGER.debug("Finding LelangSkDetailImages by ids: {}", lelangskdetailimagesIds);

        return this.wmGenericDao.findByMultipleIds(lelangskdetailimagesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages update(LelangSkDetailImages lelangSkDetailImages) {
        LOGGER.debug("Updating LelangSkDetailImages with information: {}", lelangSkDetailImages);

        this.wmGenericDao.update(lelangSkDetailImages);
        this.wmGenericDao.refresh(lelangSkDetailImages);

        return lelangSkDetailImages;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages partialUpdate(Integer lelangskdetailimagesId, Map<String, Object>lelangSkDetailImagesPatch) {
        LOGGER.debug("Partially Updating the LelangSkDetailImages with id: {}", lelangskdetailimagesId);

        LelangSkDetailImages lelangSkDetailImages = getById(lelangskdetailimagesId);

        try {
            ObjectReader lelangSkDetailImagesReader = this.objectMapper.reader().forType(LelangSkDetailImages.class).withValueToUpdate(lelangSkDetailImages);
            lelangSkDetailImages = lelangSkDetailImagesReader.readValue(this.objectMapper.writeValueAsString(lelangSkDetailImagesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", lelangSkDetailImagesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        lelangSkDetailImages = update(lelangSkDetailImages);

        return lelangSkDetailImages;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkDetailImages delete(Integer lelangskdetailimagesId) {
        LOGGER.debug("Deleting LelangSkDetailImages with id: {}", lelangskdetailimagesId);
        LelangSkDetailImages deleted = this.wmGenericDao.findById(lelangskdetailimagesId);
        if (deleted == null) {
            LOGGER.debug("No LelangSkDetailImages found with id: {}", lelangskdetailimagesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LelangSkDetailImages.class.getSimpleName(), lelangskdetailimagesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(LelangSkDetailImages lelangSkDetailImages) {
        LOGGER.debug("Deleting LelangSkDetailImages with {}", lelangSkDetailImages);
        this.wmGenericDao.delete(lelangSkDetailImages);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkDetailImages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LelangSkDetailImages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkDetailImages> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LelangSkDetailImages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSkDetailImages to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSkDetailImages to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}