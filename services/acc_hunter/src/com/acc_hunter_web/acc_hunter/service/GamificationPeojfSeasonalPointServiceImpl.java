/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfSeasonalPoint;


/**
 * ServiceImpl object for domain model class GamificationPeojfSeasonalPoint.
 *
 * @see GamificationPeojfSeasonalPoint
 */
@Service("acc_hunter.GamificationPeojfSeasonalPointService")
@Validated
public class GamificationPeojfSeasonalPointServiceImpl implements GamificationPeojfSeasonalPointService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfSeasonalPointServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfSeasonalPointDao")
    private WMGenericDao<GamificationPeojfSeasonalPoint, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfSeasonalPoint, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint create(GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint) {
        LOGGER.debug("Creating a new GamificationPeojfSeasonalPoint with information: {}", gamificationPeojfSeasonalPoint);

        GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPointCreated = this.wmGenericDao.create(gamificationPeojfSeasonalPoint);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfSeasonalPointCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint getById(Integer gamificationpeojfseasonalpointId) {
        LOGGER.debug("Finding GamificationPeojfSeasonalPoint by id: {}", gamificationpeojfseasonalpointId);
        return this.wmGenericDao.findById(gamificationpeojfseasonalpointId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint findById(Integer gamificationpeojfseasonalpointId) {
        LOGGER.debug("Finding GamificationPeojfSeasonalPoint by id: {}", gamificationpeojfseasonalpointId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfseasonalpointId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfSeasonalPoint found with id: {}", gamificationpeojfseasonalpointId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfSeasonalPoint> findByMultipleIds(List<Integer> gamificationpeojfseasonalpointIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfSeasonalPoints by ids: {}", gamificationpeojfseasonalpointIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfseasonalpointIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint update(GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint) {
        LOGGER.debug("Updating GamificationPeojfSeasonalPoint with information: {}", gamificationPeojfSeasonalPoint);

        this.wmGenericDao.update(gamificationPeojfSeasonalPoint);
        this.wmGenericDao.refresh(gamificationPeojfSeasonalPoint);

        return gamificationPeojfSeasonalPoint;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint partialUpdate(Integer gamificationpeojfseasonalpointId, Map<String, Object>gamificationPeojfSeasonalPointPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfSeasonalPoint with id: {}", gamificationpeojfseasonalpointId);

        GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint = getById(gamificationpeojfseasonalpointId);

        try {
            ObjectReader gamificationPeojfSeasonalPointReader = this.objectMapper.reader().forType(GamificationPeojfSeasonalPoint.class).withValueToUpdate(gamificationPeojfSeasonalPoint);
            gamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfSeasonalPointPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfSeasonalPointPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfSeasonalPoint = update(gamificationPeojfSeasonalPoint);

        return gamificationPeojfSeasonalPoint;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSeasonalPoint delete(Integer gamificationpeojfseasonalpointId) {
        LOGGER.debug("Deleting GamificationPeojfSeasonalPoint with id: {}", gamificationpeojfseasonalpointId);
        GamificationPeojfSeasonalPoint deleted = this.wmGenericDao.findById(gamificationpeojfseasonalpointId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfSeasonalPoint found with id: {}", gamificationpeojfseasonalpointId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfSeasonalPoint.class.getSimpleName(), gamificationpeojfseasonalpointId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint) {
        LOGGER.debug("Deleting GamificationPeojfSeasonalPoint with {}", gamificationPeojfSeasonalPoint);
        this.wmGenericDao.delete(gamificationPeojfSeasonalPoint);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfSeasonalPoint> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfSeasonalPoints");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfSeasonalPoint> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfSeasonalPoints");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfSeasonalPoint to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfSeasonalPoint to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}