/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.RemoRegions;

/**
 * Service object for domain model class {@link RemoRegions}.
 */
public interface RemoRegionsService {

    /**
     * Creates a new RemoRegions. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RemoRegions if any.
     *
     * @param remoRegions Details of the RemoRegions to be created; value cannot be null.
     * @return The newly created RemoRegions.
     */
    RemoRegions create(@Valid RemoRegions remoRegions);


	/**
     * Returns RemoRegions by given id if exists.
     *
     * @param remoregionsId The id of the RemoRegions to get; value cannot be null.
     * @return RemoRegions associated with the given remoregionsId.
	 * @throws EntityNotFoundException If no RemoRegions is found.
     */
    RemoRegions getById(Integer remoregionsId);

    /**
     * Find and return the RemoRegions by given id if exists, returns null otherwise.
     *
     * @param remoregionsId The id of the RemoRegions to get; value cannot be null.
     * @return RemoRegions associated with the given remoregionsId.
     */
    RemoRegions findById(Integer remoregionsId);

	/**
     * Find and return the list of RemoRegions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param remoregionsIds The id's of the RemoRegions to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RemoRegions associated with the given remoregionsIds.
     */
    List<RemoRegions> findByMultipleIds(List<Integer> remoregionsIds, boolean orderedReturn);

    /**
     * Find and return the RemoRegions for given region  if exists.
     *
     * @param region value of region; value cannot be null.
     * @return RemoRegions associated with the given inputs.
     * @throws EntityNotFoundException if no matching RemoRegions found.
     */
    RemoRegions getByRegion(String region);

    /**
     * Updates the details of an existing RemoRegions. It replaces all fields of the existing RemoRegions with the given remoRegions.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RemoRegions if any.
     *
     * @param remoRegions The details of the RemoRegions to be updated; value cannot be null.
     * @return The updated RemoRegions.
     * @throws EntityNotFoundException if no RemoRegions is found with given input.
     */
    RemoRegions update(@Valid RemoRegions remoRegions);


    /**
     * Partially updates the details of an existing RemoRegions. It updates only the
     * fields of the existing RemoRegions which are passed in the remoRegionsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RemoRegions if any.
     *
     * @param remoregionsId The id of the RemoRegions to be deleted; value cannot be null.
     * @param remoRegionsPatch The partial data of RemoRegions which is supposed to be updated; value cannot be null.
     * @return The updated RemoRegions.
     * @throws EntityNotFoundException if no RemoRegions is found with given input.
     */
    RemoRegions partialUpdate(Integer remoregionsId, Map<String, Object> remoRegionsPatch);

    /**
     * Deletes an existing RemoRegions with the given id.
     *
     * @param remoregionsId The id of the RemoRegions to be deleted; value cannot be null.
     * @return The deleted RemoRegions.
     * @throws EntityNotFoundException if no RemoRegions found with the given id.
     */
    RemoRegions delete(Integer remoregionsId);

    /**
     * Deletes an existing RemoRegions with the given object.
     *
     * @param remoRegions The instance of the RemoRegions to be deleted; value cannot be null.
     */
    void delete(RemoRegions remoRegions);

    /**
     * Find all RemoRegions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RemoRegions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RemoRegions> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RemoRegions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RemoRegions.
     *
     * @see Pageable
     * @see Page
     */
    Page<RemoRegions> findAll(String query, Pageable pageable);

    /**
     * Exports all RemoRegions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RemoRegions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RemoRegions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RemoRegions.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated lelangSkDetails for given RemoRegions id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LelangSkDetail instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSkDetail> findAssociatedLelangSkDetails(Integer id, Pageable pageable);

}