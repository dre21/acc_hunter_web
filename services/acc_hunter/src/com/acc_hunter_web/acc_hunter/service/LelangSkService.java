/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSk;
import com.acc_hunter_web.acc_hunter.LelangSkDetail;

/**
 * Service object for domain model class {@link LelangSk}.
 */
public interface LelangSkService {

    /**
     * Creates a new LelangSk. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSk if any.
     *
     * @param lelangSk Details of the LelangSk to be created; value cannot be null.
     * @return The newly created LelangSk.
     */
    LelangSk create(@Valid LelangSk lelangSk);


	/**
     * Returns LelangSk by given id if exists.
     *
     * @param lelangskId The id of the LelangSk to get; value cannot be null.
     * @return LelangSk associated with the given lelangskId.
	 * @throws EntityNotFoundException If no LelangSk is found.
     */
    LelangSk getById(Integer lelangskId);

    /**
     * Find and return the LelangSk by given id if exists, returns null otherwise.
     *
     * @param lelangskId The id of the LelangSk to get; value cannot be null.
     * @return LelangSk associated with the given lelangskId.
     */
    LelangSk findById(Integer lelangskId);

	/**
     * Find and return the list of LelangSks by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param lelangskIds The id's of the LelangSk to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LelangSks associated with the given lelangskIds.
     */
    List<LelangSk> findByMultipleIds(List<Integer> lelangskIds, boolean orderedReturn);

    /**
     * Find and return the LelangSk for given remoId  if exists.
     *
     * @param remoId value of remoId; value cannot be null.
     * @return LelangSk associated with the given inputs.
     * @throws EntityNotFoundException if no matching LelangSk found.
     */
    LelangSk getByRemoId(int remoId);

    /**
     * Updates the details of an existing LelangSk. It replaces all fields of the existing LelangSk with the given lelangSk.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSk if any.
     *
     * @param lelangSk The details of the LelangSk to be updated; value cannot be null.
     * @return The updated LelangSk.
     * @throws EntityNotFoundException if no LelangSk is found with given input.
     */
    LelangSk update(@Valid LelangSk lelangSk);


    /**
     * Partially updates the details of an existing LelangSk. It updates only the
     * fields of the existing LelangSk which are passed in the lelangSkPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSk if any.
     *
     * @param lelangskId The id of the LelangSk to be deleted; value cannot be null.
     * @param lelangSkPatch The partial data of LelangSk which is supposed to be updated; value cannot be null.
     * @return The updated LelangSk.
     * @throws EntityNotFoundException if no LelangSk is found with given input.
     */
    LelangSk partialUpdate(Integer lelangskId, Map<String, Object> lelangSkPatch);

    /**
     * Deletes an existing LelangSk with the given id.
     *
     * @param lelangskId The id of the LelangSk to be deleted; value cannot be null.
     * @return The deleted LelangSk.
     * @throws EntityNotFoundException if no LelangSk found with the given id.
     */
    LelangSk delete(Integer lelangskId);

    /**
     * Deletes an existing LelangSk with the given object.
     *
     * @param lelangSk The instance of the LelangSk to be deleted; value cannot be null.
     */
    void delete(LelangSk lelangSk);

    /**
     * Find all LelangSks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LelangSks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LelangSk> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LelangSks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LelangSks.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSk> findAll(String query, Pageable pageable);

    /**
     * Exports all LelangSks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LelangSks matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LelangSks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LelangSk.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated lelangSkDetails for given LelangSk id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LelangSkDetail instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSkDetail> findAssociatedLelangSkDetails(Integer id, Pageable pageable);

}