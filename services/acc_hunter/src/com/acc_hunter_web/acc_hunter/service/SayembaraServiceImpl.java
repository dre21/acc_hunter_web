/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Sayembara;


/**
 * ServiceImpl object for domain model class Sayembara.
 *
 * @see Sayembara
 */
@Service("acc_hunter.SayembaraService")
@Validated
public class SayembaraServiceImpl implements SayembaraService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SayembaraServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.SayembaraDao")
    private WMGenericDao<Sayembara, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Sayembara, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Sayembara create(Sayembara sayembara) {
        LOGGER.debug("Creating a new Sayembara with information: {}", sayembara);

        Sayembara sayembaraCreated = this.wmGenericDao.create(sayembara);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(sayembaraCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Sayembara getById(Integer sayembaraId) {
        LOGGER.debug("Finding Sayembara by id: {}", sayembaraId);
        return this.wmGenericDao.findById(sayembaraId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Sayembara findById(Integer sayembaraId) {
        LOGGER.debug("Finding Sayembara by id: {}", sayembaraId);
        try {
            return this.wmGenericDao.findById(sayembaraId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Sayembara found with id: {}", sayembaraId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Sayembara> findByMultipleIds(List<Integer> sayembaraIds, boolean orderedReturn) {
        LOGGER.debug("Finding Sayembaras by ids: {}", sayembaraIds);

        return this.wmGenericDao.findByMultipleIds(sayembaraIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Sayembara update(Sayembara sayembara) {
        LOGGER.debug("Updating Sayembara with information: {}", sayembara);

        this.wmGenericDao.update(sayembara);
        this.wmGenericDao.refresh(sayembara);

        return sayembara;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Sayembara partialUpdate(Integer sayembaraId, Map<String, Object>sayembaraPatch) {
        LOGGER.debug("Partially Updating the Sayembara with id: {}", sayembaraId);

        Sayembara sayembara = getById(sayembaraId);

        try {
            ObjectReader sayembaraReader = this.objectMapper.reader().forType(Sayembara.class).withValueToUpdate(sayembara);
            sayembara = sayembaraReader.readValue(this.objectMapper.writeValueAsString(sayembaraPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", sayembaraPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        sayembara = update(sayembara);

        return sayembara;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Sayembara delete(Integer sayembaraId) {
        LOGGER.debug("Deleting Sayembara with id: {}", sayembaraId);
        Sayembara deleted = this.wmGenericDao.findById(sayembaraId);
        if (deleted == null) {
            LOGGER.debug("No Sayembara found with id: {}", sayembaraId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Sayembara.class.getSimpleName(), sayembaraId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Sayembara sayembara) {
        LOGGER.debug("Deleting Sayembara with {}", sayembara);
        this.wmGenericDao.delete(sayembara);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Sayembara> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Sayembaras");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Sayembara> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Sayembaras");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Sayembara to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Sayembara to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}