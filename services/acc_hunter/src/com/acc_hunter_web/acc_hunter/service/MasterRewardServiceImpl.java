/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.MasterReward;
import com.acc_hunter_web.acc_hunter.RewardConfig;


/**
 * ServiceImpl object for domain model class MasterReward.
 *
 * @see MasterReward
 */
@Service("acc_hunter.MasterRewardService")
@Validated
public class MasterRewardServiceImpl implements MasterRewardService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasterRewardServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.RewardConfigService")
    private RewardConfigService rewardConfigService;

    @Autowired
    @Qualifier("acc_hunter.MasterRewardDao")
    private WMGenericDao<MasterReward, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<MasterReward, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public MasterReward create(MasterReward masterReward) {
        LOGGER.debug("Creating a new MasterReward with information: {}", masterReward);

        MasterReward masterRewardCreated = this.wmGenericDao.create(masterReward);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(masterRewardCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public MasterReward getById(Integer masterrewardId) {
        LOGGER.debug("Finding MasterReward by id: {}", masterrewardId);
        return this.wmGenericDao.findById(masterrewardId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public MasterReward findById(Integer masterrewardId) {
        LOGGER.debug("Finding MasterReward by id: {}", masterrewardId);
        try {
            return this.wmGenericDao.findById(masterrewardId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No MasterReward found with id: {}", masterrewardId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<MasterReward> findByMultipleIds(List<Integer> masterrewardIds, boolean orderedReturn) {
        LOGGER.debug("Finding MasterRewards by ids: {}", masterrewardIds);

        return this.wmGenericDao.findByMultipleIds(masterrewardIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public MasterReward update(MasterReward masterReward) {
        LOGGER.debug("Updating MasterReward with information: {}", masterReward);

        this.wmGenericDao.update(masterReward);
        this.wmGenericDao.refresh(masterReward);

        return masterReward;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public MasterReward partialUpdate(Integer masterrewardId, Map<String, Object>masterRewardPatch) {
        LOGGER.debug("Partially Updating the MasterReward with id: {}", masterrewardId);

        MasterReward masterReward = getById(masterrewardId);

        try {
            ObjectReader masterRewardReader = this.objectMapper.reader().forType(MasterReward.class).withValueToUpdate(masterReward);
            masterReward = masterRewardReader.readValue(this.objectMapper.writeValueAsString(masterRewardPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", masterRewardPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        masterReward = update(masterReward);

        return masterReward;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public MasterReward delete(Integer masterrewardId) {
        LOGGER.debug("Deleting MasterReward with id: {}", masterrewardId);
        MasterReward deleted = this.wmGenericDao.findById(masterrewardId);
        if (deleted == null) {
            LOGGER.debug("No MasterReward found with id: {}", masterrewardId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), MasterReward.class.getSimpleName(), masterrewardId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(MasterReward masterReward) {
        LOGGER.debug("Deleting MasterReward with {}", masterReward);
        this.wmGenericDao.delete(masterReward);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<MasterReward> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MasterRewards");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<MasterReward> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MasterRewards");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table MasterReward to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table MasterReward to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RewardConfig> findAssociatedRewardConfigs(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated rewardConfigs");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("masterReward.id = '" + id + "'");

        return rewardConfigService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RewardConfigService instance
     */
    protected void setRewardConfigService(RewardConfigService service) {
        this.rewardConfigService = service;
    }

}