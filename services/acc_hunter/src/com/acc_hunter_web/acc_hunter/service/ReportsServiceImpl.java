/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.ReportImages;
import com.acc_hunter_web.acc_hunter.Reports;


/**
 * ServiceImpl object for domain model class Reports.
 *
 * @see Reports
 */
@Service("acc_hunter.ReportsService")
@Validated
public class ReportsServiceImpl implements ReportsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReportsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.ReportImagesService")
    private ReportImagesService reportImagesService;

    @Autowired
    @Qualifier("acc_hunter.ReportsDao")
    private WMGenericDao<Reports, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Reports, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Reports create(Reports reports) {
        LOGGER.debug("Creating a new Reports with information: {}", reports);

        Reports reportsCreated = this.wmGenericDao.create(reports);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(reportsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Reports getById(Integer reportsId) {
        LOGGER.debug("Finding Reports by id: {}", reportsId);
        return this.wmGenericDao.findById(reportsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Reports findById(Integer reportsId) {
        LOGGER.debug("Finding Reports by id: {}", reportsId);
        try {
            return this.wmGenericDao.findById(reportsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Reports found with id: {}", reportsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Reports> findByMultipleIds(List<Integer> reportsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Reports by ids: {}", reportsIds);

        return this.wmGenericDao.findByMultipleIds(reportsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Reports update(Reports reports) {
        LOGGER.debug("Updating Reports with information: {}", reports);

        this.wmGenericDao.update(reports);
        this.wmGenericDao.refresh(reports);

        return reports;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Reports partialUpdate(Integer reportsId, Map<String, Object>reportsPatch) {
        LOGGER.debug("Partially Updating the Reports with id: {}", reportsId);

        Reports reports = getById(reportsId);

        try {
            ObjectReader reportsReader = this.objectMapper.reader().forType(Reports.class).withValueToUpdate(reports);
            reports = reportsReader.readValue(this.objectMapper.writeValueAsString(reportsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", reportsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        reports = update(reports);

        return reports;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Reports delete(Integer reportsId) {
        LOGGER.debug("Deleting Reports with id: {}", reportsId);
        Reports deleted = this.wmGenericDao.findById(reportsId);
        if (deleted == null) {
            LOGGER.debug("No Reports found with id: {}", reportsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Reports.class.getSimpleName(), reportsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Reports reports) {
        LOGGER.debug("Deleting Reports with {}", reports);
        this.wmGenericDao.delete(reports);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Reports> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Reports");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Reports> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Reports");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Reports to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Reports to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<ReportImages> findAssociatedReportImageses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated reportImageses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("reports.id = '" + id + "'");

        return reportImagesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ReportImagesService instance
     */
    protected void setReportImagesService(ReportImagesService service) {
        this.reportImagesService = service;
    }

}