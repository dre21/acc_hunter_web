/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.LelangSkDetailImages;
import com.acc_hunter_web.acc_hunter.LelangSkParticipants;

/**
 * Service object for domain model class {@link LelangSkDetail}.
 */
public interface LelangSkDetailService {

    /**
     * Creates a new LelangSkDetail. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSkDetail if any.
     *
     * @param lelangSkDetail Details of the LelangSkDetail to be created; value cannot be null.
     * @return The newly created LelangSkDetail.
     */
    LelangSkDetail create(@Valid LelangSkDetail lelangSkDetail);


	/**
     * Returns LelangSkDetail by given id if exists.
     *
     * @param lelangskdetailId The id of the LelangSkDetail to get; value cannot be null.
     * @return LelangSkDetail associated with the given lelangskdetailId.
	 * @throws EntityNotFoundException If no LelangSkDetail is found.
     */
    LelangSkDetail getById(Integer lelangskdetailId);

    /**
     * Find and return the LelangSkDetail by given id if exists, returns null otherwise.
     *
     * @param lelangskdetailId The id of the LelangSkDetail to get; value cannot be null.
     * @return LelangSkDetail associated with the given lelangskdetailId.
     */
    LelangSkDetail findById(Integer lelangskdetailId);

	/**
     * Find and return the list of LelangSkDetails by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param lelangskdetailIds The id's of the LelangSkDetail to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LelangSkDetails associated with the given lelangskdetailIds.
     */
    List<LelangSkDetail> findByMultipleIds(List<Integer> lelangskdetailIds, boolean orderedReturn);

    /**
     * Find and return the LelangSkDetail for given agreementNo  if exists.
     *
     * @param agreementNo value of agreementNo; value cannot be null.
     * @return LelangSkDetail associated with the given inputs.
     * @throws EntityNotFoundException if no matching LelangSkDetail found.
     */
    LelangSkDetail getByAgreementNo(String agreementNo);

    /**
     * Updates the details of an existing LelangSkDetail. It replaces all fields of the existing LelangSkDetail with the given lelangSkDetail.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSkDetail if any.
     *
     * @param lelangSkDetail The details of the LelangSkDetail to be updated; value cannot be null.
     * @return The updated LelangSkDetail.
     * @throws EntityNotFoundException if no LelangSkDetail is found with given input.
     */
    LelangSkDetail update(@Valid LelangSkDetail lelangSkDetail);


    /**
     * Partially updates the details of an existing LelangSkDetail. It updates only the
     * fields of the existing LelangSkDetail which are passed in the lelangSkDetailPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LelangSkDetail if any.
     *
     * @param lelangskdetailId The id of the LelangSkDetail to be deleted; value cannot be null.
     * @param lelangSkDetailPatch The partial data of LelangSkDetail which is supposed to be updated; value cannot be null.
     * @return The updated LelangSkDetail.
     * @throws EntityNotFoundException if no LelangSkDetail is found with given input.
     */
    LelangSkDetail partialUpdate(Integer lelangskdetailId, Map<String, Object> lelangSkDetailPatch);

    /**
     * Deletes an existing LelangSkDetail with the given id.
     *
     * @param lelangskdetailId The id of the LelangSkDetail to be deleted; value cannot be null.
     * @return The deleted LelangSkDetail.
     * @throws EntityNotFoundException if no LelangSkDetail found with the given id.
     */
    LelangSkDetail delete(Integer lelangskdetailId);

    /**
     * Deletes an existing LelangSkDetail with the given object.
     *
     * @param lelangSkDetail The instance of the LelangSkDetail to be deleted; value cannot be null.
     */
    void delete(LelangSkDetail lelangSkDetail);

    /**
     * Find all LelangSkDetails matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LelangSkDetails.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LelangSkDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LelangSkDetails matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LelangSkDetails.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSkDetail> findAll(String query, Pageable pageable);

    /**
     * Exports all LelangSkDetails matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LelangSkDetails matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LelangSkDetails in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LelangSkDetail.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated lelangSkParticipantses for given LelangSkDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LelangSkParticipants instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSkParticipants> findAssociatedLelangSkParticipantses(Integer id, Pageable pageable);

    /*
     * Returns the associated lelangSkDetailImageses for given LelangSkDetail id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated LelangSkDetailImages instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<LelangSkDetailImages> findAssociatedLelangSkDetailImageses(Integer id, Pageable pageable);

}