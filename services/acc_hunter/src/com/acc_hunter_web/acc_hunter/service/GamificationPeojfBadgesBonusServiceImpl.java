/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfBadgesBonus;


/**
 * ServiceImpl object for domain model class GamificationPeojfBadgesBonus.
 *
 * @see GamificationPeojfBadgesBonus
 */
@Service("acc_hunter.GamificationPeojfBadgesBonusService")
@Validated
public class GamificationPeojfBadgesBonusServiceImpl implements GamificationPeojfBadgesBonusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfBadgesBonusServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfBadgesBonusDao")
    private WMGenericDao<GamificationPeojfBadgesBonus, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfBadgesBonus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus create(GamificationPeojfBadgesBonus gamificationPeojfBadgesBonus) {
        LOGGER.debug("Creating a new GamificationPeojfBadgesBonus with information: {}", gamificationPeojfBadgesBonus);

        GamificationPeojfBadgesBonus gamificationPeojfBadgesBonusCreated = this.wmGenericDao.create(gamificationPeojfBadgesBonus);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfBadgesBonusCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus getById(Integer gamificationpeojfbadgesbonusId) {
        LOGGER.debug("Finding GamificationPeojfBadgesBonus by id: {}", gamificationpeojfbadgesbonusId);
        return this.wmGenericDao.findById(gamificationpeojfbadgesbonusId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus findById(Integer gamificationpeojfbadgesbonusId) {
        LOGGER.debug("Finding GamificationPeojfBadgesBonus by id: {}", gamificationpeojfbadgesbonusId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfbadgesbonusId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfBadgesBonus found with id: {}", gamificationpeojfbadgesbonusId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfBadgesBonus> findByMultipleIds(List<Integer> gamificationpeojfbadgesbonusIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfBadgesBonuses by ids: {}", gamificationpeojfbadgesbonusIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfbadgesbonusIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus update(GamificationPeojfBadgesBonus gamificationPeojfBadgesBonus) {
        LOGGER.debug("Updating GamificationPeojfBadgesBonus with information: {}", gamificationPeojfBadgesBonus);

        this.wmGenericDao.update(gamificationPeojfBadgesBonus);
        this.wmGenericDao.refresh(gamificationPeojfBadgesBonus);

        return gamificationPeojfBadgesBonus;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus partialUpdate(Integer gamificationpeojfbadgesbonusId, Map<String, Object>gamificationPeojfBadgesBonusPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfBadgesBonus with id: {}", gamificationpeojfbadgesbonusId);

        GamificationPeojfBadgesBonus gamificationPeojfBadgesBonus = getById(gamificationpeojfbadgesbonusId);

        try {
            ObjectReader gamificationPeojfBadgesBonusReader = this.objectMapper.reader().forType(GamificationPeojfBadgesBonus.class).withValueToUpdate(gamificationPeojfBadgesBonus);
            gamificationPeojfBadgesBonus = gamificationPeojfBadgesBonusReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfBadgesBonusPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfBadgesBonusPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfBadgesBonus = update(gamificationPeojfBadgesBonus);

        return gamificationPeojfBadgesBonus;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfBadgesBonus delete(Integer gamificationpeojfbadgesbonusId) {
        LOGGER.debug("Deleting GamificationPeojfBadgesBonus with id: {}", gamificationpeojfbadgesbonusId);
        GamificationPeojfBadgesBonus deleted = this.wmGenericDao.findById(gamificationpeojfbadgesbonusId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfBadgesBonus found with id: {}", gamificationpeojfbadgesbonusId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfBadgesBonus.class.getSimpleName(), gamificationpeojfbadgesbonusId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfBadgesBonus gamificationPeojfBadgesBonus) {
        LOGGER.debug("Deleting GamificationPeojfBadgesBonus with {}", gamificationPeojfBadgesBonus);
        this.wmGenericDao.delete(gamificationPeojfBadgesBonus);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfBadgesBonus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfBadgesBonuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfBadgesBonus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfBadgesBonuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfBadgesBonus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfBadgesBonus to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}