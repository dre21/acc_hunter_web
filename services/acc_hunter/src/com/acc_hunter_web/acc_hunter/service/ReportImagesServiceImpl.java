/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.ReportImages;


/**
 * ServiceImpl object for domain model class ReportImages.
 *
 * @see ReportImages
 */
@Service("acc_hunter.ReportImagesService")
@Validated
public class ReportImagesServiceImpl implements ReportImagesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReportImagesServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.ReportImagesDao")
    private WMGenericDao<ReportImages, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<ReportImages, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public ReportImages create(ReportImages reportImages) {
        LOGGER.debug("Creating a new ReportImages with information: {}", reportImages);

        ReportImages reportImagesCreated = this.wmGenericDao.create(reportImages);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(reportImagesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public ReportImages getById(Integer reportimagesId) {
        LOGGER.debug("Finding ReportImages by id: {}", reportimagesId);
        return this.wmGenericDao.findById(reportimagesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public ReportImages findById(Integer reportimagesId) {
        LOGGER.debug("Finding ReportImages by id: {}", reportimagesId);
        try {
            return this.wmGenericDao.findById(reportimagesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ReportImages found with id: {}", reportimagesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<ReportImages> findByMultipleIds(List<Integer> reportimagesIds, boolean orderedReturn) {
        LOGGER.debug("Finding ReportImages by ids: {}", reportimagesIds);

        return this.wmGenericDao.findByMultipleIds(reportimagesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public ReportImages update(ReportImages reportImages) {
        LOGGER.debug("Updating ReportImages with information: {}", reportImages);

        this.wmGenericDao.update(reportImages);
        this.wmGenericDao.refresh(reportImages);

        return reportImages;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public ReportImages partialUpdate(Integer reportimagesId, Map<String, Object>reportImagesPatch) {
        LOGGER.debug("Partially Updating the ReportImages with id: {}", reportimagesId);

        ReportImages reportImages = getById(reportimagesId);

        try {
            ObjectReader reportImagesReader = this.objectMapper.reader().forType(ReportImages.class).withValueToUpdate(reportImages);
            reportImages = reportImagesReader.readValue(this.objectMapper.writeValueAsString(reportImagesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", reportImagesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        reportImages = update(reportImages);

        return reportImages;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public ReportImages delete(Integer reportimagesId) {
        LOGGER.debug("Deleting ReportImages with id: {}", reportimagesId);
        ReportImages deleted = this.wmGenericDao.findById(reportimagesId);
        if (deleted == null) {
            LOGGER.debug("No ReportImages found with id: {}", reportimagesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), ReportImages.class.getSimpleName(), reportimagesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(ReportImages reportImages) {
        LOGGER.debug("Deleting ReportImages with {}", reportImages);
        this.wmGenericDao.delete(reportImages);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<ReportImages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ReportImages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<ReportImages> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ReportImages");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table ReportImages to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table ReportImages to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}