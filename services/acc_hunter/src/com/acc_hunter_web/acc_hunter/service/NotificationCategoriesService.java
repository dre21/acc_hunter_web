/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.NotificationCategories;
import com.acc_hunter_web.acc_hunter.NotificationTemplates;
import com.acc_hunter_web.acc_hunter.NotificationUsers;

/**
 * Service object for domain model class {@link NotificationCategories}.
 */
public interface NotificationCategoriesService {

    /**
     * Creates a new NotificationCategories. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationCategories if any.
     *
     * @param notificationCategories Details of the NotificationCategories to be created; value cannot be null.
     * @return The newly created NotificationCategories.
     */
    NotificationCategories create(@Valid NotificationCategories notificationCategories);


	/**
     * Returns NotificationCategories by given id if exists.
     *
     * @param notificationcategoriesId The id of the NotificationCategories to get; value cannot be null.
     * @return NotificationCategories associated with the given notificationcategoriesId.
	 * @throws EntityNotFoundException If no NotificationCategories is found.
     */
    NotificationCategories getById(Integer notificationcategoriesId);

    /**
     * Find and return the NotificationCategories by given id if exists, returns null otherwise.
     *
     * @param notificationcategoriesId The id of the NotificationCategories to get; value cannot be null.
     * @return NotificationCategories associated with the given notificationcategoriesId.
     */
    NotificationCategories findById(Integer notificationcategoriesId);

	/**
     * Find and return the list of NotificationCategories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param notificationcategoriesIds The id's of the NotificationCategories to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return NotificationCategories associated with the given notificationcategoriesIds.
     */
    List<NotificationCategories> findByMultipleIds(List<Integer> notificationcategoriesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing NotificationCategories. It replaces all fields of the existing NotificationCategories with the given notificationCategories.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationCategories if any.
     *
     * @param notificationCategories The details of the NotificationCategories to be updated; value cannot be null.
     * @return The updated NotificationCategories.
     * @throws EntityNotFoundException if no NotificationCategories is found with given input.
     */
    NotificationCategories update(@Valid NotificationCategories notificationCategories);


    /**
     * Partially updates the details of an existing NotificationCategories. It updates only the
     * fields of the existing NotificationCategories which are passed in the notificationCategoriesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationCategories if any.
     *
     * @param notificationcategoriesId The id of the NotificationCategories to be deleted; value cannot be null.
     * @param notificationCategoriesPatch The partial data of NotificationCategories which is supposed to be updated; value cannot be null.
     * @return The updated NotificationCategories.
     * @throws EntityNotFoundException if no NotificationCategories is found with given input.
     */
    NotificationCategories partialUpdate(Integer notificationcategoriesId, Map<String, Object> notificationCategoriesPatch);

    /**
     * Deletes an existing NotificationCategories with the given id.
     *
     * @param notificationcategoriesId The id of the NotificationCategories to be deleted; value cannot be null.
     * @return The deleted NotificationCategories.
     * @throws EntityNotFoundException if no NotificationCategories found with the given id.
     */
    NotificationCategories delete(Integer notificationcategoriesId);

    /**
     * Deletes an existing NotificationCategories with the given object.
     *
     * @param notificationCategories The instance of the NotificationCategories to be deleted; value cannot be null.
     */
    void delete(NotificationCategories notificationCategories);

    /**
     * Find all NotificationCategories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationCategories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<NotificationCategories> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all NotificationCategories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationCategories.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotificationCategories> findAll(String query, Pageable pageable);

    /**
     * Exports all NotificationCategories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all NotificationCategories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the NotificationCategories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the NotificationCategories.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated notificationTemplateses for given NotificationCategories id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated NotificationTemplates instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotificationTemplates> findAssociatedNotificationTemplateses(Integer id, Pageable pageable);

    /*
     * Returns the associated notificationUserses for given NotificationCategories id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated NotificationUsers instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotificationUsers> findAssociatedNotificationUserses(Integer id, Pageable pageable);

}