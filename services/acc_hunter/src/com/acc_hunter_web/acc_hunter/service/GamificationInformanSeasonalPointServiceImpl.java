/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationInformanSeasonalPoint;


/**
 * ServiceImpl object for domain model class GamificationInformanSeasonalPoint.
 *
 * @see GamificationInformanSeasonalPoint
 */
@Service("acc_hunter.GamificationInformanSeasonalPointService")
@Validated
public class GamificationInformanSeasonalPointServiceImpl implements GamificationInformanSeasonalPointService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationInformanSeasonalPointServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationInformanSeasonalPointDao")
    private WMGenericDao<GamificationInformanSeasonalPoint, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationInformanSeasonalPoint, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint create(GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint) {
        LOGGER.debug("Creating a new GamificationInformanSeasonalPoint with information: {}", gamificationInformanSeasonalPoint);

        GamificationInformanSeasonalPoint gamificationInformanSeasonalPointCreated = this.wmGenericDao.create(gamificationInformanSeasonalPoint);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationInformanSeasonalPointCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint getById(Integer gamificationinformanseasonalpointId) {
        LOGGER.debug("Finding GamificationInformanSeasonalPoint by id: {}", gamificationinformanseasonalpointId);
        return this.wmGenericDao.findById(gamificationinformanseasonalpointId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint findById(Integer gamificationinformanseasonalpointId) {
        LOGGER.debug("Finding GamificationInformanSeasonalPoint by id: {}", gamificationinformanseasonalpointId);
        try {
            return this.wmGenericDao.findById(gamificationinformanseasonalpointId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationInformanSeasonalPoint found with id: {}", gamificationinformanseasonalpointId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationInformanSeasonalPoint> findByMultipleIds(List<Integer> gamificationinformanseasonalpointIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationInformanSeasonalPoints by ids: {}", gamificationinformanseasonalpointIds);

        return this.wmGenericDao.findByMultipleIds(gamificationinformanseasonalpointIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint update(GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint) {
        LOGGER.debug("Updating GamificationInformanSeasonalPoint with information: {}", gamificationInformanSeasonalPoint);

        this.wmGenericDao.update(gamificationInformanSeasonalPoint);
        this.wmGenericDao.refresh(gamificationInformanSeasonalPoint);

        return gamificationInformanSeasonalPoint;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint partialUpdate(Integer gamificationinformanseasonalpointId, Map<String, Object>gamificationInformanSeasonalPointPatch) {
        LOGGER.debug("Partially Updating the GamificationInformanSeasonalPoint with id: {}", gamificationinformanseasonalpointId);

        GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint = getById(gamificationinformanseasonalpointId);

        try {
            ObjectReader gamificationInformanSeasonalPointReader = this.objectMapper.reader().forType(GamificationInformanSeasonalPoint.class).withValueToUpdate(gamificationInformanSeasonalPoint);
            gamificationInformanSeasonalPoint = gamificationInformanSeasonalPointReader.readValue(this.objectMapper.writeValueAsString(gamificationInformanSeasonalPointPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationInformanSeasonalPointPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationInformanSeasonalPoint = update(gamificationInformanSeasonalPoint);

        return gamificationInformanSeasonalPoint;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSeasonalPoint delete(Integer gamificationinformanseasonalpointId) {
        LOGGER.debug("Deleting GamificationInformanSeasonalPoint with id: {}", gamificationinformanseasonalpointId);
        GamificationInformanSeasonalPoint deleted = this.wmGenericDao.findById(gamificationinformanseasonalpointId);
        if (deleted == null) {
            LOGGER.debug("No GamificationInformanSeasonalPoint found with id: {}", gamificationinformanseasonalpointId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationInformanSeasonalPoint.class.getSimpleName(), gamificationinformanseasonalpointId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint) {
        LOGGER.debug("Deleting GamificationInformanSeasonalPoint with {}", gamificationInformanSeasonalPoint);
        this.wmGenericDao.delete(gamificationInformanSeasonalPoint);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationInformanSeasonalPoint> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationInformanSeasonalPoints");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationInformanSeasonalPoint> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationInformanSeasonalPoints");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationInformanSeasonalPoint to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationInformanSeasonalPoint to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}