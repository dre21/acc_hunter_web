/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Otp;

/**
 * Service object for domain model class {@link Otp}.
 */
public interface OtpService {

    /**
     * Creates a new Otp. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Otp if any.
     *
     * @param otpInstance Details of the Otp to be created; value cannot be null.
     * @return The newly created Otp.
     */
    Otp create(@Valid Otp otpInstance);


	/**
     * Returns Otp by given id if exists.
     *
     * @param otpId The id of the Otp to get; value cannot be null.
     * @return Otp associated with the given otpId.
	 * @throws EntityNotFoundException If no Otp is found.
     */
    Otp getById(Integer otpId);

    /**
     * Find and return the Otp by given id if exists, returns null otherwise.
     *
     * @param otpId The id of the Otp to get; value cannot be null.
     * @return Otp associated with the given otpId.
     */
    Otp findById(Integer otpId);

	/**
     * Find and return the list of Otps by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param otpIds The id's of the Otp to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Otps associated with the given otpIds.
     */
    List<Otp> findByMultipleIds(List<Integer> otpIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Otp. It replaces all fields of the existing Otp with the given otpInstance.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Otp if any.
     *
     * @param otpInstance The details of the Otp to be updated; value cannot be null.
     * @return The updated Otp.
     * @throws EntityNotFoundException if no Otp is found with given input.
     */
    Otp update(@Valid Otp otpInstance);


    /**
     * Partially updates the details of an existing Otp. It updates only the
     * fields of the existing Otp which are passed in the otpInstancePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Otp if any.
     *
     * @param otpId The id of the Otp to be deleted; value cannot be null.
     * @param otpInstancePatch The partial data of Otp which is supposed to be updated; value cannot be null.
     * @return The updated Otp.
     * @throws EntityNotFoundException if no Otp is found with given input.
     */
    Otp partialUpdate(Integer otpId, Map<String, Object> otpInstancePatch);

    /**
     * Deletes an existing Otp with the given id.
     *
     * @param otpId The id of the Otp to be deleted; value cannot be null.
     * @return The deleted Otp.
     * @throws EntityNotFoundException if no Otp found with the given id.
     */
    Otp delete(Integer otpId);

    /**
     * Deletes an existing Otp with the given object.
     *
     * @param otpInstance The instance of the Otp to be deleted; value cannot be null.
     */
    void delete(Otp otpInstance);

    /**
     * Find all Otps matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Otps.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Otp> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Otps matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Otps.
     *
     * @see Pageable
     * @see Page
     */
    Page<Otp> findAll(String query, Pageable pageable);

    /**
     * Exports all Otps matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Otps matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Otps in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Otp.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}