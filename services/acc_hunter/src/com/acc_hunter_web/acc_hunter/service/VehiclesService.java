/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Reports;
import com.acc_hunter_web.acc_hunter.Sayembara;
import com.acc_hunter_web.acc_hunter.Vehicles;

/**
 * Service object for domain model class {@link Vehicles}.
 */
public interface VehiclesService {

    /**
     * Creates a new Vehicles. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vehicles if any.
     *
     * @param vehicles Details of the Vehicles to be created; value cannot be null.
     * @return The newly created Vehicles.
     */
    Vehicles create(@Valid Vehicles vehicles);


	/**
     * Returns Vehicles by given id if exists.
     *
     * @param vehiclesId The id of the Vehicles to get; value cannot be null.
     * @return Vehicles associated with the given vehiclesId.
	 * @throws EntityNotFoundException If no Vehicles is found.
     */
    Vehicles getById(String vehiclesId);

    /**
     * Find and return the Vehicles by given id if exists, returns null otherwise.
     *
     * @param vehiclesId The id of the Vehicles to get; value cannot be null.
     * @return Vehicles associated with the given vehiclesId.
     */
    Vehicles findById(String vehiclesId);

	/**
     * Find and return the list of Vehicles by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param vehiclesIds The id's of the Vehicles to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Vehicles associated with the given vehiclesIds.
     */
    List<Vehicles> findByMultipleIds(List<String> vehiclesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Vehicles. It replaces all fields of the existing Vehicles with the given vehicles.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vehicles if any.
     *
     * @param vehicles The details of the Vehicles to be updated; value cannot be null.
     * @return The updated Vehicles.
     * @throws EntityNotFoundException if no Vehicles is found with given input.
     */
    Vehicles update(@Valid Vehicles vehicles);


    /**
     * Partially updates the details of an existing Vehicles. It updates only the
     * fields of the existing Vehicles which are passed in the vehiclesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Vehicles if any.
     *
     * @param vehiclesId The id of the Vehicles to be deleted; value cannot be null.
     * @param vehiclesPatch The partial data of Vehicles which is supposed to be updated; value cannot be null.
     * @return The updated Vehicles.
     * @throws EntityNotFoundException if no Vehicles is found with given input.
     */
    Vehicles partialUpdate(String vehiclesId, Map<String, Object> vehiclesPatch);

    /**
     * Deletes an existing Vehicles with the given id.
     *
     * @param vehiclesId The id of the Vehicles to be deleted; value cannot be null.
     * @return The deleted Vehicles.
     * @throws EntityNotFoundException if no Vehicles found with the given id.
     */
    Vehicles delete(String vehiclesId);

    /**
     * Deletes an existing Vehicles with the given object.
     *
     * @param vehicles The instance of the Vehicles to be deleted; value cannot be null.
     */
    void delete(Vehicles vehicles);

    /**
     * Find all Vehicles matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vehicles.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Vehicles> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Vehicles matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vehicles.
     *
     * @see Pageable
     * @see Page
     */
    Page<Vehicles> findAll(String query, Pageable pageable);

    /**
     * Exports all Vehicles matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Vehicles matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Vehicles in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Vehicles.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated sayembaras for given Vehicles id.
     *
     * @param noAggr value of noAggr; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Sayembara instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Sayembara> findAssociatedSayembaras(String noAggr, Pageable pageable);

    /*
     * Returns the associated reportses for given Vehicles id.
     *
     * @param noAggr value of noAggr; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Reports instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Reports> findAssociatedReportses(String noAggr, Pageable pageable);

}