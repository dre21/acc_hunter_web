/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.MasterArea;
import com.acc_hunter_web.acc_hunter.RemoRegions;


/**
 * ServiceImpl object for domain model class RemoRegions.
 *
 * @see RemoRegions
 */
@Service("acc_hunter.RemoRegionsService")
@Validated
public class RemoRegionsServiceImpl implements RemoRegionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RemoRegionsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.MasterAreaService")
    private MasterAreaService masterAreaService;

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.LelangSkDetailService")
    private LelangSkDetailService lelangSkDetailService;

    @Autowired
    @Qualifier("acc_hunter.RemoRegionsDao")
    private WMGenericDao<RemoRegions, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RemoRegions, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions create(RemoRegions remoRegions) {
        LOGGER.debug("Creating a new RemoRegions with information: {}", remoRegions);

        RemoRegions remoRegionsCreated = this.wmGenericDao.create(remoRegions);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(remoRegionsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions getById(Integer remoregionsId) {
        LOGGER.debug("Finding RemoRegions by id: {}", remoregionsId);
        return this.wmGenericDao.findById(remoregionsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions findById(Integer remoregionsId) {
        LOGGER.debug("Finding RemoRegions by id: {}", remoregionsId);
        try {
            return this.wmGenericDao.findById(remoregionsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RemoRegions found with id: {}", remoregionsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<RemoRegions> findByMultipleIds(List<Integer> remoregionsIds, boolean orderedReturn) {
        LOGGER.debug("Finding RemoRegions by ids: {}", remoregionsIds);

        return this.wmGenericDao.findByMultipleIds(remoregionsIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions getByRegion(String region) {
        Map<String, Object> regionMap = new HashMap<>();
        regionMap.put("region", region);

        LOGGER.debug("Finding RemoRegions by unique keys: {}", regionMap);
        return this.wmGenericDao.findByUniqueKey(regionMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions update(RemoRegions remoRegions) {
        LOGGER.debug("Updating RemoRegions with information: {}", remoRegions);

        this.wmGenericDao.update(remoRegions);
        this.wmGenericDao.refresh(remoRegions);

        return remoRegions;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions partialUpdate(Integer remoregionsId, Map<String, Object>remoRegionsPatch) {
        LOGGER.debug("Partially Updating the RemoRegions with id: {}", remoregionsId);

        RemoRegions remoRegions = getById(remoregionsId);

        try {
            ObjectReader remoRegionsReader = this.objectMapper.reader().forType(RemoRegions.class).withValueToUpdate(remoRegions);
            remoRegions = remoRegionsReader.readValue(this.objectMapper.writeValueAsString(remoRegionsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", remoRegionsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        remoRegions = update(remoRegions);

        return remoRegions;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RemoRegions delete(Integer remoregionsId) {
        LOGGER.debug("Deleting RemoRegions with id: {}", remoregionsId);
        RemoRegions deleted = this.wmGenericDao.findById(remoregionsId);
        if (deleted == null) {
            LOGGER.debug("No RemoRegions found with id: {}", remoregionsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RemoRegions.class.getSimpleName(), remoregionsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(RemoRegions remoRegions) {
        LOGGER.debug("Deleting RemoRegions with {}", remoRegions);
        this.wmGenericDao.delete(remoRegions);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RemoRegions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RemoRegions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RemoRegions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RemoRegions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table RemoRegions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table RemoRegions to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkDetail> findAssociatedLelangSkDetails(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated lelangSkDetails");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("remoRegions.id = '" + id + "'");

        return lelangSkDetailService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<MasterArea> findAssociatedMasterAreas(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterAreas");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("remoRegions.id = '" + id + "'");

        return masterAreaService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service MasterAreaService instance
     */
    protected void setMasterAreaService(MasterAreaService service) {
        this.masterAreaService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LelangSkDetailService instance
     */
    protected void setLelangSkDetailService(LelangSkDetailService service) {
        this.lelangSkDetailService = service;
    }

}