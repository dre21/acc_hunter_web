/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangParticipants;


/**
 * ServiceImpl object for domain model class LelangParticipants.
 *
 * @see LelangParticipants
 */
@Service("acc_hunter.LelangParticipantsService")
@Validated
public class LelangParticipantsServiceImpl implements LelangParticipantsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangParticipantsServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.LelangParticipantsDao")
    private WMGenericDao<LelangParticipants, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LelangParticipants, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants create(LelangParticipants lelangParticipants) {
        LOGGER.debug("Creating a new LelangParticipants with information: {}", lelangParticipants);

        LelangParticipants lelangParticipantsCreated = this.wmGenericDao.create(lelangParticipants);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(lelangParticipantsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants getById(Integer lelangparticipantsId) {
        LOGGER.debug("Finding LelangParticipants by id: {}", lelangparticipantsId);
        return this.wmGenericDao.findById(lelangparticipantsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants findById(Integer lelangparticipantsId) {
        LOGGER.debug("Finding LelangParticipants by id: {}", lelangparticipantsId);
        try {
            return this.wmGenericDao.findById(lelangparticipantsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LelangParticipants found with id: {}", lelangparticipantsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<LelangParticipants> findByMultipleIds(List<Integer> lelangparticipantsIds, boolean orderedReturn) {
        LOGGER.debug("Finding LelangParticipants by ids: {}", lelangparticipantsIds);

        return this.wmGenericDao.findByMultipleIds(lelangparticipantsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants update(LelangParticipants lelangParticipants) {
        LOGGER.debug("Updating LelangParticipants with information: {}", lelangParticipants);

        this.wmGenericDao.update(lelangParticipants);
        this.wmGenericDao.refresh(lelangParticipants);

        return lelangParticipants;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants partialUpdate(Integer lelangparticipantsId, Map<String, Object>lelangParticipantsPatch) {
        LOGGER.debug("Partially Updating the LelangParticipants with id: {}", lelangparticipantsId);

        LelangParticipants lelangParticipants = getById(lelangparticipantsId);

        try {
            ObjectReader lelangParticipantsReader = this.objectMapper.reader().forType(LelangParticipants.class).withValueToUpdate(lelangParticipants);
            lelangParticipants = lelangParticipantsReader.readValue(this.objectMapper.writeValueAsString(lelangParticipantsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", lelangParticipantsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        lelangParticipants = update(lelangParticipants);

        return lelangParticipants;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangParticipants delete(Integer lelangparticipantsId) {
        LOGGER.debug("Deleting LelangParticipants with id: {}", lelangparticipantsId);
        LelangParticipants deleted = this.wmGenericDao.findById(lelangparticipantsId);
        if (deleted == null) {
            LOGGER.debug("No LelangParticipants found with id: {}", lelangparticipantsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LelangParticipants.class.getSimpleName(), lelangparticipantsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(LelangParticipants lelangParticipants) {
        LOGGER.debug("Deleting LelangParticipants with {}", lelangParticipants);
        this.wmGenericDao.delete(lelangParticipants);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangParticipants> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LelangParticipants");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangParticipants> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LelangParticipants");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangParticipants to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangParticipants to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}