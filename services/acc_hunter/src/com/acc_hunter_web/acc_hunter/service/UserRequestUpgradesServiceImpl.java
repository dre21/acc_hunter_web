/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserRequestUpgrades;


/**
 * ServiceImpl object for domain model class UserRequestUpgrades.
 *
 * @see UserRequestUpgrades
 */
@Service("acc_hunter.UserRequestUpgradesService")
@Validated
public class UserRequestUpgradesServiceImpl implements UserRequestUpgradesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserRequestUpgradesServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.UserRequestUpgradesDao")
    private WMGenericDao<UserRequestUpgrades, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserRequestUpgrades, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades create(UserRequestUpgrades userRequestUpgrades) {
        LOGGER.debug("Creating a new UserRequestUpgrades with information: {}", userRequestUpgrades);

        UserRequestUpgrades userRequestUpgradesCreated = this.wmGenericDao.create(userRequestUpgrades);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userRequestUpgradesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades getById(Integer userrequestupgradesId) {
        LOGGER.debug("Finding UserRequestUpgrades by id: {}", userrequestupgradesId);
        return this.wmGenericDao.findById(userrequestupgradesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades findById(Integer userrequestupgradesId) {
        LOGGER.debug("Finding UserRequestUpgrades by id: {}", userrequestupgradesId);
        try {
            return this.wmGenericDao.findById(userrequestupgradesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserRequestUpgrades found with id: {}", userrequestupgradesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<UserRequestUpgrades> findByMultipleIds(List<Integer> userrequestupgradesIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserRequestUpgrades by ids: {}", userrequestupgradesIds);

        return this.wmGenericDao.findByMultipleIds(userrequestupgradesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades update(UserRequestUpgrades userRequestUpgrades) {
        LOGGER.debug("Updating UserRequestUpgrades with information: {}", userRequestUpgrades);

        this.wmGenericDao.update(userRequestUpgrades);
        this.wmGenericDao.refresh(userRequestUpgrades);

        return userRequestUpgrades;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades partialUpdate(Integer userrequestupgradesId, Map<String, Object>userRequestUpgradesPatch) {
        LOGGER.debug("Partially Updating the UserRequestUpgrades with id: {}", userrequestupgradesId);

        UserRequestUpgrades userRequestUpgrades = getById(userrequestupgradesId);

        try {
            ObjectReader userRequestUpgradesReader = this.objectMapper.reader().forType(UserRequestUpgrades.class).withValueToUpdate(userRequestUpgrades);
            userRequestUpgrades = userRequestUpgradesReader.readValue(this.objectMapper.writeValueAsString(userRequestUpgradesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userRequestUpgradesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userRequestUpgrades = update(userRequestUpgrades);

        return userRequestUpgrades;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserRequestUpgrades delete(Integer userrequestupgradesId) {
        LOGGER.debug("Deleting UserRequestUpgrades with id: {}", userrequestupgradesId);
        UserRequestUpgrades deleted = this.wmGenericDao.findById(userrequestupgradesId);
        if (deleted == null) {
            LOGGER.debug("No UserRequestUpgrades found with id: {}", userrequestupgradesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserRequestUpgrades.class.getSimpleName(), userrequestupgradesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(UserRequestUpgrades userRequestUpgrades) {
        LOGGER.debug("Deleting UserRequestUpgrades with {}", userRequestUpgrades);
        this.wmGenericDao.delete(userRequestUpgrades);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserRequestUpgrades> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserRequestUpgrades");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserRequestUpgrades> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserRequestUpgrades");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserRequestUpgrades to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserRequestUpgrades to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}