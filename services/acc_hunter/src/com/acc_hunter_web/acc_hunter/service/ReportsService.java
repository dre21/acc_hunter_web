/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.ReportImages;
import com.acc_hunter_web.acc_hunter.Reports;

/**
 * Service object for domain model class {@link Reports}.
 */
public interface ReportsService {

    /**
     * Creates a new Reports. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Reports if any.
     *
     * @param reports Details of the Reports to be created; value cannot be null.
     * @return The newly created Reports.
     */
    Reports create(@Valid Reports reports);


	/**
     * Returns Reports by given id if exists.
     *
     * @param reportsId The id of the Reports to get; value cannot be null.
     * @return Reports associated with the given reportsId.
	 * @throws EntityNotFoundException If no Reports is found.
     */
    Reports getById(Integer reportsId);

    /**
     * Find and return the Reports by given id if exists, returns null otherwise.
     *
     * @param reportsId The id of the Reports to get; value cannot be null.
     * @return Reports associated with the given reportsId.
     */
    Reports findById(Integer reportsId);

	/**
     * Find and return the list of Reports by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param reportsIds The id's of the Reports to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Reports associated with the given reportsIds.
     */
    List<Reports> findByMultipleIds(List<Integer> reportsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Reports. It replaces all fields of the existing Reports with the given reports.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Reports if any.
     *
     * @param reports The details of the Reports to be updated; value cannot be null.
     * @return The updated Reports.
     * @throws EntityNotFoundException if no Reports is found with given input.
     */
    Reports update(@Valid Reports reports);


    /**
     * Partially updates the details of an existing Reports. It updates only the
     * fields of the existing Reports which are passed in the reportsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Reports if any.
     *
     * @param reportsId The id of the Reports to be deleted; value cannot be null.
     * @param reportsPatch The partial data of Reports which is supposed to be updated; value cannot be null.
     * @return The updated Reports.
     * @throws EntityNotFoundException if no Reports is found with given input.
     */
    Reports partialUpdate(Integer reportsId, Map<String, Object> reportsPatch);

    /**
     * Deletes an existing Reports with the given id.
     *
     * @param reportsId The id of the Reports to be deleted; value cannot be null.
     * @return The deleted Reports.
     * @throws EntityNotFoundException if no Reports found with the given id.
     */
    Reports delete(Integer reportsId);

    /**
     * Deletes an existing Reports with the given object.
     *
     * @param reports The instance of the Reports to be deleted; value cannot be null.
     */
    void delete(Reports reports);

    /**
     * Find all Reports matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Reports.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Reports> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Reports matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Reports.
     *
     * @see Pageable
     * @see Page
     */
    Page<Reports> findAll(String query, Pageable pageable);

    /**
     * Exports all Reports matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Reports matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Reports in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Reports.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated reportImageses for given Reports id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated ReportImages instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<ReportImages> findAssociatedReportImageses(Integer id, Pageable pageable);

}