/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Btmk;


/**
 * ServiceImpl object for domain model class Btmk.
 *
 * @see Btmk
 */
@Service("acc_hunter.BtmkService")
@Validated
public class BtmkServiceImpl implements BtmkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BtmkServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.BtmkDao")
    private WMGenericDao<Btmk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Btmk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Btmk create(Btmk btmk) {
        LOGGER.debug("Creating a new Btmk with information: {}", btmk);

        Btmk btmkCreated = this.wmGenericDao.create(btmk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(btmkCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Btmk getById(Integer btmkId) {
        LOGGER.debug("Finding Btmk by id: {}", btmkId);
        return this.wmGenericDao.findById(btmkId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Btmk findById(Integer btmkId) {
        LOGGER.debug("Finding Btmk by id: {}", btmkId);
        try {
            return this.wmGenericDao.findById(btmkId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Btmk found with id: {}", btmkId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Btmk> findByMultipleIds(List<Integer> btmkIds, boolean orderedReturn) {
        LOGGER.debug("Finding Btmks by ids: {}", btmkIds);

        return this.wmGenericDao.findByMultipleIds(btmkIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Btmk update(Btmk btmk) {
        LOGGER.debug("Updating Btmk with information: {}", btmk);

        this.wmGenericDao.update(btmk);
        this.wmGenericDao.refresh(btmk);

        return btmk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Btmk partialUpdate(Integer btmkId, Map<String, Object>btmkPatch) {
        LOGGER.debug("Partially Updating the Btmk with id: {}", btmkId);

        Btmk btmk = getById(btmkId);

        try {
            ObjectReader btmkReader = this.objectMapper.reader().forType(Btmk.class).withValueToUpdate(btmk);
            btmk = btmkReader.readValue(this.objectMapper.writeValueAsString(btmkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", btmkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        btmk = update(btmk);

        return btmk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Btmk delete(Integer btmkId) {
        LOGGER.debug("Deleting Btmk with id: {}", btmkId);
        Btmk deleted = this.wmGenericDao.findById(btmkId);
        if (deleted == null) {
            LOGGER.debug("No Btmk found with id: {}", btmkId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Btmk.class.getSimpleName(), btmkId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Btmk btmk) {
        LOGGER.debug("Deleting Btmk with {}", btmk);
        this.wmGenericDao.delete(btmk);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Btmk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Btmks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Btmk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Btmks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Btmk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Btmk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}