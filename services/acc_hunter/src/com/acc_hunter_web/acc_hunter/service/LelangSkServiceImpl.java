/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSk;
import com.acc_hunter_web.acc_hunter.LelangSkDetail;


/**
 * ServiceImpl object for domain model class LelangSk.
 *
 * @see LelangSk
 */
@Service("acc_hunter.LelangSkService")
@Validated
public class LelangSkServiceImpl implements LelangSkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.LelangSkDetailService")
    private LelangSkDetailService lelangSkDetailService;

    @Autowired
    @Qualifier("acc_hunter.LelangSkDao")
    private WMGenericDao<LelangSk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LelangSk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSk create(LelangSk lelangSk) {
        LOGGER.debug("Creating a new LelangSk with information: {}", lelangSk);

        LelangSk lelangSkCreated = this.wmGenericDao.create(lelangSk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(lelangSkCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSk getById(Integer lelangskId) {
        LOGGER.debug("Finding LelangSk by id: {}", lelangskId);
        return this.wmGenericDao.findById(lelangskId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSk findById(Integer lelangskId) {
        LOGGER.debug("Finding LelangSk by id: {}", lelangskId);
        try {
            return this.wmGenericDao.findById(lelangskId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LelangSk found with id: {}", lelangskId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<LelangSk> findByMultipleIds(List<Integer> lelangskIds, boolean orderedReturn) {
        LOGGER.debug("Finding LelangSks by ids: {}", lelangskIds);

        return this.wmGenericDao.findByMultipleIds(lelangskIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSk getByRemoId(int remoId) {
        Map<String, Object> remoIdMap = new HashMap<>();
        remoIdMap.put("remoId", remoId);

        LOGGER.debug("Finding LelangSk by unique keys: {}", remoIdMap);
        return this.wmGenericDao.findByUniqueKey(remoIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public LelangSk update(LelangSk lelangSk) {
        LOGGER.debug("Updating LelangSk with information: {}", lelangSk);

        this.wmGenericDao.update(lelangSk);
        this.wmGenericDao.refresh(lelangSk);

        return lelangSk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSk partialUpdate(Integer lelangskId, Map<String, Object>lelangSkPatch) {
        LOGGER.debug("Partially Updating the LelangSk with id: {}", lelangskId);

        LelangSk lelangSk = getById(lelangskId);

        try {
            ObjectReader lelangSkReader = this.objectMapper.reader().forType(LelangSk.class).withValueToUpdate(lelangSk);
            lelangSk = lelangSkReader.readValue(this.objectMapper.writeValueAsString(lelangSkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", lelangSkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        lelangSk = update(lelangSk);

        return lelangSk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSk delete(Integer lelangskId) {
        LOGGER.debug("Deleting LelangSk with id: {}", lelangskId);
        LelangSk deleted = this.wmGenericDao.findById(lelangskId);
        if (deleted == null) {
            LOGGER.debug("No LelangSk found with id: {}", lelangskId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LelangSk.class.getSimpleName(), lelangskId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(LelangSk lelangSk) {
        LOGGER.debug("Deleting LelangSk with {}", lelangSk);
        this.wmGenericDao.delete(lelangSk);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LelangSks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LelangSks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkDetail> findAssociatedLelangSkDetails(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated lelangSkDetails");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("lelangSk.id = '" + id + "'");

        return lelangSkDetailService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service LelangSkDetailService instance
     */
    protected void setLelangSkDetailService(LelangSkDetailService service) {
        this.lelangSkDetailService = service;
    }

}