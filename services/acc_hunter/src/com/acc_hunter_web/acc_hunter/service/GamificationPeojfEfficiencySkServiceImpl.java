/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfEfficiencySk;


/**
 * ServiceImpl object for domain model class GamificationPeojfEfficiencySk.
 *
 * @see GamificationPeojfEfficiencySk
 */
@Service("acc_hunter.GamificationPeojfEfficiencySkService")
@Validated
public class GamificationPeojfEfficiencySkServiceImpl implements GamificationPeojfEfficiencySkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfEfficiencySkServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfEfficiencySkDao")
    private WMGenericDao<GamificationPeojfEfficiencySk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfEfficiencySk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk create(GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk) {
        LOGGER.debug("Creating a new GamificationPeojfEfficiencySk with information: {}", gamificationPeojfEfficiencySk);

        GamificationPeojfEfficiencySk gamificationPeojfEfficiencySkCreated = this.wmGenericDao.create(gamificationPeojfEfficiencySk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfEfficiencySkCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk getById(Integer gamificationpeojfefficiencyskId) {
        LOGGER.debug("Finding GamificationPeojfEfficiencySk by id: {}", gamificationpeojfefficiencyskId);
        return this.wmGenericDao.findById(gamificationpeojfefficiencyskId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk findById(Integer gamificationpeojfefficiencyskId) {
        LOGGER.debug("Finding GamificationPeojfEfficiencySk by id: {}", gamificationpeojfefficiencyskId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfefficiencyskId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfEfficiencySk found with id: {}", gamificationpeojfefficiencyskId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfEfficiencySk> findByMultipleIds(List<Integer> gamificationpeojfefficiencyskIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfEfficiencySks by ids: {}", gamificationpeojfefficiencyskIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfefficiencyskIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk update(GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk) {
        LOGGER.debug("Updating GamificationPeojfEfficiencySk with information: {}", gamificationPeojfEfficiencySk);

        this.wmGenericDao.update(gamificationPeojfEfficiencySk);
        this.wmGenericDao.refresh(gamificationPeojfEfficiencySk);

        return gamificationPeojfEfficiencySk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk partialUpdate(Integer gamificationpeojfefficiencyskId, Map<String, Object>gamificationPeojfEfficiencySkPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfEfficiencySk with id: {}", gamificationpeojfefficiencyskId);

        GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk = getById(gamificationpeojfefficiencyskId);

        try {
            ObjectReader gamificationPeojfEfficiencySkReader = this.objectMapper.reader().forType(GamificationPeojfEfficiencySk.class).withValueToUpdate(gamificationPeojfEfficiencySk);
            gamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfEfficiencySkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfEfficiencySkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfEfficiencySk = update(gamificationPeojfEfficiencySk);

        return gamificationPeojfEfficiencySk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfEfficiencySk delete(Integer gamificationpeojfefficiencyskId) {
        LOGGER.debug("Deleting GamificationPeojfEfficiencySk with id: {}", gamificationpeojfefficiencyskId);
        GamificationPeojfEfficiencySk deleted = this.wmGenericDao.findById(gamificationpeojfefficiencyskId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfEfficiencySk found with id: {}", gamificationpeojfefficiencyskId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfEfficiencySk.class.getSimpleName(), gamificationpeojfefficiencyskId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk) {
        LOGGER.debug("Deleting GamificationPeojfEfficiencySk with {}", gamificationPeojfEfficiencySk);
        this.wmGenericDao.delete(gamificationPeojfEfficiencySk);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfEfficiencySk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfEfficiencySks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfEfficiencySk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfEfficiencySks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfEfficiencySk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfEfficiencySk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}