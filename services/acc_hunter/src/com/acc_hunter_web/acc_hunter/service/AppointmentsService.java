/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Appointments;
import com.acc_hunter_web.acc_hunter.UserRequestUpgrades;

/**
 * Service object for domain model class {@link Appointments}.
 */
public interface AppointmentsService {

    /**
     * Creates a new Appointments. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Appointments if any.
     *
     * @param appointments Details of the Appointments to be created; value cannot be null.
     * @return The newly created Appointments.
     */
    Appointments create(@Valid Appointments appointments);


	/**
     * Returns Appointments by given id if exists.
     *
     * @param appointmentsId The id of the Appointments to get; value cannot be null.
     * @return Appointments associated with the given appointmentsId.
	 * @throws EntityNotFoundException If no Appointments is found.
     */
    Appointments getById(Integer appointmentsId);

    /**
     * Find and return the Appointments by given id if exists, returns null otherwise.
     *
     * @param appointmentsId The id of the Appointments to get; value cannot be null.
     * @return Appointments associated with the given appointmentsId.
     */
    Appointments findById(Integer appointmentsId);

	/**
     * Find and return the list of Appointments by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param appointmentsIds The id's of the Appointments to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Appointments associated with the given appointmentsIds.
     */
    List<Appointments> findByMultipleIds(List<Integer> appointmentsIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Appointments. It replaces all fields of the existing Appointments with the given appointments.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Appointments if any.
     *
     * @param appointments The details of the Appointments to be updated; value cannot be null.
     * @return The updated Appointments.
     * @throws EntityNotFoundException if no Appointments is found with given input.
     */
    Appointments update(@Valid Appointments appointments);


    /**
     * Partially updates the details of an existing Appointments. It updates only the
     * fields of the existing Appointments which are passed in the appointmentsPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Appointments if any.
     *
     * @param appointmentsId The id of the Appointments to be deleted; value cannot be null.
     * @param appointmentsPatch The partial data of Appointments which is supposed to be updated; value cannot be null.
     * @return The updated Appointments.
     * @throws EntityNotFoundException if no Appointments is found with given input.
     */
    Appointments partialUpdate(Integer appointmentsId, Map<String, Object> appointmentsPatch);

    /**
     * Deletes an existing Appointments with the given id.
     *
     * @param appointmentsId The id of the Appointments to be deleted; value cannot be null.
     * @return The deleted Appointments.
     * @throws EntityNotFoundException if no Appointments found with the given id.
     */
    Appointments delete(Integer appointmentsId);

    /**
     * Deletes an existing Appointments with the given object.
     *
     * @param appointments The instance of the Appointments to be deleted; value cannot be null.
     */
    void delete(Appointments appointments);

    /**
     * Find all Appointments matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Appointments.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Appointments> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Appointments matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Appointments.
     *
     * @see Pageable
     * @see Page
     */
    Page<Appointments> findAll(String query, Pageable pageable);

    /**
     * Exports all Appointments matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Appointments matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Appointments in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Appointments.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userRequestUpgradeses for given Appointments id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated UserRequestUpgrades instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserRequestUpgrades> findAssociatedUserRequestUpgradeses(Integer id, Pageable pageable);

}