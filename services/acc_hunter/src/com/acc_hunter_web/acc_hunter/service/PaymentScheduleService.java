/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.PaymentSchedule;
import com.acc_hunter_web.acc_hunter.PaymentScheduleId;

/**
 * Service object for domain model class {@link PaymentSchedule}.
 */
public interface PaymentScheduleService {

    /**
     * Creates a new PaymentSchedule. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PaymentSchedule if any.
     *
     * @param paymentSchedule Details of the PaymentSchedule to be created; value cannot be null.
     * @return The newly created PaymentSchedule.
     */
    PaymentSchedule create(@Valid PaymentSchedule paymentSchedule);


	/**
     * Returns PaymentSchedule by given id if exists.
     *
     * @param paymentscheduleId The id of the PaymentSchedule to get; value cannot be null.
     * @return PaymentSchedule associated with the given paymentscheduleId.
	 * @throws EntityNotFoundException If no PaymentSchedule is found.
     */
    PaymentSchedule getById(PaymentScheduleId paymentscheduleId);

    /**
     * Find and return the PaymentSchedule by given id if exists, returns null otherwise.
     *
     * @param paymentscheduleId The id of the PaymentSchedule to get; value cannot be null.
     * @return PaymentSchedule associated with the given paymentscheduleId.
     */
    PaymentSchedule findById(PaymentScheduleId paymentscheduleId);

	/**
     * Find and return the list of PaymentSchedules by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param paymentscheduleIds The id's of the PaymentSchedule to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PaymentSchedules associated with the given paymentscheduleIds.
     */
    List<PaymentSchedule> findByMultipleIds(List<PaymentScheduleId> paymentscheduleIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PaymentSchedule. It replaces all fields of the existing PaymentSchedule with the given paymentSchedule.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PaymentSchedule if any.
     *
     * @param paymentSchedule The details of the PaymentSchedule to be updated; value cannot be null.
     * @return The updated PaymentSchedule.
     * @throws EntityNotFoundException if no PaymentSchedule is found with given input.
     */
    PaymentSchedule update(@Valid PaymentSchedule paymentSchedule);


    /**
     * Partially updates the details of an existing PaymentSchedule. It updates only the
     * fields of the existing PaymentSchedule which are passed in the paymentSchedulePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PaymentSchedule if any.
     *
     * @param paymentscheduleId The id of the PaymentSchedule to be deleted; value cannot be null.
     * @param paymentSchedulePatch The partial data of PaymentSchedule which is supposed to be updated; value cannot be null.
     * @return The updated PaymentSchedule.
     * @throws EntityNotFoundException if no PaymentSchedule is found with given input.
     */
    PaymentSchedule partialUpdate(PaymentScheduleId paymentscheduleId, Map<String, Object> paymentSchedulePatch);

    /**
     * Deletes an existing PaymentSchedule with the given id.
     *
     * @param paymentscheduleId The id of the PaymentSchedule to be deleted; value cannot be null.
     * @return The deleted PaymentSchedule.
     * @throws EntityNotFoundException if no PaymentSchedule found with the given id.
     */
    PaymentSchedule delete(PaymentScheduleId paymentscheduleId);

    /**
     * Deletes an existing PaymentSchedule with the given object.
     *
     * @param paymentSchedule The instance of the PaymentSchedule to be deleted; value cannot be null.
     */
    void delete(PaymentSchedule paymentSchedule);

    /**
     * Find all PaymentSchedules matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PaymentSchedules.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PaymentSchedule> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PaymentSchedules matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PaymentSchedules.
     *
     * @see Pageable
     * @see Page
     */
    Page<PaymentSchedule> findAll(String query, Pageable pageable);

    /**
     * Exports all PaymentSchedules matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PaymentSchedules matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PaymentSchedules in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PaymentSchedule.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}