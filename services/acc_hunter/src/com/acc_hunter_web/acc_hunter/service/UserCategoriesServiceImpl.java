/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserCategories;
import com.acc_hunter_web.acc_hunter.Users;


/**
 * ServiceImpl object for domain model class UserCategories.
 *
 * @see UserCategories
 */
@Service("acc_hunter.UserCategoriesService")
@Validated
public class UserCategoriesServiceImpl implements UserCategoriesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserCategoriesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.UsersService")
    private UsersService usersService;

    @Autowired
    @Qualifier("acc_hunter.UserCategoriesDao")
    private WMGenericDao<UserCategories, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserCategories, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserCategories create(UserCategories userCategories) {
        LOGGER.debug("Creating a new UserCategories with information: {}", userCategories);

        UserCategories userCategoriesCreated = this.wmGenericDao.create(userCategories);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userCategoriesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserCategories getById(Integer usercategoriesId) {
        LOGGER.debug("Finding UserCategories by id: {}", usercategoriesId);
        return this.wmGenericDao.findById(usercategoriesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserCategories findById(Integer usercategoriesId) {
        LOGGER.debug("Finding UserCategories by id: {}", usercategoriesId);
        try {
            return this.wmGenericDao.findById(usercategoriesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserCategories found with id: {}", usercategoriesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<UserCategories> findByMultipleIds(List<Integer> usercategoriesIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserCategories by ids: {}", usercategoriesIds);

        return this.wmGenericDao.findByMultipleIds(usercategoriesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public UserCategories update(UserCategories userCategories) {
        LOGGER.debug("Updating UserCategories with information: {}", userCategories);

        this.wmGenericDao.update(userCategories);
        this.wmGenericDao.refresh(userCategories);

        return userCategories;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserCategories partialUpdate(Integer usercategoriesId, Map<String, Object>userCategoriesPatch) {
        LOGGER.debug("Partially Updating the UserCategories with id: {}", usercategoriesId);

        UserCategories userCategories = getById(usercategoriesId);

        try {
            ObjectReader userCategoriesReader = this.objectMapper.reader().forType(UserCategories.class).withValueToUpdate(userCategories);
            userCategories = userCategoriesReader.readValue(this.objectMapper.writeValueAsString(userCategoriesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userCategoriesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userCategories = update(userCategories);

        return userCategories;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserCategories delete(Integer usercategoriesId) {
        LOGGER.debug("Deleting UserCategories with id: {}", usercategoriesId);
        UserCategories deleted = this.wmGenericDao.findById(usercategoriesId);
        if (deleted == null) {
            LOGGER.debug("No UserCategories found with id: {}", usercategoriesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserCategories.class.getSimpleName(), usercategoriesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(UserCategories userCategories) {
        LOGGER.debug("Deleting UserCategories with {}", userCategories);
        this.wmGenericDao.delete(userCategories);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserCategories> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserCategories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserCategories> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserCategories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserCategories to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserCategories to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Users> findAssociatedUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userCategories.id = '" + id + "'");

        return usersService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UsersService instance
     */
    protected void setUsersService(UsersService service) {
        this.usersService = service;
    }

}