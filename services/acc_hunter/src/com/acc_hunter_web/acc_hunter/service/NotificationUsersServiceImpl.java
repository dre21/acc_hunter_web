/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.NotificationUsers;


/**
 * ServiceImpl object for domain model class NotificationUsers.
 *
 * @see NotificationUsers
 */
@Service("acc_hunter.NotificationUsersService")
@Validated
public class NotificationUsersServiceImpl implements NotificationUsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NotificationUsersServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.NotificationUsersDao")
    private WMGenericDao<NotificationUsers, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<NotificationUsers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers create(NotificationUsers notificationUsers) {
        LOGGER.debug("Creating a new NotificationUsers with information: {}", notificationUsers);

        NotificationUsers notificationUsersCreated = this.wmGenericDao.create(notificationUsers);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(notificationUsersCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers getById(Integer notificationusersId) {
        LOGGER.debug("Finding NotificationUsers by id: {}", notificationusersId);
        return this.wmGenericDao.findById(notificationusersId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers findById(Integer notificationusersId) {
        LOGGER.debug("Finding NotificationUsers by id: {}", notificationusersId);
        try {
            return this.wmGenericDao.findById(notificationusersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No NotificationUsers found with id: {}", notificationusersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<NotificationUsers> findByMultipleIds(List<Integer> notificationusersIds, boolean orderedReturn) {
        LOGGER.debug("Finding NotificationUsers by ids: {}", notificationusersIds);

        return this.wmGenericDao.findByMultipleIds(notificationusersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers update(NotificationUsers notificationUsers) {
        LOGGER.debug("Updating NotificationUsers with information: {}", notificationUsers);

        this.wmGenericDao.update(notificationUsers);
        this.wmGenericDao.refresh(notificationUsers);

        return notificationUsers;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers partialUpdate(Integer notificationusersId, Map<String, Object>notificationUsersPatch) {
        LOGGER.debug("Partially Updating the NotificationUsers with id: {}", notificationusersId);

        NotificationUsers notificationUsers = getById(notificationusersId);

        try {
            ObjectReader notificationUsersReader = this.objectMapper.reader().forType(NotificationUsers.class).withValueToUpdate(notificationUsers);
            notificationUsers = notificationUsersReader.readValue(this.objectMapper.writeValueAsString(notificationUsersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", notificationUsersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        notificationUsers = update(notificationUsers);

        return notificationUsers;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationUsers delete(Integer notificationusersId) {
        LOGGER.debug("Deleting NotificationUsers with id: {}", notificationusersId);
        NotificationUsers deleted = this.wmGenericDao.findById(notificationusersId);
        if (deleted == null) {
            LOGGER.debug("No NotificationUsers found with id: {}", notificationusersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), NotificationUsers.class.getSimpleName(), notificationusersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(NotificationUsers notificationUsers) {
        LOGGER.debug("Deleting NotificationUsers with {}", notificationUsers);
        this.wmGenericDao.delete(notificationUsers);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<NotificationUsers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NotificationUsers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<NotificationUsers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NotificationUsers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table NotificationUsers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table NotificationUsers to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}