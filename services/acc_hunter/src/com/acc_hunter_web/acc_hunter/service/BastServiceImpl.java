/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Bast;


/**
 * ServiceImpl object for domain model class Bast.
 *
 * @see Bast
 */
@Service("acc_hunter.BastService")
@Validated
public class BastServiceImpl implements BastService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BastServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.BastDao")
    private WMGenericDao<Bast, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Bast, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Bast create(Bast bast) {
        LOGGER.debug("Creating a new Bast with information: {}", bast);

        Bast bastCreated = this.wmGenericDao.create(bast);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(bastCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Bast getById(Integer bastId) {
        LOGGER.debug("Finding Bast by id: {}", bastId);
        return this.wmGenericDao.findById(bastId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Bast findById(Integer bastId) {
        LOGGER.debug("Finding Bast by id: {}", bastId);
        try {
            return this.wmGenericDao.findById(bastId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Bast found with id: {}", bastId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Bast> findByMultipleIds(List<Integer> bastIds, boolean orderedReturn) {
        LOGGER.debug("Finding Basts by ids: {}", bastIds);

        return this.wmGenericDao.findByMultipleIds(bastIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Bast update(Bast bast) {
        LOGGER.debug("Updating Bast with information: {}", bast);

        this.wmGenericDao.update(bast);
        this.wmGenericDao.refresh(bast);

        return bast;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Bast partialUpdate(Integer bastId, Map<String, Object>bastPatch) {
        LOGGER.debug("Partially Updating the Bast with id: {}", bastId);

        Bast bast = getById(bastId);

        try {
            ObjectReader bastReader = this.objectMapper.reader().forType(Bast.class).withValueToUpdate(bast);
            bast = bastReader.readValue(this.objectMapper.writeValueAsString(bastPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", bastPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        bast = update(bast);

        return bast;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Bast delete(Integer bastId) {
        LOGGER.debug("Deleting Bast with id: {}", bastId);
        Bast deleted = this.wmGenericDao.findById(bastId);
        if (deleted == null) {
            LOGGER.debug("No Bast found with id: {}", bastId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Bast.class.getSimpleName(), bastId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Bast bast) {
        LOGGER.debug("Deleting Bast with {}", bast);
        this.wmGenericDao.delete(bast);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Bast> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Basts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Bast> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Basts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Bast to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Bast to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}