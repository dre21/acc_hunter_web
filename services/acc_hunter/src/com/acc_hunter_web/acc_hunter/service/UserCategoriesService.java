/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserCategories;
import com.acc_hunter_web.acc_hunter.Users;

/**
 * Service object for domain model class {@link UserCategories}.
 */
public interface UserCategoriesService {

    /**
     * Creates a new UserCategories. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserCategories if any.
     *
     * @param userCategories Details of the UserCategories to be created; value cannot be null.
     * @return The newly created UserCategories.
     */
    UserCategories create(@Valid UserCategories userCategories);


	/**
     * Returns UserCategories by given id if exists.
     *
     * @param usercategoriesId The id of the UserCategories to get; value cannot be null.
     * @return UserCategories associated with the given usercategoriesId.
	 * @throws EntityNotFoundException If no UserCategories is found.
     */
    UserCategories getById(Integer usercategoriesId);

    /**
     * Find and return the UserCategories by given id if exists, returns null otherwise.
     *
     * @param usercategoriesId The id of the UserCategories to get; value cannot be null.
     * @return UserCategories associated with the given usercategoriesId.
     */
    UserCategories findById(Integer usercategoriesId);

	/**
     * Find and return the list of UserCategories by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param usercategoriesIds The id's of the UserCategories to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserCategories associated with the given usercategoriesIds.
     */
    List<UserCategories> findByMultipleIds(List<Integer> usercategoriesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserCategories. It replaces all fields of the existing UserCategories with the given userCategories.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserCategories if any.
     *
     * @param userCategories The details of the UserCategories to be updated; value cannot be null.
     * @return The updated UserCategories.
     * @throws EntityNotFoundException if no UserCategories is found with given input.
     */
    UserCategories update(@Valid UserCategories userCategories);


    /**
     * Partially updates the details of an existing UserCategories. It updates only the
     * fields of the existing UserCategories which are passed in the userCategoriesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserCategories if any.
     *
     * @param usercategoriesId The id of the UserCategories to be deleted; value cannot be null.
     * @param userCategoriesPatch The partial data of UserCategories which is supposed to be updated; value cannot be null.
     * @return The updated UserCategories.
     * @throws EntityNotFoundException if no UserCategories is found with given input.
     */
    UserCategories partialUpdate(Integer usercategoriesId, Map<String, Object> userCategoriesPatch);

    /**
     * Deletes an existing UserCategories with the given id.
     *
     * @param usercategoriesId The id of the UserCategories to be deleted; value cannot be null.
     * @return The deleted UserCategories.
     * @throws EntityNotFoundException if no UserCategories found with the given id.
     */
    UserCategories delete(Integer usercategoriesId);

    /**
     * Deletes an existing UserCategories with the given object.
     *
     * @param userCategories The instance of the UserCategories to be deleted; value cannot be null.
     */
    void delete(UserCategories userCategories);

    /**
     * Find all UserCategories matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserCategories.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserCategories> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserCategories matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserCategories.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserCategories> findAll(String query, Pageable pageable);

    /**
     * Exports all UserCategories matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserCategories matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserCategories in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserCategories.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated userses for given UserCategories id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Users instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Users> findAssociatedUserses(Integer id, Pageable pageable);

}