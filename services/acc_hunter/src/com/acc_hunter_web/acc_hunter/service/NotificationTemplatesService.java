/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.NotificationTemplates;

/**
 * Service object for domain model class {@link NotificationTemplates}.
 */
public interface NotificationTemplatesService {

    /**
     * Creates a new NotificationTemplates. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationTemplates if any.
     *
     * @param notificationTemplates Details of the NotificationTemplates to be created; value cannot be null.
     * @return The newly created NotificationTemplates.
     */
    NotificationTemplates create(@Valid NotificationTemplates notificationTemplates);


	/**
     * Returns NotificationTemplates by given id if exists.
     *
     * @param notificationtemplatesId The id of the NotificationTemplates to get; value cannot be null.
     * @return NotificationTemplates associated with the given notificationtemplatesId.
	 * @throws EntityNotFoundException If no NotificationTemplates is found.
     */
    NotificationTemplates getById(Integer notificationtemplatesId);

    /**
     * Find and return the NotificationTemplates by given id if exists, returns null otherwise.
     *
     * @param notificationtemplatesId The id of the NotificationTemplates to get; value cannot be null.
     * @return NotificationTemplates associated with the given notificationtemplatesId.
     */
    NotificationTemplates findById(Integer notificationtemplatesId);

	/**
     * Find and return the list of NotificationTemplates by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param notificationtemplatesIds The id's of the NotificationTemplates to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return NotificationTemplates associated with the given notificationtemplatesIds.
     */
    List<NotificationTemplates> findByMultipleIds(List<Integer> notificationtemplatesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing NotificationTemplates. It replaces all fields of the existing NotificationTemplates with the given notificationTemplates.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationTemplates if any.
     *
     * @param notificationTemplates The details of the NotificationTemplates to be updated; value cannot be null.
     * @return The updated NotificationTemplates.
     * @throws EntityNotFoundException if no NotificationTemplates is found with given input.
     */
    NotificationTemplates update(@Valid NotificationTemplates notificationTemplates);


    /**
     * Partially updates the details of an existing NotificationTemplates. It updates only the
     * fields of the existing NotificationTemplates which are passed in the notificationTemplatesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationTemplates if any.
     *
     * @param notificationtemplatesId The id of the NotificationTemplates to be deleted; value cannot be null.
     * @param notificationTemplatesPatch The partial data of NotificationTemplates which is supposed to be updated; value cannot be null.
     * @return The updated NotificationTemplates.
     * @throws EntityNotFoundException if no NotificationTemplates is found with given input.
     */
    NotificationTemplates partialUpdate(Integer notificationtemplatesId, Map<String, Object> notificationTemplatesPatch);

    /**
     * Deletes an existing NotificationTemplates with the given id.
     *
     * @param notificationtemplatesId The id of the NotificationTemplates to be deleted; value cannot be null.
     * @return The deleted NotificationTemplates.
     * @throws EntityNotFoundException if no NotificationTemplates found with the given id.
     */
    NotificationTemplates delete(Integer notificationtemplatesId);

    /**
     * Deletes an existing NotificationTemplates with the given object.
     *
     * @param notificationTemplates The instance of the NotificationTemplates to be deleted; value cannot be null.
     */
    void delete(NotificationTemplates notificationTemplates);

    /**
     * Find all NotificationTemplates matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationTemplates.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<NotificationTemplates> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all NotificationTemplates matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationTemplates.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotificationTemplates> findAll(String query, Pageable pageable);

    /**
     * Exports all NotificationTemplates matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all NotificationTemplates matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the NotificationTemplates in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the NotificationTemplates.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}