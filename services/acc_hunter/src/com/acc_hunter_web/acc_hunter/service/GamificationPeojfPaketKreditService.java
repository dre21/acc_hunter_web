/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfPaketKredit;

/**
 * Service object for domain model class {@link GamificationPeojfPaketKredit}.
 */
public interface GamificationPeojfPaketKreditService {

    /**
     * Creates a new GamificationPeojfPaketKredit. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationPeojfPaketKredit if any.
     *
     * @param gamificationPeojfPaketKredit Details of the GamificationPeojfPaketKredit to be created; value cannot be null.
     * @return The newly created GamificationPeojfPaketKredit.
     */
    GamificationPeojfPaketKredit create(@Valid GamificationPeojfPaketKredit gamificationPeojfPaketKredit);


	/**
     * Returns GamificationPeojfPaketKredit by given id if exists.
     *
     * @param gamificationpeojfpaketkreditId The id of the GamificationPeojfPaketKredit to get; value cannot be null.
     * @return GamificationPeojfPaketKredit associated with the given gamificationpeojfpaketkreditId.
	 * @throws EntityNotFoundException If no GamificationPeojfPaketKredit is found.
     */
    GamificationPeojfPaketKredit getById(Integer gamificationpeojfpaketkreditId);

    /**
     * Find and return the GamificationPeojfPaketKredit by given id if exists, returns null otherwise.
     *
     * @param gamificationpeojfpaketkreditId The id of the GamificationPeojfPaketKredit to get; value cannot be null.
     * @return GamificationPeojfPaketKredit associated with the given gamificationpeojfpaketkreditId.
     */
    GamificationPeojfPaketKredit findById(Integer gamificationpeojfpaketkreditId);

	/**
     * Find and return the list of GamificationPeojfPaketKredits by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param gamificationpeojfpaketkreditIds The id's of the GamificationPeojfPaketKredit to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return GamificationPeojfPaketKredits associated with the given gamificationpeojfpaketkreditIds.
     */
    List<GamificationPeojfPaketKredit> findByMultipleIds(List<Integer> gamificationpeojfpaketkreditIds, boolean orderedReturn);


    /**
     * Updates the details of an existing GamificationPeojfPaketKredit. It replaces all fields of the existing GamificationPeojfPaketKredit with the given gamificationPeojfPaketKredit.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationPeojfPaketKredit if any.
     *
     * @param gamificationPeojfPaketKredit The details of the GamificationPeojfPaketKredit to be updated; value cannot be null.
     * @return The updated GamificationPeojfPaketKredit.
     * @throws EntityNotFoundException if no GamificationPeojfPaketKredit is found with given input.
     */
    GamificationPeojfPaketKredit update(@Valid GamificationPeojfPaketKredit gamificationPeojfPaketKredit);


    /**
     * Partially updates the details of an existing GamificationPeojfPaketKredit. It updates only the
     * fields of the existing GamificationPeojfPaketKredit which are passed in the gamificationPeojfPaketKreditPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationPeojfPaketKredit if any.
     *
     * @param gamificationpeojfpaketkreditId The id of the GamificationPeojfPaketKredit to be deleted; value cannot be null.
     * @param gamificationPeojfPaketKreditPatch The partial data of GamificationPeojfPaketKredit which is supposed to be updated; value cannot be null.
     * @return The updated GamificationPeojfPaketKredit.
     * @throws EntityNotFoundException if no GamificationPeojfPaketKredit is found with given input.
     */
    GamificationPeojfPaketKredit partialUpdate(Integer gamificationpeojfpaketkreditId, Map<String, Object> gamificationPeojfPaketKreditPatch);

    /**
     * Deletes an existing GamificationPeojfPaketKredit with the given id.
     *
     * @param gamificationpeojfpaketkreditId The id of the GamificationPeojfPaketKredit to be deleted; value cannot be null.
     * @return The deleted GamificationPeojfPaketKredit.
     * @throws EntityNotFoundException if no GamificationPeojfPaketKredit found with the given id.
     */
    GamificationPeojfPaketKredit delete(Integer gamificationpeojfpaketkreditId);

    /**
     * Deletes an existing GamificationPeojfPaketKredit with the given object.
     *
     * @param gamificationPeojfPaketKredit The instance of the GamificationPeojfPaketKredit to be deleted; value cannot be null.
     */
    void delete(GamificationPeojfPaketKredit gamificationPeojfPaketKredit);

    /**
     * Find all GamificationPeojfPaketKredits matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GamificationPeojfPaketKredits.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<GamificationPeojfPaketKredit> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all GamificationPeojfPaketKredits matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GamificationPeojfPaketKredits.
     *
     * @see Pageable
     * @see Page
     */
    Page<GamificationPeojfPaketKredit> findAll(String query, Pageable pageable);

    /**
     * Exports all GamificationPeojfPaketKredits matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all GamificationPeojfPaketKredits matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the GamificationPeojfPaketKredits in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the GamificationPeojfPaketKredit.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}