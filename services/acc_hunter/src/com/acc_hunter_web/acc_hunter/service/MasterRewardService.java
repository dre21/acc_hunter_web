/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.MasterReward;
import com.acc_hunter_web.acc_hunter.RewardConfig;

/**
 * Service object for domain model class {@link MasterReward}.
 */
public interface MasterRewardService {

    /**
     * Creates a new MasterReward. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MasterReward if any.
     *
     * @param masterReward Details of the MasterReward to be created; value cannot be null.
     * @return The newly created MasterReward.
     */
    MasterReward create(@Valid MasterReward masterReward);


	/**
     * Returns MasterReward by given id if exists.
     *
     * @param masterrewardId The id of the MasterReward to get; value cannot be null.
     * @return MasterReward associated with the given masterrewardId.
	 * @throws EntityNotFoundException If no MasterReward is found.
     */
    MasterReward getById(Integer masterrewardId);

    /**
     * Find and return the MasterReward by given id if exists, returns null otherwise.
     *
     * @param masterrewardId The id of the MasterReward to get; value cannot be null.
     * @return MasterReward associated with the given masterrewardId.
     */
    MasterReward findById(Integer masterrewardId);

	/**
     * Find and return the list of MasterRewards by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param masterrewardIds The id's of the MasterReward to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return MasterRewards associated with the given masterrewardIds.
     */
    List<MasterReward> findByMultipleIds(List<Integer> masterrewardIds, boolean orderedReturn);


    /**
     * Updates the details of an existing MasterReward. It replaces all fields of the existing MasterReward with the given masterReward.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MasterReward if any.
     *
     * @param masterReward The details of the MasterReward to be updated; value cannot be null.
     * @return The updated MasterReward.
     * @throws EntityNotFoundException if no MasterReward is found with given input.
     */
    MasterReward update(@Valid MasterReward masterReward);


    /**
     * Partially updates the details of an existing MasterReward. It updates only the
     * fields of the existing MasterReward which are passed in the masterRewardPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on MasterReward if any.
     *
     * @param masterrewardId The id of the MasterReward to be deleted; value cannot be null.
     * @param masterRewardPatch The partial data of MasterReward which is supposed to be updated; value cannot be null.
     * @return The updated MasterReward.
     * @throws EntityNotFoundException if no MasterReward is found with given input.
     */
    MasterReward partialUpdate(Integer masterrewardId, Map<String, Object> masterRewardPatch);

    /**
     * Deletes an existing MasterReward with the given id.
     *
     * @param masterrewardId The id of the MasterReward to be deleted; value cannot be null.
     * @return The deleted MasterReward.
     * @throws EntityNotFoundException if no MasterReward found with the given id.
     */
    MasterReward delete(Integer masterrewardId);

    /**
     * Deletes an existing MasterReward with the given object.
     *
     * @param masterReward The instance of the MasterReward to be deleted; value cannot be null.
     */
    void delete(MasterReward masterReward);

    /**
     * Find all MasterRewards matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MasterRewards.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<MasterReward> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all MasterRewards matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching MasterRewards.
     *
     * @see Pageable
     * @see Page
     */
    Page<MasterReward> findAll(String query, Pageable pageable);

    /**
     * Exports all MasterRewards matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all MasterRewards matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the MasterRewards in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the MasterReward.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated rewardConfigs for given MasterReward id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated RewardConfig instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<RewardConfig> findAssociatedRewardConfigs(Integer id, Pageable pageable);

}