/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfPaketKredit;


/**
 * ServiceImpl object for domain model class GamificationPeojfPaketKredit.
 *
 * @see GamificationPeojfPaketKredit
 */
@Service("acc_hunter.GamificationPeojfPaketKreditService")
@Validated
public class GamificationPeojfPaketKreditServiceImpl implements GamificationPeojfPaketKreditService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfPaketKreditServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfPaketKreditDao")
    private WMGenericDao<GamificationPeojfPaketKredit, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfPaketKredit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit create(GamificationPeojfPaketKredit gamificationPeojfPaketKredit) {
        LOGGER.debug("Creating a new GamificationPeojfPaketKredit with information: {}", gamificationPeojfPaketKredit);

        GamificationPeojfPaketKredit gamificationPeojfPaketKreditCreated = this.wmGenericDao.create(gamificationPeojfPaketKredit);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfPaketKreditCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit getById(Integer gamificationpeojfpaketkreditId) {
        LOGGER.debug("Finding GamificationPeojfPaketKredit by id: {}", gamificationpeojfpaketkreditId);
        return this.wmGenericDao.findById(gamificationpeojfpaketkreditId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit findById(Integer gamificationpeojfpaketkreditId) {
        LOGGER.debug("Finding GamificationPeojfPaketKredit by id: {}", gamificationpeojfpaketkreditId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfpaketkreditId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfPaketKredit found with id: {}", gamificationpeojfpaketkreditId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfPaketKredit> findByMultipleIds(List<Integer> gamificationpeojfpaketkreditIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfPaketKredits by ids: {}", gamificationpeojfpaketkreditIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfpaketkreditIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit update(GamificationPeojfPaketKredit gamificationPeojfPaketKredit) {
        LOGGER.debug("Updating GamificationPeojfPaketKredit with information: {}", gamificationPeojfPaketKredit);

        this.wmGenericDao.update(gamificationPeojfPaketKredit);
        this.wmGenericDao.refresh(gamificationPeojfPaketKredit);

        return gamificationPeojfPaketKredit;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit partialUpdate(Integer gamificationpeojfpaketkreditId, Map<String, Object>gamificationPeojfPaketKreditPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfPaketKredit with id: {}", gamificationpeojfpaketkreditId);

        GamificationPeojfPaketKredit gamificationPeojfPaketKredit = getById(gamificationpeojfpaketkreditId);

        try {
            ObjectReader gamificationPeojfPaketKreditReader = this.objectMapper.reader().forType(GamificationPeojfPaketKredit.class).withValueToUpdate(gamificationPeojfPaketKredit);
            gamificationPeojfPaketKredit = gamificationPeojfPaketKreditReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfPaketKreditPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfPaketKreditPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfPaketKredit = update(gamificationPeojfPaketKredit);

        return gamificationPeojfPaketKredit;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfPaketKredit delete(Integer gamificationpeojfpaketkreditId) {
        LOGGER.debug("Deleting GamificationPeojfPaketKredit with id: {}", gamificationpeojfpaketkreditId);
        GamificationPeojfPaketKredit deleted = this.wmGenericDao.findById(gamificationpeojfpaketkreditId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfPaketKredit found with id: {}", gamificationpeojfpaketkreditId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfPaketKredit.class.getSimpleName(), gamificationpeojfpaketkreditId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfPaketKredit gamificationPeojfPaketKredit) {
        LOGGER.debug("Deleting GamificationPeojfPaketKredit with {}", gamificationPeojfPaketKredit);
        this.wmGenericDao.delete(gamificationPeojfPaketKredit);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfPaketKredit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfPaketKredits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfPaketKredit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfPaketKredits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfPaketKredit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfPaketKredit to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}