/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserBankInfo;

/**
 * Service object for domain model class {@link UserBankInfo}.
 */
public interface UserBankInfoService {

    /**
     * Creates a new UserBankInfo. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserBankInfo if any.
     *
     * @param userBankInfo Details of the UserBankInfo to be created; value cannot be null.
     * @return The newly created UserBankInfo.
     */
    UserBankInfo create(@Valid UserBankInfo userBankInfo);


	/**
     * Returns UserBankInfo by given id if exists.
     *
     * @param userbankinfoId The id of the UserBankInfo to get; value cannot be null.
     * @return UserBankInfo associated with the given userbankinfoId.
	 * @throws EntityNotFoundException If no UserBankInfo is found.
     */
    UserBankInfo getById(Integer userbankinfoId);

    /**
     * Find and return the UserBankInfo by given id if exists, returns null otherwise.
     *
     * @param userbankinfoId The id of the UserBankInfo to get; value cannot be null.
     * @return UserBankInfo associated with the given userbankinfoId.
     */
    UserBankInfo findById(Integer userbankinfoId);

	/**
     * Find and return the list of UserBankInfos by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userbankinfoIds The id's of the UserBankInfo to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserBankInfos associated with the given userbankinfoIds.
     */
    List<UserBankInfo> findByMultipleIds(List<Integer> userbankinfoIds, boolean orderedReturn);

    /**
     * Find and return the UserBankInfo for given userId  if exists.
     *
     * @param userId value of userId; value cannot be null.
     * @return UserBankInfo associated with the given inputs.
     * @throws EntityNotFoundException if no matching UserBankInfo found.
     */
    UserBankInfo getByUserId(Integer userId);

    /**
     * Updates the details of an existing UserBankInfo. It replaces all fields of the existing UserBankInfo with the given userBankInfo.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserBankInfo if any.
     *
     * @param userBankInfo The details of the UserBankInfo to be updated; value cannot be null.
     * @return The updated UserBankInfo.
     * @throws EntityNotFoundException if no UserBankInfo is found with given input.
     */
    UserBankInfo update(@Valid UserBankInfo userBankInfo);


    /**
     * Partially updates the details of an existing UserBankInfo. It updates only the
     * fields of the existing UserBankInfo which are passed in the userBankInfoPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserBankInfo if any.
     *
     * @param userbankinfoId The id of the UserBankInfo to be deleted; value cannot be null.
     * @param userBankInfoPatch The partial data of UserBankInfo which is supposed to be updated; value cannot be null.
     * @return The updated UserBankInfo.
     * @throws EntityNotFoundException if no UserBankInfo is found with given input.
     */
    UserBankInfo partialUpdate(Integer userbankinfoId, Map<String, Object> userBankInfoPatch);

    /**
     * Deletes an existing UserBankInfo with the given id.
     *
     * @param userbankinfoId The id of the UserBankInfo to be deleted; value cannot be null.
     * @return The deleted UserBankInfo.
     * @throws EntityNotFoundException if no UserBankInfo found with the given id.
     */
    UserBankInfo delete(Integer userbankinfoId);

    /**
     * Deletes an existing UserBankInfo with the given object.
     *
     * @param userBankInfo The instance of the UserBankInfo to be deleted; value cannot be null.
     */
    void delete(UserBankInfo userBankInfo);

    /**
     * Find all UserBankInfos matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserBankInfos.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserBankInfo> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserBankInfos matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserBankInfos.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserBankInfo> findAll(String query, Pageable pageable);

    /**
     * Exports all UserBankInfos matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserBankInfos matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserBankInfos in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserBankInfo.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}