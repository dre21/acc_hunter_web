/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfJenisSk;


/**
 * ServiceImpl object for domain model class GamificationPeojfJenisSk.
 *
 * @see GamificationPeojfJenisSk
 */
@Service("acc_hunter.GamificationPeojfJenisSkService")
@Validated
public class GamificationPeojfJenisSkServiceImpl implements GamificationPeojfJenisSkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfJenisSkServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfJenisSkDao")
    private WMGenericDao<GamificationPeojfJenisSk, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfJenisSk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk create(GamificationPeojfJenisSk gamificationPeojfJenisSk) {
        LOGGER.debug("Creating a new GamificationPeojfJenisSk with information: {}", gamificationPeojfJenisSk);

        GamificationPeojfJenisSk gamificationPeojfJenisSkCreated = this.wmGenericDao.create(gamificationPeojfJenisSk);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfJenisSkCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk getById(Integer gamificationpeojfjenisskId) {
        LOGGER.debug("Finding GamificationPeojfJenisSk by id: {}", gamificationpeojfjenisskId);
        return this.wmGenericDao.findById(gamificationpeojfjenisskId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk findById(Integer gamificationpeojfjenisskId) {
        LOGGER.debug("Finding GamificationPeojfJenisSk by id: {}", gamificationpeojfjenisskId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfjenisskId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfJenisSk found with id: {}", gamificationpeojfjenisskId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfJenisSk> findByMultipleIds(List<Integer> gamificationpeojfjenisskIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfJenisSks by ids: {}", gamificationpeojfjenisskIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfjenisskIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk update(GamificationPeojfJenisSk gamificationPeojfJenisSk) {
        LOGGER.debug("Updating GamificationPeojfJenisSk with information: {}", gamificationPeojfJenisSk);

        this.wmGenericDao.update(gamificationPeojfJenisSk);
        this.wmGenericDao.refresh(gamificationPeojfJenisSk);

        return gamificationPeojfJenisSk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk partialUpdate(Integer gamificationpeojfjenisskId, Map<String, Object>gamificationPeojfJenisSkPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfJenisSk with id: {}", gamificationpeojfjenisskId);

        GamificationPeojfJenisSk gamificationPeojfJenisSk = getById(gamificationpeojfjenisskId);

        try {
            ObjectReader gamificationPeojfJenisSkReader = this.objectMapper.reader().forType(GamificationPeojfJenisSk.class).withValueToUpdate(gamificationPeojfJenisSk);
            gamificationPeojfJenisSk = gamificationPeojfJenisSkReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfJenisSkPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfJenisSkPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfJenisSk = update(gamificationPeojfJenisSk);

        return gamificationPeojfJenisSk;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfJenisSk delete(Integer gamificationpeojfjenisskId) {
        LOGGER.debug("Deleting GamificationPeojfJenisSk with id: {}", gamificationpeojfjenisskId);
        GamificationPeojfJenisSk deleted = this.wmGenericDao.findById(gamificationpeojfjenisskId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfJenisSk found with id: {}", gamificationpeojfjenisskId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfJenisSk.class.getSimpleName(), gamificationpeojfjenisskId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfJenisSk gamificationPeojfJenisSk) {
        LOGGER.debug("Deleting GamificationPeojfJenisSk with {}", gamificationPeojfJenisSk);
        this.wmGenericDao.delete(gamificationPeojfJenisSk);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfJenisSk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfJenisSks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfJenisSk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfJenisSks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfJenisSk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfJenisSk to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}