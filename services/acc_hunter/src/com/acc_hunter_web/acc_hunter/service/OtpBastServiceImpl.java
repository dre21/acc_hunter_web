/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.OtpBast;


/**
 * ServiceImpl object for domain model class OtpBast.
 *
 * @see OtpBast
 */
@Service("acc_hunter.OtpBastService")
@Validated
public class OtpBastServiceImpl implements OtpBastService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtpBastServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.OtpBastDao")
    private WMGenericDao<OtpBast, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<OtpBast, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public OtpBast create(OtpBast otpBast) {
        LOGGER.debug("Creating a new OtpBast with information: {}", otpBast);

        OtpBast otpBastCreated = this.wmGenericDao.create(otpBast);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(otpBastCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public OtpBast getById(Integer otpbastId) {
        LOGGER.debug("Finding OtpBast by id: {}", otpbastId);
        return this.wmGenericDao.findById(otpbastId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public OtpBast findById(Integer otpbastId) {
        LOGGER.debug("Finding OtpBast by id: {}", otpbastId);
        try {
            return this.wmGenericDao.findById(otpbastId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OtpBast found with id: {}", otpbastId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<OtpBast> findByMultipleIds(List<Integer> otpbastIds, boolean orderedReturn) {
        LOGGER.debug("Finding OtpBasts by ids: {}", otpbastIds);

        return this.wmGenericDao.findByMultipleIds(otpbastIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public OtpBast update(OtpBast otpBast) {
        LOGGER.debug("Updating OtpBast with information: {}", otpBast);

        this.wmGenericDao.update(otpBast);
        this.wmGenericDao.refresh(otpBast);

        return otpBast;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public OtpBast partialUpdate(Integer otpbastId, Map<String, Object>otpBastPatch) {
        LOGGER.debug("Partially Updating the OtpBast with id: {}", otpbastId);

        OtpBast otpBast = getById(otpbastId);

        try {
            ObjectReader otpBastReader = this.objectMapper.reader().forType(OtpBast.class).withValueToUpdate(otpBast);
            otpBast = otpBastReader.readValue(this.objectMapper.writeValueAsString(otpBastPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", otpBastPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        otpBast = update(otpBast);

        return otpBast;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public OtpBast delete(Integer otpbastId) {
        LOGGER.debug("Deleting OtpBast with id: {}", otpbastId);
        OtpBast deleted = this.wmGenericDao.findById(otpbastId);
        if (deleted == null) {
            LOGGER.debug("No OtpBast found with id: {}", otpbastId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), OtpBast.class.getSimpleName(), otpbastId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(OtpBast otpBast) {
        LOGGER.debug("Deleting OtpBast with {}", otpBast);
        this.wmGenericDao.delete(otpBast);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<OtpBast> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OtpBasts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<OtpBast> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OtpBasts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table OtpBast to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table OtpBast to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}