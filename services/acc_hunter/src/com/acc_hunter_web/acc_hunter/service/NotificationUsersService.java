/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.NotificationUsers;

/**
 * Service object for domain model class {@link NotificationUsers}.
 */
public interface NotificationUsersService {

    /**
     * Creates a new NotificationUsers. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationUsers if any.
     *
     * @param notificationUsers Details of the NotificationUsers to be created; value cannot be null.
     * @return The newly created NotificationUsers.
     */
    NotificationUsers create(@Valid NotificationUsers notificationUsers);


	/**
     * Returns NotificationUsers by given id if exists.
     *
     * @param notificationusersId The id of the NotificationUsers to get; value cannot be null.
     * @return NotificationUsers associated with the given notificationusersId.
	 * @throws EntityNotFoundException If no NotificationUsers is found.
     */
    NotificationUsers getById(Integer notificationusersId);

    /**
     * Find and return the NotificationUsers by given id if exists, returns null otherwise.
     *
     * @param notificationusersId The id of the NotificationUsers to get; value cannot be null.
     * @return NotificationUsers associated with the given notificationusersId.
     */
    NotificationUsers findById(Integer notificationusersId);

	/**
     * Find and return the list of NotificationUsers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param notificationusersIds The id's of the NotificationUsers to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return NotificationUsers associated with the given notificationusersIds.
     */
    List<NotificationUsers> findByMultipleIds(List<Integer> notificationusersIds, boolean orderedReturn);


    /**
     * Updates the details of an existing NotificationUsers. It replaces all fields of the existing NotificationUsers with the given notificationUsers.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationUsers if any.
     *
     * @param notificationUsers The details of the NotificationUsers to be updated; value cannot be null.
     * @return The updated NotificationUsers.
     * @throws EntityNotFoundException if no NotificationUsers is found with given input.
     */
    NotificationUsers update(@Valid NotificationUsers notificationUsers);


    /**
     * Partially updates the details of an existing NotificationUsers. It updates only the
     * fields of the existing NotificationUsers which are passed in the notificationUsersPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on NotificationUsers if any.
     *
     * @param notificationusersId The id of the NotificationUsers to be deleted; value cannot be null.
     * @param notificationUsersPatch The partial data of NotificationUsers which is supposed to be updated; value cannot be null.
     * @return The updated NotificationUsers.
     * @throws EntityNotFoundException if no NotificationUsers is found with given input.
     */
    NotificationUsers partialUpdate(Integer notificationusersId, Map<String, Object> notificationUsersPatch);

    /**
     * Deletes an existing NotificationUsers with the given id.
     *
     * @param notificationusersId The id of the NotificationUsers to be deleted; value cannot be null.
     * @return The deleted NotificationUsers.
     * @throws EntityNotFoundException if no NotificationUsers found with the given id.
     */
    NotificationUsers delete(Integer notificationusersId);

    /**
     * Deletes an existing NotificationUsers with the given object.
     *
     * @param notificationUsers The instance of the NotificationUsers to be deleted; value cannot be null.
     */
    void delete(NotificationUsers notificationUsers);

    /**
     * Find all NotificationUsers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationUsers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<NotificationUsers> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all NotificationUsers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching NotificationUsers.
     *
     * @see Pageable
     * @see Page
     */
    Page<NotificationUsers> findAll(String query, Pageable pageable);

    /**
     * Exports all NotificationUsers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all NotificationUsers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the NotificationUsers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the NotificationUsers.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}