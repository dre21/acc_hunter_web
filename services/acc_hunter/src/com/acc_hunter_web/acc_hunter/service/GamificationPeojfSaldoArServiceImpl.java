/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationPeojfSaldoAr;


/**
 * ServiceImpl object for domain model class GamificationPeojfSaldoAr.
 *
 * @see GamificationPeojfSaldoAr
 */
@Service("acc_hunter.GamificationPeojfSaldoArService")
@Validated
public class GamificationPeojfSaldoArServiceImpl implements GamificationPeojfSaldoArService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfSaldoArServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationPeojfSaldoArDao")
    private WMGenericDao<GamificationPeojfSaldoAr, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationPeojfSaldoAr, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr create(GamificationPeojfSaldoAr gamificationPeojfSaldoAr) {
        LOGGER.debug("Creating a new GamificationPeojfSaldoAr with information: {}", gamificationPeojfSaldoAr);

        GamificationPeojfSaldoAr gamificationPeojfSaldoArCreated = this.wmGenericDao.create(gamificationPeojfSaldoAr);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationPeojfSaldoArCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr getById(Integer gamificationpeojfsaldoarId) {
        LOGGER.debug("Finding GamificationPeojfSaldoAr by id: {}", gamificationpeojfsaldoarId);
        return this.wmGenericDao.findById(gamificationpeojfsaldoarId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr findById(Integer gamificationpeojfsaldoarId) {
        LOGGER.debug("Finding GamificationPeojfSaldoAr by id: {}", gamificationpeojfsaldoarId);
        try {
            return this.wmGenericDao.findById(gamificationpeojfsaldoarId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationPeojfSaldoAr found with id: {}", gamificationpeojfsaldoarId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationPeojfSaldoAr> findByMultipleIds(List<Integer> gamificationpeojfsaldoarIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationPeojfSaldoArs by ids: {}", gamificationpeojfsaldoarIds);

        return this.wmGenericDao.findByMultipleIds(gamificationpeojfsaldoarIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr update(GamificationPeojfSaldoAr gamificationPeojfSaldoAr) {
        LOGGER.debug("Updating GamificationPeojfSaldoAr with information: {}", gamificationPeojfSaldoAr);

        this.wmGenericDao.update(gamificationPeojfSaldoAr);
        this.wmGenericDao.refresh(gamificationPeojfSaldoAr);

        return gamificationPeojfSaldoAr;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr partialUpdate(Integer gamificationpeojfsaldoarId, Map<String, Object>gamificationPeojfSaldoArPatch) {
        LOGGER.debug("Partially Updating the GamificationPeojfSaldoAr with id: {}", gamificationpeojfsaldoarId);

        GamificationPeojfSaldoAr gamificationPeojfSaldoAr = getById(gamificationpeojfsaldoarId);

        try {
            ObjectReader gamificationPeojfSaldoArReader = this.objectMapper.reader().forType(GamificationPeojfSaldoAr.class).withValueToUpdate(gamificationPeojfSaldoAr);
            gamificationPeojfSaldoAr = gamificationPeojfSaldoArReader.readValue(this.objectMapper.writeValueAsString(gamificationPeojfSaldoArPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationPeojfSaldoArPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationPeojfSaldoAr = update(gamificationPeojfSaldoAr);

        return gamificationPeojfSaldoAr;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationPeojfSaldoAr delete(Integer gamificationpeojfsaldoarId) {
        LOGGER.debug("Deleting GamificationPeojfSaldoAr with id: {}", gamificationpeojfsaldoarId);
        GamificationPeojfSaldoAr deleted = this.wmGenericDao.findById(gamificationpeojfsaldoarId);
        if (deleted == null) {
            LOGGER.debug("No GamificationPeojfSaldoAr found with id: {}", gamificationpeojfsaldoarId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationPeojfSaldoAr.class.getSimpleName(), gamificationpeojfsaldoarId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationPeojfSaldoAr gamificationPeojfSaldoAr) {
        LOGGER.debug("Deleting GamificationPeojfSaldoAr with {}", gamificationPeojfSaldoAr);
        this.wmGenericDao.delete(gamificationPeojfSaldoAr);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfSaldoAr> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfSaldoArs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationPeojfSaldoAr> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationPeojfSaldoArs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfSaldoAr to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationPeojfSaldoAr to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}