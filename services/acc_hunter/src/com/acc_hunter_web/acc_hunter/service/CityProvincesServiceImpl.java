/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.CityProvinces;


/**
 * ServiceImpl object for domain model class CityProvinces.
 *
 * @see CityProvinces
 */
@Service("acc_hunter.CityProvincesService")
@Validated
public class CityProvincesServiceImpl implements CityProvincesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CityProvincesServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.CityProvincesDao")
    private WMGenericDao<CityProvinces, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<CityProvinces, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces create(CityProvinces cityProvinces) {
        LOGGER.debug("Creating a new CityProvinces with information: {}", cityProvinces);

        CityProvinces cityProvincesCreated = this.wmGenericDao.create(cityProvinces);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cityProvincesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces getById(Integer cityprovincesId) {
        LOGGER.debug("Finding CityProvinces by id: {}", cityprovincesId);
        return this.wmGenericDao.findById(cityprovincesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces findById(Integer cityprovincesId) {
        LOGGER.debug("Finding CityProvinces by id: {}", cityprovincesId);
        try {
            return this.wmGenericDao.findById(cityprovincesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CityProvinces found with id: {}", cityprovincesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<CityProvinces> findByMultipleIds(List<Integer> cityprovincesIds, boolean orderedReturn) {
        LOGGER.debug("Finding CityProvinces by ids: {}", cityprovincesIds);

        return this.wmGenericDao.findByMultipleIds(cityprovincesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces update(CityProvinces cityProvinces) {
        LOGGER.debug("Updating CityProvinces with information: {}", cityProvinces);

        this.wmGenericDao.update(cityProvinces);
        this.wmGenericDao.refresh(cityProvinces);

        return cityProvinces;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces partialUpdate(Integer cityprovincesId, Map<String, Object>cityProvincesPatch) {
        LOGGER.debug("Partially Updating the CityProvinces with id: {}", cityprovincesId);

        CityProvinces cityProvinces = getById(cityprovincesId);

        try {
            ObjectReader cityProvincesReader = this.objectMapper.reader().forType(CityProvinces.class).withValueToUpdate(cityProvinces);
            cityProvinces = cityProvincesReader.readValue(this.objectMapper.writeValueAsString(cityProvincesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", cityProvincesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        cityProvinces = update(cityProvinces);

        return cityProvinces;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public CityProvinces delete(Integer cityprovincesId) {
        LOGGER.debug("Deleting CityProvinces with id: {}", cityprovincesId);
        CityProvinces deleted = this.wmGenericDao.findById(cityprovincesId);
        if (deleted == null) {
            LOGGER.debug("No CityProvinces found with id: {}", cityprovincesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), CityProvinces.class.getSimpleName(), cityprovincesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(CityProvinces cityProvinces) {
        LOGGER.debug("Deleting CityProvinces with {}", cityProvinces);
        this.wmGenericDao.delete(cityProvinces);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<CityProvinces> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CityProvinces");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<CityProvinces> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CityProvinces");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table CityProvinces to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table CityProvinces to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}