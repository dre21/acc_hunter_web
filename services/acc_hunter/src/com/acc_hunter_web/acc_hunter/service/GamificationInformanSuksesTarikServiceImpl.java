/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationInformanSuksesTarik;


/**
 * ServiceImpl object for domain model class GamificationInformanSuksesTarik.
 *
 * @see GamificationInformanSuksesTarik
 */
@Service("acc_hunter.GamificationInformanSuksesTarikService")
@Validated
public class GamificationInformanSuksesTarikServiceImpl implements GamificationInformanSuksesTarikService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationInformanSuksesTarikServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.GamificationInformanSuksesTarikDao")
    private WMGenericDao<GamificationInformanSuksesTarik, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<GamificationInformanSuksesTarik, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik create(GamificationInformanSuksesTarik gamificationInformanSuksesTarik) {
        LOGGER.debug("Creating a new GamificationInformanSuksesTarik with information: {}", gamificationInformanSuksesTarik);

        GamificationInformanSuksesTarik gamificationInformanSuksesTarikCreated = this.wmGenericDao.create(gamificationInformanSuksesTarik);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(gamificationInformanSuksesTarikCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik getById(Integer gamificationinformansuksestarikId) {
        LOGGER.debug("Finding GamificationInformanSuksesTarik by id: {}", gamificationinformansuksestarikId);
        return this.wmGenericDao.findById(gamificationinformansuksestarikId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik findById(Integer gamificationinformansuksestarikId) {
        LOGGER.debug("Finding GamificationInformanSuksesTarik by id: {}", gamificationinformansuksestarikId);
        try {
            return this.wmGenericDao.findById(gamificationinformansuksestarikId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No GamificationInformanSuksesTarik found with id: {}", gamificationinformansuksestarikId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<GamificationInformanSuksesTarik> findByMultipleIds(List<Integer> gamificationinformansuksestarikIds, boolean orderedReturn) {
        LOGGER.debug("Finding GamificationInformanSuksesTariks by ids: {}", gamificationinformansuksestarikIds);

        return this.wmGenericDao.findByMultipleIds(gamificationinformansuksestarikIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik update(GamificationInformanSuksesTarik gamificationInformanSuksesTarik) {
        LOGGER.debug("Updating GamificationInformanSuksesTarik with information: {}", gamificationInformanSuksesTarik);

        this.wmGenericDao.update(gamificationInformanSuksesTarik);
        this.wmGenericDao.refresh(gamificationInformanSuksesTarik);

        return gamificationInformanSuksesTarik;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik partialUpdate(Integer gamificationinformansuksestarikId, Map<String, Object>gamificationInformanSuksesTarikPatch) {
        LOGGER.debug("Partially Updating the GamificationInformanSuksesTarik with id: {}", gamificationinformansuksestarikId);

        GamificationInformanSuksesTarik gamificationInformanSuksesTarik = getById(gamificationinformansuksestarikId);

        try {
            ObjectReader gamificationInformanSuksesTarikReader = this.objectMapper.reader().forType(GamificationInformanSuksesTarik.class).withValueToUpdate(gamificationInformanSuksesTarik);
            gamificationInformanSuksesTarik = gamificationInformanSuksesTarikReader.readValue(this.objectMapper.writeValueAsString(gamificationInformanSuksesTarikPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", gamificationInformanSuksesTarikPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        gamificationInformanSuksesTarik = update(gamificationInformanSuksesTarik);

        return gamificationInformanSuksesTarik;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public GamificationInformanSuksesTarik delete(Integer gamificationinformansuksestarikId) {
        LOGGER.debug("Deleting GamificationInformanSuksesTarik with id: {}", gamificationinformansuksestarikId);
        GamificationInformanSuksesTarik deleted = this.wmGenericDao.findById(gamificationinformansuksestarikId);
        if (deleted == null) {
            LOGGER.debug("No GamificationInformanSuksesTarik found with id: {}", gamificationinformansuksestarikId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), GamificationInformanSuksesTarik.class.getSimpleName(), gamificationinformansuksestarikId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(GamificationInformanSuksesTarik gamificationInformanSuksesTarik) {
        LOGGER.debug("Deleting GamificationInformanSuksesTarik with {}", gamificationInformanSuksesTarik);
        this.wmGenericDao.delete(gamificationInformanSuksesTarik);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationInformanSuksesTarik> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all GamificationInformanSuksesTariks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<GamificationInformanSuksesTarik> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all GamificationInformanSuksesTariks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationInformanSuksesTarik to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table GamificationInformanSuksesTarik to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}