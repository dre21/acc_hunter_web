/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.acc_hunter_web.acc_hunter.models.query.*;

@Service
public class Acc_hunterQueryExecutorServiceImpl implements Acc_hunterQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Acc_hunterQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("acc_hunterWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetAllUsersRemoResponse> executeGetAllUsersRemo(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllUsersRemo", params, GetAllUsersRemoResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllUsersRemo(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllUsersRemoResponse> queryInput = new QueryProcedureInput<>("getAllUsersRemo", params, GetAllUsersRemoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetLelangSkaktifResponse> executeGetLelangSKAktif(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getLelangSKAktif", params, GetLelangSkaktifResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetLelangSKAktif(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetLelangSkaktifResponse> queryInput = new QueryProcedureInput<>("getLelangSKAktif", params, GetLelangSkaktifResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetSubmittedInfoDetailResponse> executeGetSubmittedInfoDetail(BigInteger id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQuery("getSubmittedInfoDetail", params, GetSubmittedInfoDetailResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetSubmittedInfoDetail(BigInteger id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        QueryProcedureInput<GetSubmittedInfoDetailResponse> queryInput = new QueryProcedureInput<>("getSubmittedInfoDetail", params, GetSubmittedInfoDetailResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetUserIdByEmailResponse> executeGetUserIdByEmail(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("getUserIdByEmail", params, GetUserIdByEmailResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetUserIdByEmail(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput<GetUserIdByEmailResponse> queryInput = new QueryProcedureInput<>("getUserIdByEmail", params, GetUserIdByEmailResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetUserAuthResponse> executeGetUserAuth(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("getUserAuth", params, GetUserAuthResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetUserAuth(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput<GetUserAuthResponse> queryInput = new QueryProcedureInput<>("getUserAuth", params, GetUserAuthResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Integer executeUpdatePasswordQuery(UpdatePasswordQueryRequest updatePasswordQueryRequest) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pwd", updatePasswordQueryRequest.getPwd());
        params.put("email", updatePasswordQueryRequest.getEmail());

        return queryExecutor.executeNamedQueryForUpdate("updatePasswordQuery", params);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetAllUsersPoolResponse> executeGetAllUsersPool(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllUsersPool", params, GetAllUsersPoolResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllUsersPool(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllUsersPoolResponse> queryInput = new QueryProcedureInput<>("getAllUsersPool", params, GetAllUsersPoolResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetLelangSktidakAktifResponse> executeGetLelangSKTidakAktif(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getLelangSKTidakAktif", params, GetLelangSktidakAktifResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetLelangSKTidakAktif(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetLelangSktidakAktifResponse> queryInput = new QueryProcedureInput<>("getLelangSKTidakAktif", params, GetLelangSktidakAktifResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetAllSknewResponse> executeGetAllSKNew(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllSKNew", params, GetAllSknewResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllSKNew(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllSknewResponse> queryInput = new QueryProcedureInput<>("getAllSKNew", params, GetAllSknewResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetDetailLaporanByAgreementNoResponse> executeGetDetailLaporanByAgreementNo(String agreementNo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("agreement_no", agreementNo);

        return queryExecutor.executeNamedQuery("getDetailLaporanByAgreementNo", params, GetDetailLaporanByAgreementNoResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetDetailLaporanByAgreementNo(String agreementNo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("agreement_no", agreementNo);

        QueryProcedureInput<GetDetailLaporanByAgreementNoResponse> queryInput = new QueryProcedureInput<>("getDetailLaporanByAgreementNo", params, GetDetailLaporanByAgreementNoResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetAllUsersMitraResponse> executeGetAllUsersMitra(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllUsersMitra", params, GetAllUsersMitraResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllUsersMitra(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllUsersMitraResponse> queryInput = new QueryProcedureInput<>("getAllUsersMitra", params, GetAllUsersMitraResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetSkrequestDetailResponse> executeGetSKRequestDetail(Integer skRequestId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sk_request_id", skRequestId);

        return queryExecutor.executeNamedQuery("getSKRequestDetail", params, GetSkrequestDetailResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetSKRequestDetail(Integer skRequestId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("sk_request_id", skRequestId);

        QueryProcedureInput<GetSkrequestDetailResponse> queryInput = new QueryProcedureInput<>("getSKRequestDetail", params, GetSkrequestDetailResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetAllUsersInformantResponse> executeGetAllUsersInformant(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("getAllUsersInformant", params, GetAllUsersInformantResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetAllUsersInformant(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput<GetAllUsersInformantResponse> queryInput = new QueryProcedureInput<>("getAllUsersInformant", params, GetAllUsersInformantResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetLelangSkdetailByRemoIdResponse> executeGetLelangSKDetailByRemoId(Integer remoId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("remo_id", remoId);

        return queryExecutor.executeNamedQuery("getLelangSKDetailByRemoId", params, GetLelangSkdetailByRemoIdResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetLelangSKDetailByRemoId(Integer remoId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("remo_id", remoId);

        QueryProcedureInput<GetLelangSkdetailByRemoIdResponse> queryInput = new QueryProcedureInput<>("getLelangSKDetailByRemoId", params, GetLelangSkdetailByRemoIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetReportImagesByIdResponse> executeGetReportImagesById(BigInteger id, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        return queryExecutor.executeNamedQuery("getReportImagesById", params, GetReportImagesByIdResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetReportImagesById(BigInteger id, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("id", id);

        QueryProcedureInput<GetReportImagesByIdResponse> queryInput = new QueryProcedureInput<>("getReportImagesById", params, GetReportImagesByIdResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetUserByEmailQueryResponse> executeGetUserByEmailQuery(String email, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        return queryExecutor.executeNamedQuery("getUserByEmailQuery", params, GetUserByEmailQueryResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetUserByEmailQuery(String email, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("email", email);

        QueryProcedureInput<GetUserByEmailQueryResponse> queryInput = new QueryProcedureInput<>("getUserByEmailQuery", params, GetUserByEmailQueryResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<ViewLelangSkaktifResponse> executeViewLelangSKAktif(String agreementNo, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("agreement_no", agreementNo);

        return queryExecutor.executeNamedQuery("viewLelangSKAktif", params, ViewLelangSkaktifResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportViewLelangSKAktif(String agreementNo, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("agreement_no", agreementNo);

        QueryProcedureInput<ViewLelangSkaktifResponse> queryInput = new QueryProcedureInput<>("viewLelangSKAktif", params, ViewLelangSkaktifResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetCityByProvinceResponse> executeGetCItyByProvince(String provinceName, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("province_name", provinceName);

        return queryExecutor.executeNamedQuery("getCItyByProvince", params, GetCityByProvinceResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetCItyByProvince(String provinceName, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("province_name", provinceName);

        QueryProcedureInput<GetCityByProvinceResponse> queryInput = new QueryProcedureInput<>("getCItyByProvince", params, GetCityByProvinceResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "acc_hunterTransactionManager", readOnly = true)
    @Override
    public Page<GetPesertaLelangDataResponse> executeGetPesertaLelangData(Integer lelangSkDetailId, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("lelang_sk_detail_id", lelangSkDetailId);

        return queryExecutor.executeNamedQuery("getPesertaLelangData", params, GetPesertaLelangDataResponse.class, pageable);
    }

    @Transactional(value = "acc_hunterTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportGetPesertaLelangData(Integer lelangSkDetailId, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("lelang_sk_detail_id", lelangSkDetailId);

        QueryProcedureInput<GetPesertaLelangDataResponse> queryInput = new QueryProcedureInput<>("getPesertaLelangData", params, GetPesertaLelangDataResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}