/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Reports;
import com.acc_hunter_web.acc_hunter.Sayembara;
import com.acc_hunter_web.acc_hunter.Vehicles;


/**
 * ServiceImpl object for domain model class Vehicles.
 *
 * @see Vehicles
 */
@Service("acc_hunter.VehiclesService")
@Validated
public class VehiclesServiceImpl implements VehiclesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VehiclesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.ReportsService")
    private ReportsService reportsService;

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.SayembaraService")
    private SayembaraService sayembaraService;

    @Autowired
    @Qualifier("acc_hunter.VehiclesDao")
    private WMGenericDao<Vehicles, String> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Vehicles, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Vehicles create(Vehicles vehicles) {
        LOGGER.debug("Creating a new Vehicles with information: {}", vehicles);

        Vehicles vehiclesCreated = this.wmGenericDao.create(vehicles);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(vehiclesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Vehicles getById(String vehiclesId) {
        LOGGER.debug("Finding Vehicles by id: {}", vehiclesId);
        return this.wmGenericDao.findById(vehiclesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Vehicles findById(String vehiclesId) {
        LOGGER.debug("Finding Vehicles by id: {}", vehiclesId);
        try {
            return this.wmGenericDao.findById(vehiclesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Vehicles found with id: {}", vehiclesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Vehicles> findByMultipleIds(List<String> vehiclesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Vehicles by ids: {}", vehiclesIds);

        return this.wmGenericDao.findByMultipleIds(vehiclesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Vehicles update(Vehicles vehicles) {
        LOGGER.debug("Updating Vehicles with information: {}", vehicles);

        this.wmGenericDao.update(vehicles);
        this.wmGenericDao.refresh(vehicles);

        return vehicles;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Vehicles partialUpdate(String vehiclesId, Map<String, Object>vehiclesPatch) {
        LOGGER.debug("Partially Updating the Vehicles with id: {}", vehiclesId);

        Vehicles vehicles = getById(vehiclesId);

        try {
            ObjectReader vehiclesReader = this.objectMapper.reader().forType(Vehicles.class).withValueToUpdate(vehicles);
            vehicles = vehiclesReader.readValue(this.objectMapper.writeValueAsString(vehiclesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", vehiclesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        vehicles = update(vehicles);

        return vehicles;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Vehicles delete(String vehiclesId) {
        LOGGER.debug("Deleting Vehicles with id: {}", vehiclesId);
        Vehicles deleted = this.wmGenericDao.findById(vehiclesId);
        if (deleted == null) {
            LOGGER.debug("No Vehicles found with id: {}", vehiclesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Vehicles.class.getSimpleName(), vehiclesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Vehicles vehicles) {
        LOGGER.debug("Deleting Vehicles with {}", vehicles);
        this.wmGenericDao.delete(vehicles);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Vehicles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vehicles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Vehicles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vehicles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Vehicles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Vehicles to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Sayembara> findAssociatedSayembaras(String noAggr, Pageable pageable) {
        LOGGER.debug("Fetching all associated sayembaras");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vehicles.noAggr = '" + noAggr + "'");

        return sayembaraService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Reports> findAssociatedReportses(String noAggr, Pageable pageable) {
        LOGGER.debug("Fetching all associated reportses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vehicles.noAggr = '" + noAggr + "'");

        return reportsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ReportsService instance
     */
    protected void setReportsService(ReportsService service) {
        this.reportsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SayembaraService instance
     */
    protected void setSayembaraService(SayembaraService service) {
        this.sayembaraService = service;
    }

}