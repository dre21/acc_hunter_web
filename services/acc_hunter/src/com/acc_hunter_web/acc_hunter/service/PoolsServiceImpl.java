/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Pools;


/**
 * ServiceImpl object for domain model class Pools.
 *
 * @see Pools
 */
@Service("acc_hunter.PoolsService")
@Validated
public class PoolsServiceImpl implements PoolsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PoolsServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.PoolsDao")
    private WMGenericDao<Pools, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Pools, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Pools create(Pools pools) {
        LOGGER.debug("Creating a new Pools with information: {}", pools);

        Pools poolsCreated = this.wmGenericDao.create(pools);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(poolsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Pools getById(Integer poolsId) {
        LOGGER.debug("Finding Pools by id: {}", poolsId);
        return this.wmGenericDao.findById(poolsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Pools findById(Integer poolsId) {
        LOGGER.debug("Finding Pools by id: {}", poolsId);
        try {
            return this.wmGenericDao.findById(poolsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Pools found with id: {}", poolsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<Pools> findByMultipleIds(List<Integer> poolsIds, boolean orderedReturn) {
        LOGGER.debug("Finding Pools by ids: {}", poolsIds);

        return this.wmGenericDao.findByMultipleIds(poolsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public Pools update(Pools pools) {
        LOGGER.debug("Updating Pools with information: {}", pools);

        this.wmGenericDao.update(pools);
        this.wmGenericDao.refresh(pools);

        return pools;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Pools partialUpdate(Integer poolsId, Map<String, Object>poolsPatch) {
        LOGGER.debug("Partially Updating the Pools with id: {}", poolsId);

        Pools pools = getById(poolsId);

        try {
            ObjectReader poolsReader = this.objectMapper.reader().forType(Pools.class).withValueToUpdate(pools);
            pools = poolsReader.readValue(this.objectMapper.writeValueAsString(poolsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", poolsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        pools = update(pools);

        return pools;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public Pools delete(Integer poolsId) {
        LOGGER.debug("Deleting Pools with id: {}", poolsId);
        Pools deleted = this.wmGenericDao.findById(poolsId);
        if (deleted == null) {
            LOGGER.debug("No Pools found with id: {}", poolsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Pools.class.getSimpleName(), poolsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(Pools pools) {
        LOGGER.debug("Deleting Pools with {}", pools);
        this.wmGenericDao.delete(pools);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Pools> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Pools");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Pools> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Pools");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table Pools to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table Pools to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}