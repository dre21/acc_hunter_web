/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.NotificationTemplates;


/**
 * ServiceImpl object for domain model class NotificationTemplates.
 *
 * @see NotificationTemplates
 */
@Service("acc_hunter.NotificationTemplatesService")
@Validated
public class NotificationTemplatesServiceImpl implements NotificationTemplatesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NotificationTemplatesServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.NotificationTemplatesDao")
    private WMGenericDao<NotificationTemplates, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<NotificationTemplates, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates create(NotificationTemplates notificationTemplates) {
        LOGGER.debug("Creating a new NotificationTemplates with information: {}", notificationTemplates);

        NotificationTemplates notificationTemplatesCreated = this.wmGenericDao.create(notificationTemplates);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(notificationTemplatesCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates getById(Integer notificationtemplatesId) {
        LOGGER.debug("Finding NotificationTemplates by id: {}", notificationtemplatesId);
        return this.wmGenericDao.findById(notificationtemplatesId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates findById(Integer notificationtemplatesId) {
        LOGGER.debug("Finding NotificationTemplates by id: {}", notificationtemplatesId);
        try {
            return this.wmGenericDao.findById(notificationtemplatesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No NotificationTemplates found with id: {}", notificationtemplatesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<NotificationTemplates> findByMultipleIds(List<Integer> notificationtemplatesIds, boolean orderedReturn) {
        LOGGER.debug("Finding NotificationTemplates by ids: {}", notificationtemplatesIds);

        return this.wmGenericDao.findByMultipleIds(notificationtemplatesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates update(NotificationTemplates notificationTemplates) {
        LOGGER.debug("Updating NotificationTemplates with information: {}", notificationTemplates);

        this.wmGenericDao.update(notificationTemplates);
        this.wmGenericDao.refresh(notificationTemplates);

        return notificationTemplates;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates partialUpdate(Integer notificationtemplatesId, Map<String, Object>notificationTemplatesPatch) {
        LOGGER.debug("Partially Updating the NotificationTemplates with id: {}", notificationtemplatesId);

        NotificationTemplates notificationTemplates = getById(notificationtemplatesId);

        try {
            ObjectReader notificationTemplatesReader = this.objectMapper.reader().forType(NotificationTemplates.class).withValueToUpdate(notificationTemplates);
            notificationTemplates = notificationTemplatesReader.readValue(this.objectMapper.writeValueAsString(notificationTemplatesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", notificationTemplatesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        notificationTemplates = update(notificationTemplates);

        return notificationTemplates;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public NotificationTemplates delete(Integer notificationtemplatesId) {
        LOGGER.debug("Deleting NotificationTemplates with id: {}", notificationtemplatesId);
        NotificationTemplates deleted = this.wmGenericDao.findById(notificationtemplatesId);
        if (deleted == null) {
            LOGGER.debug("No NotificationTemplates found with id: {}", notificationtemplatesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), NotificationTemplates.class.getSimpleName(), notificationtemplatesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(NotificationTemplates notificationTemplates) {
        LOGGER.debug("Deleting NotificationTemplates with {}", notificationTemplates);
        this.wmGenericDao.delete(notificationTemplates);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<NotificationTemplates> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NotificationTemplates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<NotificationTemplates> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NotificationTemplates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table NotificationTemplates to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table NotificationTemplates to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}