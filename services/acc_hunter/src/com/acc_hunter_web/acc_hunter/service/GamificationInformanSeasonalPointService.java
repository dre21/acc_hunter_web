/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.GamificationInformanSeasonalPoint;

/**
 * Service object for domain model class {@link GamificationInformanSeasonalPoint}.
 */
public interface GamificationInformanSeasonalPointService {

    /**
     * Creates a new GamificationInformanSeasonalPoint. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationInformanSeasonalPoint if any.
     *
     * @param gamificationInformanSeasonalPoint Details of the GamificationInformanSeasonalPoint to be created; value cannot be null.
     * @return The newly created GamificationInformanSeasonalPoint.
     */
    GamificationInformanSeasonalPoint create(@Valid GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint);


	/**
     * Returns GamificationInformanSeasonalPoint by given id if exists.
     *
     * @param gamificationinformanseasonalpointId The id of the GamificationInformanSeasonalPoint to get; value cannot be null.
     * @return GamificationInformanSeasonalPoint associated with the given gamificationinformanseasonalpointId.
	 * @throws EntityNotFoundException If no GamificationInformanSeasonalPoint is found.
     */
    GamificationInformanSeasonalPoint getById(Integer gamificationinformanseasonalpointId);

    /**
     * Find and return the GamificationInformanSeasonalPoint by given id if exists, returns null otherwise.
     *
     * @param gamificationinformanseasonalpointId The id of the GamificationInformanSeasonalPoint to get; value cannot be null.
     * @return GamificationInformanSeasonalPoint associated with the given gamificationinformanseasonalpointId.
     */
    GamificationInformanSeasonalPoint findById(Integer gamificationinformanseasonalpointId);

	/**
     * Find and return the list of GamificationInformanSeasonalPoints by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param gamificationinformanseasonalpointIds The id's of the GamificationInformanSeasonalPoint to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return GamificationInformanSeasonalPoints associated with the given gamificationinformanseasonalpointIds.
     */
    List<GamificationInformanSeasonalPoint> findByMultipleIds(List<Integer> gamificationinformanseasonalpointIds, boolean orderedReturn);


    /**
     * Updates the details of an existing GamificationInformanSeasonalPoint. It replaces all fields of the existing GamificationInformanSeasonalPoint with the given gamificationInformanSeasonalPoint.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationInformanSeasonalPoint if any.
     *
     * @param gamificationInformanSeasonalPoint The details of the GamificationInformanSeasonalPoint to be updated; value cannot be null.
     * @return The updated GamificationInformanSeasonalPoint.
     * @throws EntityNotFoundException if no GamificationInformanSeasonalPoint is found with given input.
     */
    GamificationInformanSeasonalPoint update(@Valid GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint);


    /**
     * Partially updates the details of an existing GamificationInformanSeasonalPoint. It updates only the
     * fields of the existing GamificationInformanSeasonalPoint which are passed in the gamificationInformanSeasonalPointPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on GamificationInformanSeasonalPoint if any.
     *
     * @param gamificationinformanseasonalpointId The id of the GamificationInformanSeasonalPoint to be deleted; value cannot be null.
     * @param gamificationInformanSeasonalPointPatch The partial data of GamificationInformanSeasonalPoint which is supposed to be updated; value cannot be null.
     * @return The updated GamificationInformanSeasonalPoint.
     * @throws EntityNotFoundException if no GamificationInformanSeasonalPoint is found with given input.
     */
    GamificationInformanSeasonalPoint partialUpdate(Integer gamificationinformanseasonalpointId, Map<String, Object> gamificationInformanSeasonalPointPatch);

    /**
     * Deletes an existing GamificationInformanSeasonalPoint with the given id.
     *
     * @param gamificationinformanseasonalpointId The id of the GamificationInformanSeasonalPoint to be deleted; value cannot be null.
     * @return The deleted GamificationInformanSeasonalPoint.
     * @throws EntityNotFoundException if no GamificationInformanSeasonalPoint found with the given id.
     */
    GamificationInformanSeasonalPoint delete(Integer gamificationinformanseasonalpointId);

    /**
     * Deletes an existing GamificationInformanSeasonalPoint with the given object.
     *
     * @param gamificationInformanSeasonalPoint The instance of the GamificationInformanSeasonalPoint to be deleted; value cannot be null.
     */
    void delete(GamificationInformanSeasonalPoint gamificationInformanSeasonalPoint);

    /**
     * Find all GamificationInformanSeasonalPoints matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GamificationInformanSeasonalPoints.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<GamificationInformanSeasonalPoint> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all GamificationInformanSeasonalPoints matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching GamificationInformanSeasonalPoints.
     *
     * @see Pageable
     * @see Page
     */
    Page<GamificationInformanSeasonalPoint> findAll(String query, Pageable pageable);

    /**
     * Exports all GamificationInformanSeasonalPoints matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all GamificationInformanSeasonalPoints matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the GamificationInformanSeasonalPoints in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the GamificationInformanSeasonalPoint.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}