/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.Banks;

/**
 * Service object for domain model class {@link Banks}.
 */
public interface BanksService {

    /**
     * Creates a new Banks. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Banks if any.
     *
     * @param banks Details of the Banks to be created; value cannot be null.
     * @return The newly created Banks.
     */
    Banks create(@Valid Banks banks);


	/**
     * Returns Banks by given id if exists.
     *
     * @param banksId The id of the Banks to get; value cannot be null.
     * @return Banks associated with the given banksId.
	 * @throws EntityNotFoundException If no Banks is found.
     */
    Banks getById(Integer banksId);

    /**
     * Find and return the Banks by given id if exists, returns null otherwise.
     *
     * @param banksId The id of the Banks to get; value cannot be null.
     * @return Banks associated with the given banksId.
     */
    Banks findById(Integer banksId);

	/**
     * Find and return the list of Banks by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param banksIds The id's of the Banks to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Banks associated with the given banksIds.
     */
    List<Banks> findByMultipleIds(List<Integer> banksIds, boolean orderedReturn);

    /**
     * Find and return the Banks for given name  if exists.
     *
     * @param name value of name; value cannot be null.
     * @return Banks associated with the given inputs.
     * @throws EntityNotFoundException if no matching Banks found.
     */
    Banks getByName(String name);

    /**
     * Updates the details of an existing Banks. It replaces all fields of the existing Banks with the given banks.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Banks if any.
     *
     * @param banks The details of the Banks to be updated; value cannot be null.
     * @return The updated Banks.
     * @throws EntityNotFoundException if no Banks is found with given input.
     */
    Banks update(@Valid Banks banks);


    /**
     * Partially updates the details of an existing Banks. It updates only the
     * fields of the existing Banks which are passed in the banksPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Banks if any.
     *
     * @param banksId The id of the Banks to be deleted; value cannot be null.
     * @param banksPatch The partial data of Banks which is supposed to be updated; value cannot be null.
     * @return The updated Banks.
     * @throws EntityNotFoundException if no Banks is found with given input.
     */
    Banks partialUpdate(Integer banksId, Map<String, Object> banksPatch);

    /**
     * Deletes an existing Banks with the given id.
     *
     * @param banksId The id of the Banks to be deleted; value cannot be null.
     * @return The deleted Banks.
     * @throws EntityNotFoundException if no Banks found with the given id.
     */
    Banks delete(Integer banksId);

    /**
     * Deletes an existing Banks with the given object.
     *
     * @param banks The instance of the Banks to be deleted; value cannot be null.
     */
    void delete(Banks banks);

    /**
     * Find all Banks matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Banks.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Banks> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Banks matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Banks.
     *
     * @see Pageable
     * @see Page
     */
    Page<Banks> findAll(String query, Pageable pageable);

    /**
     * Exports all Banks matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Banks matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Banks in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Banks.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}