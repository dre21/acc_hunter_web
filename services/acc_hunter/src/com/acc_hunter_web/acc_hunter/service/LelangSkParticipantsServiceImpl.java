/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.LelangSkParticipants;


/**
 * ServiceImpl object for domain model class LelangSkParticipants.
 *
 * @see LelangSkParticipants
 */
@Service("acc_hunter.LelangSkParticipantsService")
@Validated
public class LelangSkParticipantsServiceImpl implements LelangSkParticipantsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkParticipantsServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.LelangSkParticipantsDao")
    private WMGenericDao<LelangSkParticipants, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LelangSkParticipants, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants create(LelangSkParticipants lelangSkParticipants) {
        LOGGER.debug("Creating a new LelangSkParticipants with information: {}", lelangSkParticipants);

        LelangSkParticipants lelangSkParticipantsCreated = this.wmGenericDao.create(lelangSkParticipants);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(lelangSkParticipantsCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants getById(Integer lelangskparticipantsId) {
        LOGGER.debug("Finding LelangSkParticipants by id: {}", lelangskparticipantsId);
        return this.wmGenericDao.findById(lelangskparticipantsId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants findById(Integer lelangskparticipantsId) {
        LOGGER.debug("Finding LelangSkParticipants by id: {}", lelangskparticipantsId);
        try {
            return this.wmGenericDao.findById(lelangskparticipantsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LelangSkParticipants found with id: {}", lelangskparticipantsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<LelangSkParticipants> findByMultipleIds(List<Integer> lelangskparticipantsIds, boolean orderedReturn) {
        LOGGER.debug("Finding LelangSkParticipants by ids: {}", lelangskparticipantsIds);

        return this.wmGenericDao.findByMultipleIds(lelangskparticipantsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants update(LelangSkParticipants lelangSkParticipants) {
        LOGGER.debug("Updating LelangSkParticipants with information: {}", lelangSkParticipants);

        this.wmGenericDao.update(lelangSkParticipants);
        this.wmGenericDao.refresh(lelangSkParticipants);

        return lelangSkParticipants;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants partialUpdate(Integer lelangskparticipantsId, Map<String, Object>lelangSkParticipantsPatch) {
        LOGGER.debug("Partially Updating the LelangSkParticipants with id: {}", lelangskparticipantsId);

        LelangSkParticipants lelangSkParticipants = getById(lelangskparticipantsId);

        try {
            ObjectReader lelangSkParticipantsReader = this.objectMapper.reader().forType(LelangSkParticipants.class).withValueToUpdate(lelangSkParticipants);
            lelangSkParticipants = lelangSkParticipantsReader.readValue(this.objectMapper.writeValueAsString(lelangSkParticipantsPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", lelangSkParticipantsPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        lelangSkParticipants = update(lelangSkParticipants);

        return lelangSkParticipants;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public LelangSkParticipants delete(Integer lelangskparticipantsId) {
        LOGGER.debug("Deleting LelangSkParticipants with id: {}", lelangskparticipantsId);
        LelangSkParticipants deleted = this.wmGenericDao.findById(lelangskparticipantsId);
        if (deleted == null) {
            LOGGER.debug("No LelangSkParticipants found with id: {}", lelangskparticipantsId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LelangSkParticipants.class.getSimpleName(), lelangskparticipantsId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(LelangSkParticipants lelangSkParticipants) {
        LOGGER.debug("Deleting LelangSkParticipants with {}", lelangSkParticipants);
        this.wmGenericDao.delete(lelangSkParticipants);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkParticipants> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LelangSkParticipants");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<LelangSkParticipants> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LelangSkParticipants");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSkParticipants to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table LelangSkParticipants to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}