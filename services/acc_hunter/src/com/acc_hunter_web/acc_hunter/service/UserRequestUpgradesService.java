/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserRequestUpgrades;

/**
 * Service object for domain model class {@link UserRequestUpgrades}.
 */
public interface UserRequestUpgradesService {

    /**
     * Creates a new UserRequestUpgrades. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRequestUpgrades if any.
     *
     * @param userRequestUpgrades Details of the UserRequestUpgrades to be created; value cannot be null.
     * @return The newly created UserRequestUpgrades.
     */
    UserRequestUpgrades create(@Valid UserRequestUpgrades userRequestUpgrades);


	/**
     * Returns UserRequestUpgrades by given id if exists.
     *
     * @param userrequestupgradesId The id of the UserRequestUpgrades to get; value cannot be null.
     * @return UserRequestUpgrades associated with the given userrequestupgradesId.
	 * @throws EntityNotFoundException If no UserRequestUpgrades is found.
     */
    UserRequestUpgrades getById(Integer userrequestupgradesId);

    /**
     * Find and return the UserRequestUpgrades by given id if exists, returns null otherwise.
     *
     * @param userrequestupgradesId The id of the UserRequestUpgrades to get; value cannot be null.
     * @return UserRequestUpgrades associated with the given userrequestupgradesId.
     */
    UserRequestUpgrades findById(Integer userrequestupgradesId);

	/**
     * Find and return the list of UserRequestUpgrades by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param userrequestupgradesIds The id's of the UserRequestUpgrades to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return UserRequestUpgrades associated with the given userrequestupgradesIds.
     */
    List<UserRequestUpgrades> findByMultipleIds(List<Integer> userrequestupgradesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing UserRequestUpgrades. It replaces all fields of the existing UserRequestUpgrades with the given userRequestUpgrades.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRequestUpgrades if any.
     *
     * @param userRequestUpgrades The details of the UserRequestUpgrades to be updated; value cannot be null.
     * @return The updated UserRequestUpgrades.
     * @throws EntityNotFoundException if no UserRequestUpgrades is found with given input.
     */
    UserRequestUpgrades update(@Valid UserRequestUpgrades userRequestUpgrades);


    /**
     * Partially updates the details of an existing UserRequestUpgrades. It updates only the
     * fields of the existing UserRequestUpgrades which are passed in the userRequestUpgradesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on UserRequestUpgrades if any.
     *
     * @param userrequestupgradesId The id of the UserRequestUpgrades to be deleted; value cannot be null.
     * @param userRequestUpgradesPatch The partial data of UserRequestUpgrades which is supposed to be updated; value cannot be null.
     * @return The updated UserRequestUpgrades.
     * @throws EntityNotFoundException if no UserRequestUpgrades is found with given input.
     */
    UserRequestUpgrades partialUpdate(Integer userrequestupgradesId, Map<String, Object> userRequestUpgradesPatch);

    /**
     * Deletes an existing UserRequestUpgrades with the given id.
     *
     * @param userrequestupgradesId The id of the UserRequestUpgrades to be deleted; value cannot be null.
     * @return The deleted UserRequestUpgrades.
     * @throws EntityNotFoundException if no UserRequestUpgrades found with the given id.
     */
    UserRequestUpgrades delete(Integer userrequestupgradesId);

    /**
     * Deletes an existing UserRequestUpgrades with the given object.
     *
     * @param userRequestUpgrades The instance of the UserRequestUpgrades to be deleted; value cannot be null.
     */
    void delete(UserRequestUpgrades userRequestUpgrades);

    /**
     * Find all UserRequestUpgrades matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRequestUpgrades.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<UserRequestUpgrades> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all UserRequestUpgrades matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching UserRequestUpgrades.
     *
     * @see Pageable
     * @see Page
     */
    Page<UserRequestUpgrades> findAll(String query, Pageable pageable);

    /**
     * Exports all UserRequestUpgrades matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all UserRequestUpgrades matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the UserRequestUpgrades in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the UserRequestUpgrades.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}