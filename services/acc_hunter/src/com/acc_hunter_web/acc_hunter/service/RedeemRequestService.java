/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.RedeemRequest;

/**
 * Service object for domain model class {@link RedeemRequest}.
 */
public interface RedeemRequestService {

    /**
     * Creates a new RedeemRequest. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RedeemRequest if any.
     *
     * @param redeemRequest Details of the RedeemRequest to be created; value cannot be null.
     * @return The newly created RedeemRequest.
     */
    RedeemRequest create(@Valid RedeemRequest redeemRequest);


	/**
     * Returns RedeemRequest by given id if exists.
     *
     * @param redeemrequestId The id of the RedeemRequest to get; value cannot be null.
     * @return RedeemRequest associated with the given redeemrequestId.
	 * @throws EntityNotFoundException If no RedeemRequest is found.
     */
    RedeemRequest getById(Integer redeemrequestId);

    /**
     * Find and return the RedeemRequest by given id if exists, returns null otherwise.
     *
     * @param redeemrequestId The id of the RedeemRequest to get; value cannot be null.
     * @return RedeemRequest associated with the given redeemrequestId.
     */
    RedeemRequest findById(Integer redeemrequestId);

	/**
     * Find and return the list of RedeemRequests by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param redeemrequestIds The id's of the RedeemRequest to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return RedeemRequests associated with the given redeemrequestIds.
     */
    List<RedeemRequest> findByMultipleIds(List<Integer> redeemrequestIds, boolean orderedReturn);


    /**
     * Updates the details of an existing RedeemRequest. It replaces all fields of the existing RedeemRequest with the given redeemRequest.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RedeemRequest if any.
     *
     * @param redeemRequest The details of the RedeemRequest to be updated; value cannot be null.
     * @return The updated RedeemRequest.
     * @throws EntityNotFoundException if no RedeemRequest is found with given input.
     */
    RedeemRequest update(@Valid RedeemRequest redeemRequest);


    /**
     * Partially updates the details of an existing RedeemRequest. It updates only the
     * fields of the existing RedeemRequest which are passed in the redeemRequestPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on RedeemRequest if any.
     *
     * @param redeemrequestId The id of the RedeemRequest to be deleted; value cannot be null.
     * @param redeemRequestPatch The partial data of RedeemRequest which is supposed to be updated; value cannot be null.
     * @return The updated RedeemRequest.
     * @throws EntityNotFoundException if no RedeemRequest is found with given input.
     */
    RedeemRequest partialUpdate(Integer redeemrequestId, Map<String, Object> redeemRequestPatch);

    /**
     * Deletes an existing RedeemRequest with the given id.
     *
     * @param redeemrequestId The id of the RedeemRequest to be deleted; value cannot be null.
     * @return The deleted RedeemRequest.
     * @throws EntityNotFoundException if no RedeemRequest found with the given id.
     */
    RedeemRequest delete(Integer redeemrequestId);

    /**
     * Deletes an existing RedeemRequest with the given object.
     *
     * @param redeemRequest The instance of the RedeemRequest to be deleted; value cannot be null.
     */
    void delete(RedeemRequest redeemRequest);

    /**
     * Find all RedeemRequests matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RedeemRequests.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<RedeemRequest> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all RedeemRequests matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching RedeemRequests.
     *
     * @see Pageable
     * @see Page
     */
    Page<RedeemRequest> findAll(String query, Pageable pageable);

    /**
     * Exports all RedeemRequests matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all RedeemRequests matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the RedeemRequests in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the RedeemRequest.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}