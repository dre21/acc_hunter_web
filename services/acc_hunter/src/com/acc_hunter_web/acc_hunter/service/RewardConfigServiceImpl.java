/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.RedeemRequest;
import com.acc_hunter_web.acc_hunter.RewardConfig;


/**
 * ServiceImpl object for domain model class RewardConfig.
 *
 * @see RewardConfig
 */
@Service("acc_hunter.RewardConfigService")
@Validated
public class RewardConfigServiceImpl implements RewardConfigService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RewardConfigServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("acc_hunter.RedeemRequestService")
    private RedeemRequestService redeemRequestService;

    @Autowired
    @Qualifier("acc_hunter.RewardConfigDao")
    private WMGenericDao<RewardConfig, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<RewardConfig, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig create(RewardConfig rewardConfig) {
        LOGGER.debug("Creating a new RewardConfig with information: {}", rewardConfig);

        RewardConfig rewardConfigCreated = this.wmGenericDao.create(rewardConfig);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(rewardConfigCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig getById(Integer rewardconfigId) {
        LOGGER.debug("Finding RewardConfig by id: {}", rewardconfigId);
        return this.wmGenericDao.findById(rewardconfigId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig findById(Integer rewardconfigId) {
        LOGGER.debug("Finding RewardConfig by id: {}", rewardconfigId);
        try {
            return this.wmGenericDao.findById(rewardconfigId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No RewardConfig found with id: {}", rewardconfigId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<RewardConfig> findByMultipleIds(List<Integer> rewardconfigIds, boolean orderedReturn) {
        LOGGER.debug("Finding RewardConfigs by ids: {}", rewardconfigIds);

        return this.wmGenericDao.findByMultipleIds(rewardconfigIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig update(RewardConfig rewardConfig) {
        LOGGER.debug("Updating RewardConfig with information: {}", rewardConfig);

        this.wmGenericDao.update(rewardConfig);
        this.wmGenericDao.refresh(rewardConfig);

        return rewardConfig;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig partialUpdate(Integer rewardconfigId, Map<String, Object>rewardConfigPatch) {
        LOGGER.debug("Partially Updating the RewardConfig with id: {}", rewardconfigId);

        RewardConfig rewardConfig = getById(rewardconfigId);

        try {
            ObjectReader rewardConfigReader = this.objectMapper.reader().forType(RewardConfig.class).withValueToUpdate(rewardConfig);
            rewardConfig = rewardConfigReader.readValue(this.objectMapper.writeValueAsString(rewardConfigPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", rewardConfigPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        rewardConfig = update(rewardConfig);

        return rewardConfig;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public RewardConfig delete(Integer rewardconfigId) {
        LOGGER.debug("Deleting RewardConfig with id: {}", rewardconfigId);
        RewardConfig deleted = this.wmGenericDao.findById(rewardconfigId);
        if (deleted == null) {
            LOGGER.debug("No RewardConfig found with id: {}", rewardconfigId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), RewardConfig.class.getSimpleName(), rewardconfigId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(RewardConfig rewardConfig) {
        LOGGER.debug("Deleting RewardConfig with {}", rewardConfig);
        this.wmGenericDao.delete(rewardConfig);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RewardConfig> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all RewardConfigs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RewardConfig> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all RewardConfigs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table RewardConfig to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table RewardConfig to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<RedeemRequest> findAssociatedRedeemRequests(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated redeemRequests");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("rewardConfig.id = '" + id + "'");

        return redeemRequestService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service RedeemRequestService instance
     */
    protected void setRedeemRequestService(RedeemRequestService service) {
        this.redeemRequestService = service;
    }

}