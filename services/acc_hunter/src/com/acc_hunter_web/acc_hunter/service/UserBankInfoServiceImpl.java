/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.acc_hunter_web.acc_hunter.UserBankInfo;


/**
 * ServiceImpl object for domain model class UserBankInfo.
 *
 * @see UserBankInfo
 */
@Service("acc_hunter.UserBankInfoService")
@Validated
public class UserBankInfoServiceImpl implements UserBankInfoService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserBankInfoServiceImpl.class);


    @Autowired
    @Qualifier("acc_hunter.UserBankInfoDao")
    private WMGenericDao<UserBankInfo, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<UserBankInfo, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo create(UserBankInfo userBankInfo) {
        LOGGER.debug("Creating a new UserBankInfo with information: {}", userBankInfo);

        UserBankInfo userBankInfoCreated = this.wmGenericDao.create(userBankInfo);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userBankInfoCreated);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo getById(Integer userbankinfoId) {
        LOGGER.debug("Finding UserBankInfo by id: {}", userbankinfoId);
        return this.wmGenericDao.findById(userbankinfoId);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo findById(Integer userbankinfoId) {
        LOGGER.debug("Finding UserBankInfo by id: {}", userbankinfoId);
        try {
            return this.wmGenericDao.findById(userbankinfoId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserBankInfo found with id: {}", userbankinfoId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public List<UserBankInfo> findByMultipleIds(List<Integer> userbankinfoIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserBankInfos by ids: {}", userbankinfoIds);

        return this.wmGenericDao.findByMultipleIds(userbankinfoIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo getByUserId(Integer userId) {
        Map<String, Object> userIdMap = new HashMap<>();
        userIdMap.put("userId", userId);

        LOGGER.debug("Finding UserBankInfo by unique keys: {}", userIdMap);
        return this.wmGenericDao.findByUniqueKey(userIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo update(UserBankInfo userBankInfo) {
        LOGGER.debug("Updating UserBankInfo with information: {}", userBankInfo);

        this.wmGenericDao.update(userBankInfo);
        this.wmGenericDao.refresh(userBankInfo);

        return userBankInfo;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo partialUpdate(Integer userbankinfoId, Map<String, Object>userBankInfoPatch) {
        LOGGER.debug("Partially Updating the UserBankInfo with id: {}", userbankinfoId);

        UserBankInfo userBankInfo = getById(userbankinfoId);

        try {
            ObjectReader userBankInfoReader = this.objectMapper.reader().forType(UserBankInfo.class).withValueToUpdate(userBankInfo);
            userBankInfo = userBankInfoReader.readValue(this.objectMapper.writeValueAsString(userBankInfoPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", userBankInfoPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        userBankInfo = update(userBankInfo);

        return userBankInfo;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public UserBankInfo delete(Integer userbankinfoId) {
        LOGGER.debug("Deleting UserBankInfo with id: {}", userbankinfoId);
        UserBankInfo deleted = this.wmGenericDao.findById(userbankinfoId);
        if (deleted == null) {
            LOGGER.debug("No UserBankInfo found with id: {}", userbankinfoId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), UserBankInfo.class.getSimpleName(), userbankinfoId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "acc_hunterTransactionManager")
    @Override
    public void delete(UserBankInfo userBankInfo) {
        LOGGER.debug("Deleting UserBankInfo with {}", userBankInfo);
        this.wmGenericDao.delete(userBankInfo);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserBankInfo> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserBankInfos");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<UserBankInfo> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserBankInfos");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserBankInfo to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service acc_hunter for table UserBankInfo to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "acc_hunterTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}