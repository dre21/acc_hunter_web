/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * SkRequests generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`sk_requests`")
public class SkRequests implements Serializable {

    private Integer id;
    private int requestorId;
    private String aggrNo;
    private LocalDateTime createdDate;
    private Integer btoRequest;
    private boolean status;
    private Users users;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`sk_requests_id_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`requestor_id`", nullable = false, scale = 0, precision = 10)
    public int getRequestorId() {
        return this.requestorId;
    }

    public void setRequestorId(int requestorId) {
        this.requestorId = requestorId;
    }

    @Column(name = "`aggr_no`", nullable = false, length = 255)
    public String getAggrNo() {
        return this.aggrNo;
    }

    public void setAggrNo(String aggrNo) {
        this.aggrNo = aggrNo;
    }

    @Column(name = "`created_date`", nullable = true)
    public LocalDateTime getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`bto_request`", nullable = true, scale = 0, precision = 10)
    public Integer getBtoRequest() {
        return this.btoRequest;
    }

    public void setBtoRequest(Integer btoRequest) {
        this.btoRequest = btoRequest;
    }

    @Column(name = "`status`", nullable = false)
    public boolean isStatus() {
        return this.status;
    }

    public void setStatus(boolean status) {
        this.status = status;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`requestor_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_sk_requests_TO_users_ldo26`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.requestorId = users.getId();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SkRequests)) return false;
        final SkRequests skRequests = (SkRequests) o;
        return Objects.equals(getId(), skRequests.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}