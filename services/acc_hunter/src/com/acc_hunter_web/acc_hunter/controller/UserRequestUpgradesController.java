/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.UserRequestUpgrades;
import com.acc_hunter_web.acc_hunter.service.UserRequestUpgradesService;


/**
 * Controller object for domain model class UserRequestUpgrades.
 * @see UserRequestUpgrades
 */
@RestController("acc_hunter.UserRequestUpgradesController")
@Api(value = "UserRequestUpgradesController", description = "Exposes APIs to work with UserRequestUpgrades resource.")
@RequestMapping("/acc_hunter/UserRequestUpgrades")
public class UserRequestUpgradesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserRequestUpgradesController.class);

    @Autowired
	@Qualifier("acc_hunter.UserRequestUpgradesService")
	private UserRequestUpgradesService userRequestUpgradesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserRequestUpgrades instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRequestUpgrades createUserRequestUpgrades(@RequestBody UserRequestUpgrades userRequestUpgrades) {
		LOGGER.debug("Create UserRequestUpgrades with information: {}" , userRequestUpgrades);

		userRequestUpgrades = userRequestUpgradesService.create(userRequestUpgrades);
		LOGGER.debug("Created UserRequestUpgrades with information: {}" , userRequestUpgrades);

	    return userRequestUpgrades;
	}

    @ApiOperation(value = "Returns the UserRequestUpgrades instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRequestUpgrades getUserRequestUpgrades(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting UserRequestUpgrades with id: {}" , id);

        UserRequestUpgrades foundUserRequestUpgrades = userRequestUpgradesService.getById(id);
        LOGGER.debug("UserRequestUpgrades details with id: {}" , foundUserRequestUpgrades);

        return foundUserRequestUpgrades;
    }

    @ApiOperation(value = "Updates the UserRequestUpgrades instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRequestUpgrades editUserRequestUpgrades(@PathVariable("id") Integer id, @RequestBody UserRequestUpgrades userRequestUpgrades) {
        LOGGER.debug("Editing UserRequestUpgrades with id: {}" , userRequestUpgrades.getId());

        userRequestUpgrades.setId(id);
        userRequestUpgrades = userRequestUpgradesService.update(userRequestUpgrades);
        LOGGER.debug("UserRequestUpgrades details with id: {}" , userRequestUpgrades);

        return userRequestUpgrades;
    }
    
    @ApiOperation(value = "Partially updates the UserRequestUpgrades instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRequestUpgrades patchUserRequestUpgrades(@PathVariable("id") Integer id, @RequestBody @MapTo(UserRequestUpgrades.class) Map<String, Object> userRequestUpgradesPatch) {
        LOGGER.debug("Partially updating UserRequestUpgrades with id: {}" , id);

        UserRequestUpgrades userRequestUpgrades = userRequestUpgradesService.partialUpdate(id, userRequestUpgradesPatch);
        LOGGER.debug("UserRequestUpgrades details after partial update: {}" , userRequestUpgrades);

        return userRequestUpgrades;
    }

    @ApiOperation(value = "Deletes the UserRequestUpgrades instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserRequestUpgrades(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting UserRequestUpgrades with id: {}" , id);

        UserRequestUpgrades deletedUserRequestUpgrades = userRequestUpgradesService.delete(id);

        return deletedUserRequestUpgrades != null;
    }

    /**
     * @deprecated Use {@link #findUserRequestUpgrades(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserRequestUpgrades instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserRequestUpgrades> searchUserRequestUpgradesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserRequestUpgrades list by query filter:{}", (Object) queryFilters);
        return userRequestUpgradesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserRequestUpgrades instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRequestUpgrades> findUserRequestUpgrades(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserRequestUpgrades list by filter:", query);
        return userRequestUpgradesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserRequestUpgrades instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserRequestUpgrades> filterUserRequestUpgrades(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserRequestUpgrades list by filter", query);
        return userRequestUpgradesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportUserRequestUpgrades(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userRequestUpgradesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportUserRequestUpgradesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserRequestUpgrades.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userRequestUpgradesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserRequestUpgrades instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countUserRequestUpgrades( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserRequestUpgrades");
		return userRequestUpgradesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getUserRequestUpgradesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userRequestUpgradesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserRequestUpgradesService instance
	 */
	protected void setUserRequestUpgradesService(UserRequestUpgradesService service) {
		this.userRequestUpgradesService = service;
	}

}