/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.acc_hunter_web.acc_hunter.service.Acc_hunterQueryExecutorService;
import com.acc_hunter_web.acc_hunter.models.query.*;

@RestController(value = "Acc_hunter.QueryExecutionController")
@RequestMapping("/acc_hunter/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Acc_hunterQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/getAllUsersRemo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieve all users which role name is REMO HEAD")
    public Page<GetAllUsersRemoResponse> executeGetAllUsersRemo(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllUsersRemo");
        Page<GetAllUsersRemoResponse> _result = queryService.executeGetAllUsersRemo(pageable);
        LOGGER.debug("got the result for named query: getAllUsersRemo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllUsersRemo")
    @RequestMapping(value = "/queries/getAllUsersRemo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllUsersRemo(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllUsersRemo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllUsersRemo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllUsersRemo( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getLelangSKAktif", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get data for all Lelang SK which is currently active. Don't have a winner yet and the End Date is still within the date")
    public Page<GetLelangSkaktifResponse> executeGetLelangSKAktif(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getLelangSKAktif");
        Page<GetLelangSkaktifResponse> _result = queryService.executeGetLelangSKAktif(pageable);
        LOGGER.debug("got the result for named query: getLelangSKAktif, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getLelangSKAktif")
    @RequestMapping(value = "/queries/getLelangSKAktif/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetLelangSKAktif(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getLelangSKAktif");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getLelangSKAktif";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetLelangSKAktif( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getSubmittedInfoDetail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query to retrieve a detail information regarding submitted info")
    public Page<GetSubmittedInfoDetailResponse> executeGetSubmittedInfoDetail(@RequestParam(value = "id") BigInteger id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getSubmittedInfoDetail");
        Page<GetSubmittedInfoDetailResponse> _result = queryService.executeGetSubmittedInfoDetail(id, pageable);
        LOGGER.debug("got the result for named query: getSubmittedInfoDetail, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getSubmittedInfoDetail")
    @RequestMapping(value = "/queries/getSubmittedInfoDetail/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetSubmittedInfoDetail(@RequestParam(value = "id") BigInteger id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getSubmittedInfoDetail");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getSubmittedInfoDetail";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetSubmittedInfoDetail(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getUserIdByEmail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieve user id value by given email")
    public Page<GetUserIdByEmailResponse> executeGetUserIdByEmail(@RequestParam(value = "email") String email, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserIdByEmail");
        Page<GetUserIdByEmailResponse> _result = queryService.executeGetUserIdByEmail(email, pageable);
        LOGGER.debug("got the result for named query: getUserIdByEmail, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUserIdByEmail")
    @RequestMapping(value = "/queries/getUserIdByEmail/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetUserIdByEmail(@RequestParam(value = "email") String email, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserIdByEmail");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUserIdByEmail";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUserIdByEmail(email,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getUserAuth", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieve user limited only to ADMIN and REMO HEAD.")
    public Page<GetUserAuthResponse> executeGetUserAuth(@RequestParam(value = "email") String email, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserAuth");
        Page<GetUserAuthResponse> _result = queryService.executeGetUserAuth(email, pageable);
        LOGGER.debug("got the result for named query: getUserAuth, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUserAuth")
    @RequestMapping(value = "/queries/getUserAuth/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetUserAuth(@RequestParam(value = "email") String email, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserAuth");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUserAuth";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUserAuth(email,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/updatePasswordQuery", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to update password by given email")
    public IntegerWrapper executeUpdatePasswordQuery(@Valid @RequestBody UpdatePasswordQueryRequest updatePasswordQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: updatePasswordQuery");
        Integer _result = queryService.executeUpdatePasswordQuery(updatePasswordQueryRequest);
        LOGGER.debug("got the result for named query: updatePasswordQuery, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/getAllUsersPool", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This is a query to retrieve all users filtered by their role name as parameter")
    public Page<GetAllUsersPoolResponse> executeGetAllUsersPool(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllUsersPool");
        Page<GetAllUsersPoolResponse> _result = queryService.executeGetAllUsersPool(pageable);
        LOGGER.debug("got the result for named query: getAllUsersPool, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllUsersPool")
    @RequestMapping(value = "/queries/getAllUsersPool/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllUsersPool(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllUsersPool");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllUsersPool";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllUsersPool( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getLelangSKTidakAktif", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to retrieve all inactive SK which either already have a winner or the end date have expired")
    public Page<GetLelangSktidakAktifResponse> executeGetLelangSKTidakAktif(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getLelangSKTidakAktif");
        Page<GetLelangSktidakAktifResponse> _result = queryService.executeGetLelangSKTidakAktif(pageable);
        LOGGER.debug("got the result for named query: getLelangSKTidakAktif, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getLelangSKTidakAktif")
    @RequestMapping(value = "/queries/getLelangSKTidakAktif/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetLelangSKTidakAktif(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getLelangSKTidakAktif");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getLelangSKTidakAktif";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetLelangSKTidakAktif( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getAllSKNew", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is to list all SK New")
    public Page<GetAllSknewResponse> executeGetAllSKNew(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllSKNew");
        Page<GetAllSknewResponse> _result = queryService.executeGetAllSKNew(pageable);
        LOGGER.debug("got the result for named query: getAllSKNew, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllSKNew")
    @RequestMapping(value = "/queries/getAllSKNew/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllSKNew(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllSKNew");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllSKNew";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllSKNew( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getDetailLaporanByAgreementNo", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieve detail laporan by using agreement no as parameter")
    public Page<GetDetailLaporanByAgreementNoResponse> executeGetDetailLaporanByAgreementNo(@RequestParam(value = "agreement_no") String agreementNo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getDetailLaporanByAgreementNo");
        Page<GetDetailLaporanByAgreementNoResponse> _result = queryService.executeGetDetailLaporanByAgreementNo(agreementNo, pageable);
        LOGGER.debug("got the result for named query: getDetailLaporanByAgreementNo, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getDetailLaporanByAgreementNo")
    @RequestMapping(value = "/queries/getDetailLaporanByAgreementNo/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetDetailLaporanByAgreementNo(@RequestParam(value = "agreement_no") String agreementNo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getDetailLaporanByAgreementNo");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getDetailLaporanByAgreementNo";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetDetailLaporanByAgreementNo(agreementNo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getAllUsersMitra", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to retrieve all registered mitra users.")
    public Page<GetAllUsersMitraResponse> executeGetAllUsersMitra(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllUsersMitra");
        Page<GetAllUsersMitraResponse> _result = queryService.executeGetAllUsersMitra(pageable);
        LOGGER.debug("got the result for named query: getAllUsersMitra, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllUsersMitra")
    @RequestMapping(value = "/queries/getAllUsersMitra/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllUsersMitra(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllUsersMitra");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllUsersMitra";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllUsersMitra( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getSKRequestDetail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Request detail query")
    public Page<GetSkrequestDetailResponse> executeGetSKRequestDetail(@RequestParam(value = "sk_request_id") Integer skRequestId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getSKRequestDetail");
        Page<GetSkrequestDetailResponse> _result = queryService.executeGetSKRequestDetail(skRequestId, pageable);
        LOGGER.debug("got the result for named query: getSKRequestDetail, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getSKRequestDetail")
    @RequestMapping(value = "/queries/getSKRequestDetail/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetSKRequestDetail(@RequestParam(value = "sk_request_id") Integer skRequestId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getSKRequestDetail");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getSKRequestDetail";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetSKRequestDetail(skRequestId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getAllUsersInformant", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to retrieve all users information from users table which role is 'INFORMAN'")
    public Page<GetAllUsersInformantResponse> executeGetAllUsersInformant(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getAllUsersInformant");
        Page<GetAllUsersInformantResponse> _result = queryService.executeGetAllUsersInformant(pageable);
        LOGGER.debug("got the result for named query: getAllUsersInformant, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getAllUsersInformant")
    @RequestMapping(value = "/queries/getAllUsersInformant/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetAllUsersInformant(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getAllUsersInformant");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getAllUsersInformant";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetAllUsersInformant( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getLelangSKDetailByRemoId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query is used to retrieve lelang SK detail data based on given REMO ID parameter")
    public Page<GetLelangSkdetailByRemoIdResponse> executeGetLelangSKDetailByRemoId(@RequestParam(value = "remo_id") Integer remoId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getLelangSKDetailByRemoId");
        Page<GetLelangSkdetailByRemoIdResponse> _result = queryService.executeGetLelangSKDetailByRemoId(remoId, pageable);
        LOGGER.debug("got the result for named query: getLelangSKDetailByRemoId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getLelangSKDetailByRemoId")
    @RequestMapping(value = "/queries/getLelangSKDetailByRemoId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetLelangSKDetailByRemoId(@RequestParam(value = "remo_id") Integer remoId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getLelangSKDetailByRemoId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getLelangSKDetailByRemoId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetLelangSKDetailByRemoId(remoId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getReportImagesById", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This query to retrieve all images url based on report id given")
    public Page<GetReportImagesByIdResponse> executeGetReportImagesById(@RequestParam(value = "id") BigInteger id, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getReportImagesById");
        Page<GetReportImagesByIdResponse> _result = queryService.executeGetReportImagesById(id, pageable);
        LOGGER.debug("got the result for named query: getReportImagesById, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getReportImagesById")
    @RequestMapping(value = "/queries/getReportImagesById/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetReportImagesById(@RequestParam(value = "id") BigInteger id, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getReportImagesById");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getReportImagesById";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetReportImagesById(id,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getUserByEmailQuery", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to retrieve user information and details based on email parameter")
    public Page<GetUserByEmailQueryResponse> executeGetUserByEmailQuery(@RequestParam(value = "email") String email, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getUserByEmailQuery");
        Page<GetUserByEmailQueryResponse> _result = queryService.executeGetUserByEmailQuery(email, pageable);
        LOGGER.debug("got the result for named query: getUserByEmailQuery, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getUserByEmailQuery")
    @RequestMapping(value = "/queries/getUserByEmailQuery/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetUserByEmailQuery(@RequestParam(value = "email") String email, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserByEmailQuery");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getUserByEmailQuery";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetUserByEmailQuery(email,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/viewLelangSKAktif", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This is a query to retrieve a detail of one SK Aktif")
    public Page<ViewLelangSkaktifResponse> executeViewLelangSKAktif(@RequestParam(value = "agreement_no") String agreementNo, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: viewLelangSKAktif");
        Page<ViewLelangSkaktifResponse> _result = queryService.executeViewLelangSKAktif(agreementNo, pageable);
        LOGGER.debug("got the result for named query: viewLelangSKAktif, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query viewLelangSKAktif")
    @RequestMapping(value = "/queries/viewLelangSKAktif/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportViewLelangSKAktif(@RequestParam(value = "agreement_no") String agreementNo, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: viewLelangSKAktif");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "viewLelangSKAktif";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportViewLelangSKAktif(agreementNo,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getCItyByProvince", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Retrieve a city name and the id of the table by province name given")
    public Page<GetCityByProvinceResponse> executeGetCItyByProvince(@RequestParam(value = "province_name") String provinceName, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getCItyByProvince");
        Page<GetCityByProvinceResponse> _result = queryService.executeGetCItyByProvince(provinceName, pageable);
        LOGGER.debug("got the result for named query: getCItyByProvince, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getCItyByProvince")
    @RequestMapping(value = "/queries/getCItyByProvince/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetCItyByProvince(@RequestParam(value = "province_name") String provinceName, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCItyByProvince");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getCItyByProvince";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetCItyByProvince(provinceName,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/getPesertaLelangData", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A query to retrieve all peserta lelang")
    public Page<GetPesertaLelangDataResponse> executeGetPesertaLelangData(@RequestParam(value = "lelang_sk_detail_id") Integer lelangSkDetailId, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: getPesertaLelangData");
        Page<GetPesertaLelangDataResponse> _result = queryService.executeGetPesertaLelangData(lelangSkDetailId, pageable);
        LOGGER.debug("got the result for named query: getPesertaLelangData, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query getPesertaLelangData")
    @RequestMapping(value = "/queries/getPesertaLelangData/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGetPesertaLelangData(@RequestParam(value = "lelang_sk_detail_id") Integer lelangSkDetailId, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: getPesertaLelangData");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "getPesertaLelangData";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportGetPesertaLelangData(lelangSkDetailId,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}