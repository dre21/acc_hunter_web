/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangParticipants;
import com.acc_hunter_web.acc_hunter.LelangSk;
import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.service.LelangSkService;


/**
 * Controller object for domain model class LelangSk.
 * @see LelangSk
 */
@RestController("acc_hunter.LelangSkController")
@Api(value = "LelangSkController", description = "Exposes APIs to work with LelangSk resource.")
@RequestMapping("/acc_hunter/LelangSk")
public class LelangSkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkController.class);

    @Autowired
	@Qualifier("acc_hunter.LelangSkService")
	private LelangSkService lelangSkService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LelangSk instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSk createLelangSk(@RequestBody LelangSk lelangSk) {
		LOGGER.debug("Create LelangSk with information: {}" , lelangSk);

		lelangSk = lelangSkService.create(lelangSk);
		LOGGER.debug("Created LelangSk with information: {}" , lelangSk);

	    return lelangSk;
	}

    @ApiOperation(value = "Returns the LelangSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSk getLelangSk(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LelangSk with id: {}" , id);

        LelangSk foundLelangSk = lelangSkService.getById(id);
        LOGGER.debug("LelangSk details with id: {}" , foundLelangSk);

        return foundLelangSk;
    }

    @ApiOperation(value = "Updates the LelangSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSk editLelangSk(@PathVariable("id") Integer id, @RequestBody LelangSk lelangSk) {
        LOGGER.debug("Editing LelangSk with id: {}" , lelangSk.getId());

        lelangSk.setId(id);
        lelangSk = lelangSkService.update(lelangSk);
        LOGGER.debug("LelangSk details with id: {}" , lelangSk);

        return lelangSk;
    }
    
    @ApiOperation(value = "Partially updates the LelangSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSk patchLelangSk(@PathVariable("id") Integer id, @RequestBody @MapTo(LelangSk.class) Map<String, Object> lelangSkPatch) {
        LOGGER.debug("Partially updating LelangSk with id: {}" , id);

        LelangSk lelangSk = lelangSkService.partialUpdate(id, lelangSkPatch);
        LOGGER.debug("LelangSk details after partial update: {}" , lelangSk);

        return lelangSk;
    }

    @ApiOperation(value = "Deletes the LelangSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLelangSk(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LelangSk with id: {}" , id);

        LelangSk deletedLelangSk = lelangSkService.delete(id);

        return deletedLelangSk != null;
    }

    /**
     * @deprecated Use {@link #findLelangSks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LelangSk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSk> searchLelangSksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LelangSks list by query filter:{}", (Object) queryFilters);
        return lelangSkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSk> findLelangSks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSks list by filter:", query);
        return lelangSkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSk> filterLelangSks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSks list by filter", query);
        return lelangSkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLelangSks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lelangSkService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLelangSksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LelangSk.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> lelangSkService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LelangSk instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLelangSks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LelangSks");
		return lelangSkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLelangSkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lelangSkService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/lelangSkDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the lelangSkDetails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkDetail> findAssociatedLelangSkDetails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated lelangSkDetails");
        return lelangSkService.findAssociatedLelangSkDetails(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/lelangParticipantses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the lelangParticipantses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangParticipants> findAssociatedLelangParticipantses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated lelangParticipantses");
        return lelangSkService.findAssociatedLelangParticipantses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LelangSkService instance
	 */
	protected void setLelangSkService(LelangSkService service) {
		this.lelangSkService = service;
	}

}