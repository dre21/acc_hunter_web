/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.GamificationPeojfBtToSaldo;
import com.acc_hunter_web.acc_hunter.service.GamificationPeojfBtToSaldoService;


/**
 * Controller object for domain model class GamificationPeojfBtToSaldo.
 * @see GamificationPeojfBtToSaldo
 */
@RestController("acc_hunter.GamificationPeojfBtToSaldoController")
@Api(value = "GamificationPeojfBtToSaldoController", description = "Exposes APIs to work with GamificationPeojfBtToSaldo resource.")
@RequestMapping("/acc_hunter/GamificationPeojfBtToSaldo")
public class GamificationPeojfBtToSaldoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfBtToSaldoController.class);

    @Autowired
	@Qualifier("acc_hunter.GamificationPeojfBtToSaldoService")
	private GamificationPeojfBtToSaldoService gamificationPeojfBtToSaldoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GamificationPeojfBtToSaldo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfBtToSaldo createGamificationPeojfBtToSaldo(@RequestBody GamificationPeojfBtToSaldo gamificationPeojfBtToSaldo) {
		LOGGER.debug("Create GamificationPeojfBtToSaldo with information: {}" , gamificationPeojfBtToSaldo);

		gamificationPeojfBtToSaldo = gamificationPeojfBtToSaldoService.create(gamificationPeojfBtToSaldo);
		LOGGER.debug("Created GamificationPeojfBtToSaldo with information: {}" , gamificationPeojfBtToSaldo);

	    return gamificationPeojfBtToSaldo;
	}

    @ApiOperation(value = "Returns the GamificationPeojfBtToSaldo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfBtToSaldo getGamificationPeojfBtToSaldo(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GamificationPeojfBtToSaldo with id: {}" , id);

        GamificationPeojfBtToSaldo foundGamificationPeojfBtToSaldo = gamificationPeojfBtToSaldoService.getById(id);
        LOGGER.debug("GamificationPeojfBtToSaldo details with id: {}" , foundGamificationPeojfBtToSaldo);

        return foundGamificationPeojfBtToSaldo;
    }

    @ApiOperation(value = "Updates the GamificationPeojfBtToSaldo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfBtToSaldo editGamificationPeojfBtToSaldo(@PathVariable("id") Integer id, @RequestBody GamificationPeojfBtToSaldo gamificationPeojfBtToSaldo) {
        LOGGER.debug("Editing GamificationPeojfBtToSaldo with id: {}" , gamificationPeojfBtToSaldo.getId());

        gamificationPeojfBtToSaldo.setId(id);
        gamificationPeojfBtToSaldo = gamificationPeojfBtToSaldoService.update(gamificationPeojfBtToSaldo);
        LOGGER.debug("GamificationPeojfBtToSaldo details with id: {}" , gamificationPeojfBtToSaldo);

        return gamificationPeojfBtToSaldo;
    }
    
    @ApiOperation(value = "Partially updates the GamificationPeojfBtToSaldo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfBtToSaldo patchGamificationPeojfBtToSaldo(@PathVariable("id") Integer id, @RequestBody @MapTo(GamificationPeojfBtToSaldo.class) Map<String, Object> gamificationPeojfBtToSaldoPatch) {
        LOGGER.debug("Partially updating GamificationPeojfBtToSaldo with id: {}" , id);

        GamificationPeojfBtToSaldo gamificationPeojfBtToSaldo = gamificationPeojfBtToSaldoService.partialUpdate(id, gamificationPeojfBtToSaldoPatch);
        LOGGER.debug("GamificationPeojfBtToSaldo details after partial update: {}" , gamificationPeojfBtToSaldo);

        return gamificationPeojfBtToSaldo;
    }

    @ApiOperation(value = "Deletes the GamificationPeojfBtToSaldo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGamificationPeojfBtToSaldo(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GamificationPeojfBtToSaldo with id: {}" , id);

        GamificationPeojfBtToSaldo deletedGamificationPeojfBtToSaldo = gamificationPeojfBtToSaldoService.delete(id);

        return deletedGamificationPeojfBtToSaldo != null;
    }

    /**
     * @deprecated Use {@link #findGamificationPeojfBtToSaldos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GamificationPeojfBtToSaldo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfBtToSaldo> searchGamificationPeojfBtToSaldosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GamificationPeojfBtToSaldos list by query filter:{}", (Object) queryFilters);
        return gamificationPeojfBtToSaldoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfBtToSaldo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GamificationPeojfBtToSaldo> findGamificationPeojfBtToSaldos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfBtToSaldos list by filter:", query);
        return gamificationPeojfBtToSaldoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfBtToSaldo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfBtToSaldo> filterGamificationPeojfBtToSaldos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfBtToSaldos list by filter", query);
        return gamificationPeojfBtToSaldoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGamificationPeojfBtToSaldos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gamificationPeojfBtToSaldoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGamificationPeojfBtToSaldosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GamificationPeojfBtToSaldo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> gamificationPeojfBtToSaldoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GamificationPeojfBtToSaldo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGamificationPeojfBtToSaldos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GamificationPeojfBtToSaldos");
		return gamificationPeojfBtToSaldoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGamificationPeojfBtToSaldoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gamificationPeojfBtToSaldoService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GamificationPeojfBtToSaldoService instance
	 */
	protected void setGamificationPeojfBtToSaldoService(GamificationPeojfBtToSaldoService service) {
		this.gamificationPeojfBtToSaldoService = service;
	}

}