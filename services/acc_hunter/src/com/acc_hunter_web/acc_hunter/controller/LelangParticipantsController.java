/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangParticipants;
import com.acc_hunter_web.acc_hunter.service.LelangParticipantsService;


/**
 * Controller object for domain model class LelangParticipants.
 * @see LelangParticipants
 */
@RestController("acc_hunter.LelangParticipantsController")
@Api(value = "LelangParticipantsController", description = "Exposes APIs to work with LelangParticipants resource.")
@RequestMapping("/acc_hunter/LelangParticipants")
public class LelangParticipantsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangParticipantsController.class);

    @Autowired
	@Qualifier("acc_hunter.LelangParticipantsService")
	private LelangParticipantsService lelangParticipantsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LelangParticipants instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangParticipants createLelangParticipants(@RequestBody LelangParticipants lelangParticipants) {
		LOGGER.debug("Create LelangParticipants with information: {}" , lelangParticipants);

		lelangParticipants = lelangParticipantsService.create(lelangParticipants);
		LOGGER.debug("Created LelangParticipants with information: {}" , lelangParticipants);

	    return lelangParticipants;
	}

    @ApiOperation(value = "Returns the LelangParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangParticipants getLelangParticipants(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LelangParticipants with id: {}" , id);

        LelangParticipants foundLelangParticipants = lelangParticipantsService.getById(id);
        LOGGER.debug("LelangParticipants details with id: {}" , foundLelangParticipants);

        return foundLelangParticipants;
    }

    @ApiOperation(value = "Updates the LelangParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangParticipants editLelangParticipants(@PathVariable("id") Integer id, @RequestBody LelangParticipants lelangParticipants) {
        LOGGER.debug("Editing LelangParticipants with id: {}" , lelangParticipants.getId());

        lelangParticipants.setId(id);
        lelangParticipants = lelangParticipantsService.update(lelangParticipants);
        LOGGER.debug("LelangParticipants details with id: {}" , lelangParticipants);

        return lelangParticipants;
    }
    
    @ApiOperation(value = "Partially updates the LelangParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangParticipants patchLelangParticipants(@PathVariable("id") Integer id, @RequestBody @MapTo(LelangParticipants.class) Map<String, Object> lelangParticipantsPatch) {
        LOGGER.debug("Partially updating LelangParticipants with id: {}" , id);

        LelangParticipants lelangParticipants = lelangParticipantsService.partialUpdate(id, lelangParticipantsPatch);
        LOGGER.debug("LelangParticipants details after partial update: {}" , lelangParticipants);

        return lelangParticipants;
    }

    @ApiOperation(value = "Deletes the LelangParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLelangParticipants(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LelangParticipants with id: {}" , id);

        LelangParticipants deletedLelangParticipants = lelangParticipantsService.delete(id);

        return deletedLelangParticipants != null;
    }

    /**
     * @deprecated Use {@link #findLelangParticipants(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LelangParticipants instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangParticipants> searchLelangParticipantsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LelangParticipants list by query filter:{}", (Object) queryFilters);
        return lelangParticipantsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangParticipants instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangParticipants> findLelangParticipants(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangParticipants list by filter:", query);
        return lelangParticipantsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangParticipants instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangParticipants> filterLelangParticipants(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangParticipants list by filter", query);
        return lelangParticipantsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLelangParticipants(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lelangParticipantsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLelangParticipantsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LelangParticipants.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> lelangParticipantsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LelangParticipants instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLelangParticipants( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LelangParticipants");
		return lelangParticipantsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLelangParticipantsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lelangParticipantsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LelangParticipantsService instance
	 */
	protected void setLelangParticipantsService(LelangParticipantsService service) {
		this.lelangParticipantsService = service;
	}

}