/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.RedeemRequest;
import com.acc_hunter_web.acc_hunter.service.RedeemRequestService;


/**
 * Controller object for domain model class RedeemRequest.
 * @see RedeemRequest
 */
@RestController("acc_hunter.RedeemRequestController")
@Api(value = "RedeemRequestController", description = "Exposes APIs to work with RedeemRequest resource.")
@RequestMapping("/acc_hunter/RedeemRequest")
public class RedeemRequestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedeemRequestController.class);

    @Autowired
	@Qualifier("acc_hunter.RedeemRequestService")
	private RedeemRequestService redeemRequestService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RedeemRequest instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeemRequest createRedeemRequest(@RequestBody RedeemRequest redeemRequest) {
		LOGGER.debug("Create RedeemRequest with information: {}" , redeemRequest);

		redeemRequest = redeemRequestService.create(redeemRequest);
		LOGGER.debug("Created RedeemRequest with information: {}" , redeemRequest);

	    return redeemRequest;
	}

    @ApiOperation(value = "Returns the RedeemRequest instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeemRequest getRedeemRequest(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RedeemRequest with id: {}" , id);

        RedeemRequest foundRedeemRequest = redeemRequestService.getById(id);
        LOGGER.debug("RedeemRequest details with id: {}" , foundRedeemRequest);

        return foundRedeemRequest;
    }

    @ApiOperation(value = "Updates the RedeemRequest instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeemRequest editRedeemRequest(@PathVariable("id") Integer id, @RequestBody RedeemRequest redeemRequest) {
        LOGGER.debug("Editing RedeemRequest with id: {}" , redeemRequest.getId());

        redeemRequest.setId(id);
        redeemRequest = redeemRequestService.update(redeemRequest);
        LOGGER.debug("RedeemRequest details with id: {}" , redeemRequest);

        return redeemRequest;
    }
    
    @ApiOperation(value = "Partially updates the RedeemRequest instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RedeemRequest patchRedeemRequest(@PathVariable("id") Integer id, @RequestBody @MapTo(RedeemRequest.class) Map<String, Object> redeemRequestPatch) {
        LOGGER.debug("Partially updating RedeemRequest with id: {}" , id);

        RedeemRequest redeemRequest = redeemRequestService.partialUpdate(id, redeemRequestPatch);
        LOGGER.debug("RedeemRequest details after partial update: {}" , redeemRequest);

        return redeemRequest;
    }

    @ApiOperation(value = "Deletes the RedeemRequest instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRedeemRequest(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RedeemRequest with id: {}" , id);

        RedeemRequest deletedRedeemRequest = redeemRequestService.delete(id);

        return deletedRedeemRequest != null;
    }

    /**
     * @deprecated Use {@link #findRedeemRequests(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RedeemRequest instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<RedeemRequest> searchRedeemRequestsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RedeemRequests list by query filter:{}", (Object) queryFilters);
        return redeemRequestService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeemRequest instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RedeemRequest> findRedeemRequests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeemRequests list by filter:", query);
        return redeemRequestService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RedeemRequest instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<RedeemRequest> filterRedeemRequests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RedeemRequests list by filter", query);
        return redeemRequestService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportRedeemRequests(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return redeemRequestService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportRedeemRequestsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RedeemRequest.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> redeemRequestService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RedeemRequest instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countRedeemRequests( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RedeemRequests");
		return redeemRequestService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getRedeemRequestAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return redeemRequestService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RedeemRequestService instance
	 */
	protected void setRedeemRequestService(RedeemRequestService service) {
		this.redeemRequestService = service;
	}

}