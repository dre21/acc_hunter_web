/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.LelangSkDetailImages;
import com.acc_hunter_web.acc_hunter.LelangSkParticipants;
import com.acc_hunter_web.acc_hunter.service.LelangSkDetailService;


/**
 * Controller object for domain model class LelangSkDetail.
 * @see LelangSkDetail
 */
@RestController("acc_hunter.LelangSkDetailController")
@Api(value = "LelangSkDetailController", description = "Exposes APIs to work with LelangSkDetail resource.")
@RequestMapping("/acc_hunter/LelangSkDetail")
public class LelangSkDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkDetailController.class);

    @Autowired
	@Qualifier("acc_hunter.LelangSkDetailService")
	private LelangSkDetailService lelangSkDetailService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LelangSkDetail instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetail createLelangSkDetail(@RequestBody LelangSkDetail lelangSkDetail) {
		LOGGER.debug("Create LelangSkDetail with information: {}" , lelangSkDetail);

		lelangSkDetail = lelangSkDetailService.create(lelangSkDetail);
		LOGGER.debug("Created LelangSkDetail with information: {}" , lelangSkDetail);

	    return lelangSkDetail;
	}

    @ApiOperation(value = "Returns the LelangSkDetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetail getLelangSkDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LelangSkDetail with id: {}" , id);

        LelangSkDetail foundLelangSkDetail = lelangSkDetailService.getById(id);
        LOGGER.debug("LelangSkDetail details with id: {}" , foundLelangSkDetail);

        return foundLelangSkDetail;
    }

    @ApiOperation(value = "Updates the LelangSkDetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetail editLelangSkDetail(@PathVariable("id") Integer id, @RequestBody LelangSkDetail lelangSkDetail) {
        LOGGER.debug("Editing LelangSkDetail with id: {}" , lelangSkDetail.getId());

        lelangSkDetail.setId(id);
        lelangSkDetail = lelangSkDetailService.update(lelangSkDetail);
        LOGGER.debug("LelangSkDetail details with id: {}" , lelangSkDetail);

        return lelangSkDetail;
    }
    
    @ApiOperation(value = "Partially updates the LelangSkDetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetail patchLelangSkDetail(@PathVariable("id") Integer id, @RequestBody @MapTo(LelangSkDetail.class) Map<String, Object> lelangSkDetailPatch) {
        LOGGER.debug("Partially updating LelangSkDetail with id: {}" , id);

        LelangSkDetail lelangSkDetail = lelangSkDetailService.partialUpdate(id, lelangSkDetailPatch);
        LOGGER.debug("LelangSkDetail details after partial update: {}" , lelangSkDetail);

        return lelangSkDetail;
    }

    @ApiOperation(value = "Deletes the LelangSkDetail instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLelangSkDetail(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LelangSkDetail with id: {}" , id);

        LelangSkDetail deletedLelangSkDetail = lelangSkDetailService.delete(id);

        return deletedLelangSkDetail != null;
    }

    @RequestMapping(value = "/agreementNo/{agreementNo}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching LelangSkDetail with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetail getByAgreementNo(@PathVariable("agreementNo") String agreementNo) {
        LOGGER.debug("Getting LelangSkDetail with uniques key AgreementNo");
        return lelangSkDetailService.getByAgreementNo(agreementNo);
    }

    /**
     * @deprecated Use {@link #findLelangSkDetails(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LelangSkDetail instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkDetail> searchLelangSkDetailsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LelangSkDetails list by query filter:{}", (Object) queryFilters);
        return lelangSkDetailService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkDetail instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkDetail> findLelangSkDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkDetails list by filter:", query);
        return lelangSkDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkDetail instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkDetail> filterLelangSkDetails(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkDetails list by filter", query);
        return lelangSkDetailService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLelangSkDetails(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lelangSkDetailService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLelangSkDetailsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LelangSkDetail.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> lelangSkDetailService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LelangSkDetail instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLelangSkDetails( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LelangSkDetails");
		return lelangSkDetailService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLelangSkDetailAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lelangSkDetailService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/lelangSkParticipantses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the lelangSkParticipantses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkParticipants> findAssociatedLelangSkParticipantses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated lelangSkParticipantses");
        return lelangSkDetailService.findAssociatedLelangSkParticipantses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/lelangSkDetailImageses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the lelangSkDetailImageses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkDetailImages> findAssociatedLelangSkDetailImageses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated lelangSkDetailImageses");
        return lelangSkDetailService.findAssociatedLelangSkDetailImageses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LelangSkDetailService instance
	 */
	protected void setLelangSkDetailService(LelangSkDetailService service) {
		this.lelangSkDetailService = service;
	}

}