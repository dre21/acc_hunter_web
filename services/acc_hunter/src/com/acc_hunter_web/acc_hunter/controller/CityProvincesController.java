/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.CityProvinces;
import com.acc_hunter_web.acc_hunter.service.CityProvincesService;


/**
 * Controller object for domain model class CityProvinces.
 * @see CityProvinces
 */
@RestController("acc_hunter.CityProvincesController")
@Api(value = "CityProvincesController", description = "Exposes APIs to work with CityProvinces resource.")
@RequestMapping("/acc_hunter/CityProvinces")
public class CityProvincesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CityProvincesController.class);

    @Autowired
	@Qualifier("acc_hunter.CityProvincesService")
	private CityProvincesService cityProvincesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CityProvinces instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CityProvinces createCityProvinces(@RequestBody CityProvinces cityProvinces) {
		LOGGER.debug("Create CityProvinces with information: {}" , cityProvinces);

		cityProvinces = cityProvincesService.create(cityProvinces);
		LOGGER.debug("Created CityProvinces with information: {}" , cityProvinces);

	    return cityProvinces;
	}

    @ApiOperation(value = "Returns the CityProvinces instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CityProvinces getCityProvinces(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting CityProvinces with id: {}" , id);

        CityProvinces foundCityProvinces = cityProvincesService.getById(id);
        LOGGER.debug("CityProvinces details with id: {}" , foundCityProvinces);

        return foundCityProvinces;
    }

    @ApiOperation(value = "Updates the CityProvinces instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CityProvinces editCityProvinces(@PathVariable("id") Integer id, @RequestBody CityProvinces cityProvinces) {
        LOGGER.debug("Editing CityProvinces with id: {}" , cityProvinces.getId());

        cityProvinces.setId(id);
        cityProvinces = cityProvincesService.update(cityProvinces);
        LOGGER.debug("CityProvinces details with id: {}" , cityProvinces);

        return cityProvinces;
    }
    
    @ApiOperation(value = "Partially updates the CityProvinces instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CityProvinces patchCityProvinces(@PathVariable("id") Integer id, @RequestBody @MapTo(CityProvinces.class) Map<String, Object> cityProvincesPatch) {
        LOGGER.debug("Partially updating CityProvinces with id: {}" , id);

        CityProvinces cityProvinces = cityProvincesService.partialUpdate(id, cityProvincesPatch);
        LOGGER.debug("CityProvinces details after partial update: {}" , cityProvinces);

        return cityProvinces;
    }

    @ApiOperation(value = "Deletes the CityProvinces instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCityProvinces(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting CityProvinces with id: {}" , id);

        CityProvinces deletedCityProvinces = cityProvincesService.delete(id);

        return deletedCityProvinces != null;
    }

    /**
     * @deprecated Use {@link #findCityProvinces(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CityProvinces instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CityProvinces> searchCityProvincesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CityProvinces list by query filter:{}", (Object) queryFilters);
        return cityProvincesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CityProvinces instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CityProvinces> findCityProvinces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CityProvinces list by filter:", query);
        return cityProvincesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CityProvinces instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CityProvinces> filterCityProvinces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CityProvinces list by filter", query);
        return cityProvincesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportCityProvinces(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return cityProvincesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCityProvincesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CityProvinces.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> cityProvincesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CityProvinces instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countCityProvinces( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CityProvinces");
		return cityProvincesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getCityProvincesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return cityProvincesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CityProvincesService instance
	 */
	protected void setCityProvincesService(CityProvincesService service) {
		this.cityProvincesService = service;
	}

}