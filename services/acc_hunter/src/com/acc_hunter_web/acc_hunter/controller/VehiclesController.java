/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.Reports;
import com.acc_hunter_web.acc_hunter.Sayembara;
import com.acc_hunter_web.acc_hunter.Vehicles;
import com.acc_hunter_web.acc_hunter.service.VehiclesService;


/**
 * Controller object for domain model class Vehicles.
 * @see Vehicles
 */
@RestController("acc_hunter.VehiclesController")
@Api(value = "VehiclesController", description = "Exposes APIs to work with Vehicles resource.")
@RequestMapping("/acc_hunter/Vehicles")
public class VehiclesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VehiclesController.class);

    @Autowired
	@Qualifier("acc_hunter.VehiclesService")
	private VehiclesService vehiclesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Vehicles instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vehicles createVehicles(@RequestBody Vehicles vehicles) {
		LOGGER.debug("Create Vehicles with information: {}" , vehicles);

		vehicles = vehiclesService.create(vehicles);
		LOGGER.debug("Created Vehicles with information: {}" , vehicles);

	    return vehicles;
	}

    @ApiOperation(value = "Returns the Vehicles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vehicles getVehicles(@PathVariable("id") String id) {
        LOGGER.debug("Getting Vehicles with id: {}" , id);

        Vehicles foundVehicles = vehiclesService.getById(id);
        LOGGER.debug("Vehicles details with id: {}" , foundVehicles);

        return foundVehicles;
    }

    @ApiOperation(value = "Updates the Vehicles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vehicles editVehicles(@PathVariable("id") String id, @RequestBody Vehicles vehicles) {
        LOGGER.debug("Editing Vehicles with id: {}" , vehicles.getNoAggr());

        vehicles.setNoAggr(id);
        vehicles = vehiclesService.update(vehicles);
        LOGGER.debug("Vehicles details with id: {}" , vehicles);

        return vehicles;
    }
    
    @ApiOperation(value = "Partially updates the Vehicles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Vehicles patchVehicles(@PathVariable("id") String id, @RequestBody @MapTo(Vehicles.class) Map<String, Object> vehiclesPatch) {
        LOGGER.debug("Partially updating Vehicles with id: {}" , id);

        Vehicles vehicles = vehiclesService.partialUpdate(id, vehiclesPatch);
        LOGGER.debug("Vehicles details after partial update: {}" , vehicles);

        return vehicles;
    }

    @ApiOperation(value = "Deletes the Vehicles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVehicles(@PathVariable("id") String id) {
        LOGGER.debug("Deleting Vehicles with id: {}" , id);

        Vehicles deletedVehicles = vehiclesService.delete(id);

        return deletedVehicles != null;
    }

    /**
     * @deprecated Use {@link #findVehicles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Vehicles instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vehicles> searchVehiclesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vehicles list by query filter:{}", (Object) queryFilters);
        return vehiclesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vehicles instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Vehicles> findVehicles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vehicles list by filter:", query);
        return vehiclesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Vehicles instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<Vehicles> filterVehicles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vehicles list by filter", query);
        return vehiclesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportVehicles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vehiclesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportVehiclesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Vehicles.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> vehiclesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Vehicles instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countVehicles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vehicles");
		return vehiclesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getVehiclesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vehiclesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/sayembaras", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the sayembaras instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Sayembara> findAssociatedSayembaras(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated sayembaras");
        return vehiclesService.findAssociatedSayembaras(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/reportses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the reportses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Reports> findAssociatedReportses(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated reportses");
        return vehiclesService.findAssociatedReportses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VehiclesService instance
	 */
	protected void setVehiclesService(VehiclesService service) {
		this.vehiclesService = service;
	}

}