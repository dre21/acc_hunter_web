/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.NotificationUsers;
import com.acc_hunter_web.acc_hunter.service.NotificationUsersService;


/**
 * Controller object for domain model class NotificationUsers.
 * @see NotificationUsers
 */
@RestController("acc_hunter.NotificationUsersController")
@Api(value = "NotificationUsersController", description = "Exposes APIs to work with NotificationUsers resource.")
@RequestMapping("/acc_hunter/NotificationUsers")
public class NotificationUsersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NotificationUsersController.class);

    @Autowired
	@Qualifier("acc_hunter.NotificationUsersService")
	private NotificationUsersService notificationUsersService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new NotificationUsers instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationUsers createNotificationUsers(@RequestBody NotificationUsers notificationUsers) {
		LOGGER.debug("Create NotificationUsers with information: {}" , notificationUsers);

		notificationUsers = notificationUsersService.create(notificationUsers);
		LOGGER.debug("Created NotificationUsers with information: {}" , notificationUsers);

	    return notificationUsers;
	}

    @ApiOperation(value = "Returns the NotificationUsers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationUsers getNotificationUsers(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting NotificationUsers with id: {}" , id);

        NotificationUsers foundNotificationUsers = notificationUsersService.getById(id);
        LOGGER.debug("NotificationUsers details with id: {}" , foundNotificationUsers);

        return foundNotificationUsers;
    }

    @ApiOperation(value = "Updates the NotificationUsers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationUsers editNotificationUsers(@PathVariable("id") Integer id, @RequestBody NotificationUsers notificationUsers) {
        LOGGER.debug("Editing NotificationUsers with id: {}" , notificationUsers.getId());

        notificationUsers.setId(id);
        notificationUsers = notificationUsersService.update(notificationUsers);
        LOGGER.debug("NotificationUsers details with id: {}" , notificationUsers);

        return notificationUsers;
    }
    
    @ApiOperation(value = "Partially updates the NotificationUsers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationUsers patchNotificationUsers(@PathVariable("id") Integer id, @RequestBody @MapTo(NotificationUsers.class) Map<String, Object> notificationUsersPatch) {
        LOGGER.debug("Partially updating NotificationUsers with id: {}" , id);

        NotificationUsers notificationUsers = notificationUsersService.partialUpdate(id, notificationUsersPatch);
        LOGGER.debug("NotificationUsers details after partial update: {}" , notificationUsers);

        return notificationUsers;
    }

    @ApiOperation(value = "Deletes the NotificationUsers instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNotificationUsers(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting NotificationUsers with id: {}" , id);

        NotificationUsers deletedNotificationUsers = notificationUsersService.delete(id);

        return deletedNotificationUsers != null;
    }

    /**
     * @deprecated Use {@link #findNotificationUsers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NotificationUsers instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NotificationUsers> searchNotificationUsersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NotificationUsers list by query filter:{}", (Object) queryFilters);
        return notificationUsersService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotificationUsers instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotificationUsers> findNotificationUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotificationUsers list by filter:", query);
        return notificationUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotificationUsers instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NotificationUsers> filterNotificationUsers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotificationUsers list by filter", query);
        return notificationUsersService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportNotificationUsers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return notificationUsersService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNotificationUsersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = NotificationUsers.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> notificationUsersService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of NotificationUsers instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countNotificationUsers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NotificationUsers");
		return notificationUsersService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getNotificationUsersAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return notificationUsersService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NotificationUsersService instance
	 */
	protected void setNotificationUsersService(NotificationUsersService service) {
		this.notificationUsersService = service;
	}

}