/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.UserPoint;
import com.acc_hunter_web.acc_hunter.service.UserPointService;


/**
 * Controller object for domain model class UserPoint.
 * @see UserPoint
 */
@RestController("acc_hunter.UserPointController")
@Api(value = "UserPointController", description = "Exposes APIs to work with UserPoint resource.")
@RequestMapping("/acc_hunter/UserPoint")
public class UserPointController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserPointController.class);

    @Autowired
	@Qualifier("acc_hunter.UserPointService")
	private UserPointService userPointService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new UserPoint instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserPoint createUserPoint(@RequestBody UserPoint userPoint) {
		LOGGER.debug("Create UserPoint with information: {}" , userPoint);

		userPoint = userPointService.create(userPoint);
		LOGGER.debug("Created UserPoint with information: {}" , userPoint);

	    return userPoint;
	}

    @ApiOperation(value = "Returns the UserPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserPoint getUserPoint(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting UserPoint with id: {}" , id);

        UserPoint foundUserPoint = userPointService.getById(id);
        LOGGER.debug("UserPoint details with id: {}" , foundUserPoint);

        return foundUserPoint;
    }

    @ApiOperation(value = "Updates the UserPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserPoint editUserPoint(@PathVariable("id") Integer id, @RequestBody UserPoint userPoint) {
        LOGGER.debug("Editing UserPoint with id: {}" , userPoint.getId());

        userPoint.setId(id);
        userPoint = userPointService.update(userPoint);
        LOGGER.debug("UserPoint details with id: {}" , userPoint);

        return userPoint;
    }
    
    @ApiOperation(value = "Partially updates the UserPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserPoint patchUserPoint(@PathVariable("id") Integer id, @RequestBody @MapTo(UserPoint.class) Map<String, Object> userPointPatch) {
        LOGGER.debug("Partially updating UserPoint with id: {}" , id);

        UserPoint userPoint = userPointService.partialUpdate(id, userPointPatch);
        LOGGER.debug("UserPoint details after partial update: {}" , userPoint);

        return userPoint;
    }

    @ApiOperation(value = "Deletes the UserPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserPoint(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting UserPoint with id: {}" , id);

        UserPoint deletedUserPoint = userPointService.delete(id);

        return deletedUserPoint != null;
    }

    /**
     * @deprecated Use {@link #findUserPoints(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserPoint instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserPoint> searchUserPointsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserPoints list by query filter:{}", (Object) queryFilters);
        return userPointService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserPoint instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserPoint> findUserPoints(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserPoints list by filter:", query);
        return userPointService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserPoint instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<UserPoint> filterUserPoints(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserPoints list by filter", query);
        return userPointService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportUserPoints(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userPointService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportUserPointsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = UserPoint.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> userPointService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of UserPoint instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countUserPoints( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserPoints");
		return userPointService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getUserPointAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userPointService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserPointService instance
	 */
	protected void setUserPointService(UserPointService service) {
		this.userPointService = service;
	}

}