/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.ReportImages;
import com.acc_hunter_web.acc_hunter.service.ReportImagesService;


/**
 * Controller object for domain model class ReportImages.
 * @see ReportImages
 */
@RestController("acc_hunter.ReportImagesController")
@Api(value = "ReportImagesController", description = "Exposes APIs to work with ReportImages resource.")
@RequestMapping("/acc_hunter/ReportImages")
public class ReportImagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ReportImagesController.class);

    @Autowired
	@Qualifier("acc_hunter.ReportImagesService")
	private ReportImagesService reportImagesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ReportImages instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ReportImages createReportImages(@RequestBody ReportImages reportImages) {
		LOGGER.debug("Create ReportImages with information: {}" , reportImages);

		reportImages = reportImagesService.create(reportImages);
		LOGGER.debug("Created ReportImages with information: {}" , reportImages);

	    return reportImages;
	}

    @ApiOperation(value = "Returns the ReportImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ReportImages getReportImages(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting ReportImages with id: {}" , id);

        ReportImages foundReportImages = reportImagesService.getById(id);
        LOGGER.debug("ReportImages details with id: {}" , foundReportImages);

        return foundReportImages;
    }

    @ApiOperation(value = "Updates the ReportImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ReportImages editReportImages(@PathVariable("id") Integer id, @RequestBody ReportImages reportImages) {
        LOGGER.debug("Editing ReportImages with id: {}" , reportImages.getId());

        reportImages.setId(id);
        reportImages = reportImagesService.update(reportImages);
        LOGGER.debug("ReportImages details with id: {}" , reportImages);

        return reportImages;
    }
    
    @ApiOperation(value = "Partially updates the ReportImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ReportImages patchReportImages(@PathVariable("id") Integer id, @RequestBody @MapTo(ReportImages.class) Map<String, Object> reportImagesPatch) {
        LOGGER.debug("Partially updating ReportImages with id: {}" , id);

        ReportImages reportImages = reportImagesService.partialUpdate(id, reportImagesPatch);
        LOGGER.debug("ReportImages details after partial update: {}" , reportImages);

        return reportImages;
    }

    @ApiOperation(value = "Deletes the ReportImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteReportImages(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting ReportImages with id: {}" , id);

        ReportImages deletedReportImages = reportImagesService.delete(id);

        return deletedReportImages != null;
    }

    /**
     * @deprecated Use {@link #findReportImages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ReportImages instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ReportImages> searchReportImagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ReportImages list by query filter:{}", (Object) queryFilters);
        return reportImagesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ReportImages instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ReportImages> findReportImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ReportImages list by filter:", query);
        return reportImagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ReportImages instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<ReportImages> filterReportImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ReportImages list by filter", query);
        return reportImagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportReportImages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return reportImagesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportReportImagesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ReportImages.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> reportImagesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ReportImages instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countReportImages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ReportImages");
		return reportImagesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getReportImagesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return reportImagesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ReportImagesService instance
	 */
	protected void setReportImagesService(ReportImagesService service) {
		this.reportImagesService = service;
	}

}