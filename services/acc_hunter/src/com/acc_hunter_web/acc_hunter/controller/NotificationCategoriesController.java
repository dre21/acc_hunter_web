/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.NotificationCategories;
import com.acc_hunter_web.acc_hunter.NotificationTemplates;
import com.acc_hunter_web.acc_hunter.NotificationUsers;
import com.acc_hunter_web.acc_hunter.service.NotificationCategoriesService;


/**
 * Controller object for domain model class NotificationCategories.
 * @see NotificationCategories
 */
@RestController("acc_hunter.NotificationCategoriesController")
@Api(value = "NotificationCategoriesController", description = "Exposes APIs to work with NotificationCategories resource.")
@RequestMapping("/acc_hunter/NotificationCategories")
public class NotificationCategoriesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NotificationCategoriesController.class);

    @Autowired
	@Qualifier("acc_hunter.NotificationCategoriesService")
	private NotificationCategoriesService notificationCategoriesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new NotificationCategories instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationCategories createNotificationCategories(@RequestBody NotificationCategories notificationCategories) {
		LOGGER.debug("Create NotificationCategories with information: {}" , notificationCategories);

		notificationCategories = notificationCategoriesService.create(notificationCategories);
		LOGGER.debug("Created NotificationCategories with information: {}" , notificationCategories);

	    return notificationCategories;
	}

    @ApiOperation(value = "Returns the NotificationCategories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationCategories getNotificationCategories(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting NotificationCategories with id: {}" , id);

        NotificationCategories foundNotificationCategories = notificationCategoriesService.getById(id);
        LOGGER.debug("NotificationCategories details with id: {}" , foundNotificationCategories);

        return foundNotificationCategories;
    }

    @ApiOperation(value = "Updates the NotificationCategories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationCategories editNotificationCategories(@PathVariable("id") Integer id, @RequestBody NotificationCategories notificationCategories) {
        LOGGER.debug("Editing NotificationCategories with id: {}" , notificationCategories.getId());

        notificationCategories.setId(id);
        notificationCategories = notificationCategoriesService.update(notificationCategories);
        LOGGER.debug("NotificationCategories details with id: {}" , notificationCategories);

        return notificationCategories;
    }
    
    @ApiOperation(value = "Partially updates the NotificationCategories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public NotificationCategories patchNotificationCategories(@PathVariable("id") Integer id, @RequestBody @MapTo(NotificationCategories.class) Map<String, Object> notificationCategoriesPatch) {
        LOGGER.debug("Partially updating NotificationCategories with id: {}" , id);

        NotificationCategories notificationCategories = notificationCategoriesService.partialUpdate(id, notificationCategoriesPatch);
        LOGGER.debug("NotificationCategories details after partial update: {}" , notificationCategories);

        return notificationCategories;
    }

    @ApiOperation(value = "Deletes the NotificationCategories instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteNotificationCategories(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting NotificationCategories with id: {}" , id);

        NotificationCategories deletedNotificationCategories = notificationCategoriesService.delete(id);

        return deletedNotificationCategories != null;
    }

    /**
     * @deprecated Use {@link #findNotificationCategories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of NotificationCategories instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NotificationCategories> searchNotificationCategoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NotificationCategories list by query filter:{}", (Object) queryFilters);
        return notificationCategoriesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotificationCategories instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotificationCategories> findNotificationCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotificationCategories list by filter:", query);
        return notificationCategoriesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of NotificationCategories instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<NotificationCategories> filterNotificationCategories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering NotificationCategories list by filter", query);
        return notificationCategoriesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportNotificationCategories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return notificationCategoriesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNotificationCategoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = NotificationCategories.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> notificationCategoriesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of NotificationCategories instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countNotificationCategories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting NotificationCategories");
		return notificationCategoriesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getNotificationCategoriesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return notificationCategoriesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/notificationTemplateses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the notificationTemplateses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotificationTemplates> findAssociatedNotificationTemplateses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated notificationTemplateses");
        return notificationCategoriesService.findAssociatedNotificationTemplateses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/notificationUserses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the notificationUserses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<NotificationUsers> findAssociatedNotificationUserses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated notificationUserses");
        return notificationCategoriesService.findAssociatedNotificationUserses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service NotificationCategoriesService instance
	 */
	protected void setNotificationCategoriesService(NotificationCategoriesService service) {
		this.notificationCategoriesService = service;
	}

}