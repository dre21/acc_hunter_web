/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangSkParticipants;
import com.acc_hunter_web.acc_hunter.service.LelangSkParticipantsService;


/**
 * Controller object for domain model class LelangSkParticipants.
 * @see LelangSkParticipants
 */
@RestController("acc_hunter.LelangSkParticipantsController")
@Api(value = "LelangSkParticipantsController", description = "Exposes APIs to work with LelangSkParticipants resource.")
@RequestMapping("/acc_hunter/LelangSkParticipants")
public class LelangSkParticipantsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkParticipantsController.class);

    @Autowired
	@Qualifier("acc_hunter.LelangSkParticipantsService")
	private LelangSkParticipantsService lelangSkParticipantsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LelangSkParticipants instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkParticipants createLelangSkParticipants(@RequestBody LelangSkParticipants lelangSkParticipants) {
		LOGGER.debug("Create LelangSkParticipants with information: {}" , lelangSkParticipants);

		lelangSkParticipants = lelangSkParticipantsService.create(lelangSkParticipants);
		LOGGER.debug("Created LelangSkParticipants with information: {}" , lelangSkParticipants);

	    return lelangSkParticipants;
	}

    @ApiOperation(value = "Returns the LelangSkParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkParticipants getLelangSkParticipants(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LelangSkParticipants with id: {}" , id);

        LelangSkParticipants foundLelangSkParticipants = lelangSkParticipantsService.getById(id);
        LOGGER.debug("LelangSkParticipants details with id: {}" , foundLelangSkParticipants);

        return foundLelangSkParticipants;
    }

    @ApiOperation(value = "Updates the LelangSkParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkParticipants editLelangSkParticipants(@PathVariable("id") Integer id, @RequestBody LelangSkParticipants lelangSkParticipants) {
        LOGGER.debug("Editing LelangSkParticipants with id: {}" , lelangSkParticipants.getId());

        lelangSkParticipants.setId(id);
        lelangSkParticipants = lelangSkParticipantsService.update(lelangSkParticipants);
        LOGGER.debug("LelangSkParticipants details with id: {}" , lelangSkParticipants);

        return lelangSkParticipants;
    }
    
    @ApiOperation(value = "Partially updates the LelangSkParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkParticipants patchLelangSkParticipants(@PathVariable("id") Integer id, @RequestBody @MapTo(LelangSkParticipants.class) Map<String, Object> lelangSkParticipantsPatch) {
        LOGGER.debug("Partially updating LelangSkParticipants with id: {}" , id);

        LelangSkParticipants lelangSkParticipants = lelangSkParticipantsService.partialUpdate(id, lelangSkParticipantsPatch);
        LOGGER.debug("LelangSkParticipants details after partial update: {}" , lelangSkParticipants);

        return lelangSkParticipants;
    }

    @ApiOperation(value = "Deletes the LelangSkParticipants instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLelangSkParticipants(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LelangSkParticipants with id: {}" , id);

        LelangSkParticipants deletedLelangSkParticipants = lelangSkParticipantsService.delete(id);

        return deletedLelangSkParticipants != null;
    }

    /**
     * @deprecated Use {@link #findLelangSkParticipants(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LelangSkParticipants instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkParticipants> searchLelangSkParticipantsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LelangSkParticipants list by query filter:{}", (Object) queryFilters);
        return lelangSkParticipantsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkParticipants instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkParticipants> findLelangSkParticipants(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkParticipants list by filter:", query);
        return lelangSkParticipantsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkParticipants instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkParticipants> filterLelangSkParticipants(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkParticipants list by filter", query);
        return lelangSkParticipantsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLelangSkParticipants(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lelangSkParticipantsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLelangSkParticipantsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LelangSkParticipants.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> lelangSkParticipantsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LelangSkParticipants instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLelangSkParticipants( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LelangSkParticipants");
		return lelangSkParticipantsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLelangSkParticipantsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lelangSkParticipantsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LelangSkParticipantsService instance
	 */
	protected void setLelangSkParticipantsService(LelangSkParticipantsService service) {
		this.lelangSkParticipantsService = service;
	}

}