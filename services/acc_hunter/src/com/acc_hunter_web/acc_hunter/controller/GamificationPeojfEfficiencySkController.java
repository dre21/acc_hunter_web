/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.GamificationPeojfEfficiencySk;
import com.acc_hunter_web.acc_hunter.service.GamificationPeojfEfficiencySkService;


/**
 * Controller object for domain model class GamificationPeojfEfficiencySk.
 * @see GamificationPeojfEfficiencySk
 */
@RestController("acc_hunter.GamificationPeojfEfficiencySkController")
@Api(value = "GamificationPeojfEfficiencySkController", description = "Exposes APIs to work with GamificationPeojfEfficiencySk resource.")
@RequestMapping("/acc_hunter/GamificationPeojfEfficiencySk")
public class GamificationPeojfEfficiencySkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfEfficiencySkController.class);

    @Autowired
	@Qualifier("acc_hunter.GamificationPeojfEfficiencySkService")
	private GamificationPeojfEfficiencySkService gamificationPeojfEfficiencySkService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GamificationPeojfEfficiencySk instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfEfficiencySk createGamificationPeojfEfficiencySk(@RequestBody GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk) {
		LOGGER.debug("Create GamificationPeojfEfficiencySk with information: {}" , gamificationPeojfEfficiencySk);

		gamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkService.create(gamificationPeojfEfficiencySk);
		LOGGER.debug("Created GamificationPeojfEfficiencySk with information: {}" , gamificationPeojfEfficiencySk);

	    return gamificationPeojfEfficiencySk;
	}

    @ApiOperation(value = "Returns the GamificationPeojfEfficiencySk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfEfficiencySk getGamificationPeojfEfficiencySk(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GamificationPeojfEfficiencySk with id: {}" , id);

        GamificationPeojfEfficiencySk foundGamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkService.getById(id);
        LOGGER.debug("GamificationPeojfEfficiencySk details with id: {}" , foundGamificationPeojfEfficiencySk);

        return foundGamificationPeojfEfficiencySk;
    }

    @ApiOperation(value = "Updates the GamificationPeojfEfficiencySk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfEfficiencySk editGamificationPeojfEfficiencySk(@PathVariable("id") Integer id, @RequestBody GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk) {
        LOGGER.debug("Editing GamificationPeojfEfficiencySk with id: {}" , gamificationPeojfEfficiencySk.getId());

        gamificationPeojfEfficiencySk.setId(id);
        gamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkService.update(gamificationPeojfEfficiencySk);
        LOGGER.debug("GamificationPeojfEfficiencySk details with id: {}" , gamificationPeojfEfficiencySk);

        return gamificationPeojfEfficiencySk;
    }
    
    @ApiOperation(value = "Partially updates the GamificationPeojfEfficiencySk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfEfficiencySk patchGamificationPeojfEfficiencySk(@PathVariable("id") Integer id, @RequestBody @MapTo(GamificationPeojfEfficiencySk.class) Map<String, Object> gamificationPeojfEfficiencySkPatch) {
        LOGGER.debug("Partially updating GamificationPeojfEfficiencySk with id: {}" , id);

        GamificationPeojfEfficiencySk gamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkService.partialUpdate(id, gamificationPeojfEfficiencySkPatch);
        LOGGER.debug("GamificationPeojfEfficiencySk details after partial update: {}" , gamificationPeojfEfficiencySk);

        return gamificationPeojfEfficiencySk;
    }

    @ApiOperation(value = "Deletes the GamificationPeojfEfficiencySk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGamificationPeojfEfficiencySk(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GamificationPeojfEfficiencySk with id: {}" , id);

        GamificationPeojfEfficiencySk deletedGamificationPeojfEfficiencySk = gamificationPeojfEfficiencySkService.delete(id);

        return deletedGamificationPeojfEfficiencySk != null;
    }

    /**
     * @deprecated Use {@link #findGamificationPeojfEfficiencySks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GamificationPeojfEfficiencySk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfEfficiencySk> searchGamificationPeojfEfficiencySksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GamificationPeojfEfficiencySks list by query filter:{}", (Object) queryFilters);
        return gamificationPeojfEfficiencySkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfEfficiencySk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GamificationPeojfEfficiencySk> findGamificationPeojfEfficiencySks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfEfficiencySks list by filter:", query);
        return gamificationPeojfEfficiencySkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfEfficiencySk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfEfficiencySk> filterGamificationPeojfEfficiencySks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfEfficiencySks list by filter", query);
        return gamificationPeojfEfficiencySkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGamificationPeojfEfficiencySks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gamificationPeojfEfficiencySkService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGamificationPeojfEfficiencySksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GamificationPeojfEfficiencySk.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> gamificationPeojfEfficiencySkService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GamificationPeojfEfficiencySk instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGamificationPeojfEfficiencySks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GamificationPeojfEfficiencySks");
		return gamificationPeojfEfficiencySkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGamificationPeojfEfficiencySkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gamificationPeojfEfficiencySkService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GamificationPeojfEfficiencySkService instance
	 */
	protected void setGamificationPeojfEfficiencySkService(GamificationPeojfEfficiencySkService service) {
		this.gamificationPeojfEfficiencySkService = service;
	}

}