/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.SkRequests;
import com.acc_hunter_web.acc_hunter.service.SkRequestsService;


/**
 * Controller object for domain model class SkRequests.
 * @see SkRequests
 */
@RestController("acc_hunter.SkRequestsController")
@Api(value = "SkRequestsController", description = "Exposes APIs to work with SkRequests resource.")
@RequestMapping("/acc_hunter/SkRequests")
public class SkRequestsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SkRequestsController.class);

    @Autowired
	@Qualifier("acc_hunter.SkRequestsService")
	private SkRequestsService skRequestsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new SkRequests instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SkRequests createSkRequests(@RequestBody SkRequests skRequests) {
		LOGGER.debug("Create SkRequests with information: {}" , skRequests);

		skRequests = skRequestsService.create(skRequests);
		LOGGER.debug("Created SkRequests with information: {}" , skRequests);

	    return skRequests;
	}

    @ApiOperation(value = "Returns the SkRequests instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SkRequests getSkRequests(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting SkRequests with id: {}" , id);

        SkRequests foundSkRequests = skRequestsService.getById(id);
        LOGGER.debug("SkRequests details with id: {}" , foundSkRequests);

        return foundSkRequests;
    }

    @ApiOperation(value = "Updates the SkRequests instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SkRequests editSkRequests(@PathVariable("id") Integer id, @RequestBody SkRequests skRequests) {
        LOGGER.debug("Editing SkRequests with id: {}" , skRequests.getId());

        skRequests.setId(id);
        skRequests = skRequestsService.update(skRequests);
        LOGGER.debug("SkRequests details with id: {}" , skRequests);

        return skRequests;
    }
    
    @ApiOperation(value = "Partially updates the SkRequests instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public SkRequests patchSkRequests(@PathVariable("id") Integer id, @RequestBody @MapTo(SkRequests.class) Map<String, Object> skRequestsPatch) {
        LOGGER.debug("Partially updating SkRequests with id: {}" , id);

        SkRequests skRequests = skRequestsService.partialUpdate(id, skRequestsPatch);
        LOGGER.debug("SkRequests details after partial update: {}" , skRequests);

        return skRequests;
    }

    @ApiOperation(value = "Deletes the SkRequests instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteSkRequests(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting SkRequests with id: {}" , id);

        SkRequests deletedSkRequests = skRequestsService.delete(id);

        return deletedSkRequests != null;
    }

    /**
     * @deprecated Use {@link #findSkRequests(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of SkRequests instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SkRequests> searchSkRequestsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SkRequests list by query filter:{}", (Object) queryFilters);
        return skRequestsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SkRequests instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SkRequests> findSkRequests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SkRequests list by filter:", query);
        return skRequestsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of SkRequests instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<SkRequests> filterSkRequests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering SkRequests list by filter", query);
        return skRequestsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportSkRequests(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return skRequestsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportSkRequestsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = SkRequests.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> skRequestsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of SkRequests instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countSkRequests( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting SkRequests");
		return skRequestsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getSkRequestsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return skRequestsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SkRequestsService instance
	 */
	protected void setSkRequestsService(SkRequestsService service) {
		this.skRequestsService = service;
	}

}