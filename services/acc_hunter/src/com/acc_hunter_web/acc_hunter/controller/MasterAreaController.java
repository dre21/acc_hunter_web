/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.MasterArea;
import com.acc_hunter_web.acc_hunter.Users;
import com.acc_hunter_web.acc_hunter.service.MasterAreaService;


/**
 * Controller object for domain model class MasterArea.
 * @see MasterArea
 */
@RestController("acc_hunter.MasterAreaController")
@Api(value = "MasterAreaController", description = "Exposes APIs to work with MasterArea resource.")
@RequestMapping("/acc_hunter/MasterArea")
public class MasterAreaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasterAreaController.class);

    @Autowired
	@Qualifier("acc_hunter.MasterAreaService")
	private MasterAreaService masterAreaService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new MasterArea instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterArea createMasterArea(@RequestBody MasterArea masterArea) {
		LOGGER.debug("Create MasterArea with information: {}" , masterArea);

		masterArea = masterAreaService.create(masterArea);
		LOGGER.debug("Created MasterArea with information: {}" , masterArea);

	    return masterArea;
	}

    @ApiOperation(value = "Returns the MasterArea instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterArea getMasterArea(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting MasterArea with id: {}" , id);

        MasterArea foundMasterArea = masterAreaService.getById(id);
        LOGGER.debug("MasterArea details with id: {}" , foundMasterArea);

        return foundMasterArea;
    }

    @ApiOperation(value = "Updates the MasterArea instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterArea editMasterArea(@PathVariable("id") Integer id, @RequestBody MasterArea masterArea) {
        LOGGER.debug("Editing MasterArea with id: {}" , masterArea.getId());

        masterArea.setId(id);
        masterArea = masterAreaService.update(masterArea);
        LOGGER.debug("MasterArea details with id: {}" , masterArea);

        return masterArea;
    }
    
    @ApiOperation(value = "Partially updates the MasterArea instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterArea patchMasterArea(@PathVariable("id") Integer id, @RequestBody @MapTo(MasterArea.class) Map<String, Object> masterAreaPatch) {
        LOGGER.debug("Partially updating MasterArea with id: {}" , id);

        MasterArea masterArea = masterAreaService.partialUpdate(id, masterAreaPatch);
        LOGGER.debug("MasterArea details after partial update: {}" , masterArea);

        return masterArea;
    }

    @ApiOperation(value = "Deletes the MasterArea instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMasterArea(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting MasterArea with id: {}" , id);

        MasterArea deletedMasterArea = masterAreaService.delete(id);

        return deletedMasterArea != null;
    }

    /**
     * @deprecated Use {@link #findMasterAreas(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MasterArea instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MasterArea> searchMasterAreasByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MasterAreas list by query filter:{}", (Object) queryFilters);
        return masterAreaService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MasterArea instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterArea> findMasterAreas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MasterAreas list by filter:", query);
        return masterAreaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MasterArea instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<MasterArea> filterMasterAreas(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MasterAreas list by filter", query);
        return masterAreaService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportMasterAreas(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return masterAreaService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportMasterAreasAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = MasterArea.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> masterAreaService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of MasterArea instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countMasterAreas( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MasterAreas");
		return masterAreaService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getMasterAreaAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return masterAreaService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/userses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the userses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Users> findAssociatedUserses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated userses");
        return masterAreaService.findAssociatedUserses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MasterAreaService instance
	 */
	protected void setMasterAreaService(MasterAreaService service) {
		this.masterAreaService = service;
	}

}