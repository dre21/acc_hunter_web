/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangSkDetail;
import com.acc_hunter_web.acc_hunter.RemoRegions;
import com.acc_hunter_web.acc_hunter.service.RemoRegionsService;


/**
 * Controller object for domain model class RemoRegions.
 * @see RemoRegions
 */
@RestController("acc_hunter.RemoRegionsController")
@Api(value = "RemoRegionsController", description = "Exposes APIs to work with RemoRegions resource.")
@RequestMapping("/acc_hunter/RemoRegions")
public class RemoRegionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RemoRegionsController.class);

    @Autowired
	@Qualifier("acc_hunter.RemoRegionsService")
	private RemoRegionsService remoRegionsService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new RemoRegions instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RemoRegions createRemoRegions(@RequestBody RemoRegions remoRegions) {
		LOGGER.debug("Create RemoRegions with information: {}" , remoRegions);

		remoRegions = remoRegionsService.create(remoRegions);
		LOGGER.debug("Created RemoRegions with information: {}" , remoRegions);

	    return remoRegions;
	}

    @ApiOperation(value = "Returns the RemoRegions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RemoRegions getRemoRegions(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting RemoRegions with id: {}" , id);

        RemoRegions foundRemoRegions = remoRegionsService.getById(id);
        LOGGER.debug("RemoRegions details with id: {}" , foundRemoRegions);

        return foundRemoRegions;
    }

    @ApiOperation(value = "Updates the RemoRegions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RemoRegions editRemoRegions(@PathVariable("id") Integer id, @RequestBody RemoRegions remoRegions) {
        LOGGER.debug("Editing RemoRegions with id: {}" , remoRegions.getId());

        remoRegions.setId(id);
        remoRegions = remoRegionsService.update(remoRegions);
        LOGGER.debug("RemoRegions details with id: {}" , remoRegions);

        return remoRegions;
    }
    
    @ApiOperation(value = "Partially updates the RemoRegions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RemoRegions patchRemoRegions(@PathVariable("id") Integer id, @RequestBody @MapTo(RemoRegions.class) Map<String, Object> remoRegionsPatch) {
        LOGGER.debug("Partially updating RemoRegions with id: {}" , id);

        RemoRegions remoRegions = remoRegionsService.partialUpdate(id, remoRegionsPatch);
        LOGGER.debug("RemoRegions details after partial update: {}" , remoRegions);

        return remoRegions;
    }

    @ApiOperation(value = "Deletes the RemoRegions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRemoRegions(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting RemoRegions with id: {}" , id);

        RemoRegions deletedRemoRegions = remoRegionsService.delete(id);

        return deletedRemoRegions != null;
    }

    @RequestMapping(value = "/region/{region}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching RemoRegions with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public RemoRegions getByRegion(@PathVariable("region") String region) {
        LOGGER.debug("Getting RemoRegions with uniques key Region");
        return remoRegionsService.getByRegion(region);
    }

    /**
     * @deprecated Use {@link #findRemoRegions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of RemoRegions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<RemoRegions> searchRemoRegionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering RemoRegions list by query filter:{}", (Object) queryFilters);
        return remoRegionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RemoRegions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<RemoRegions> findRemoRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RemoRegions list by filter:", query);
        return remoRegionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of RemoRegions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<RemoRegions> filterRemoRegions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering RemoRegions list by filter", query);
        return remoRegionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportRemoRegions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return remoRegionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportRemoRegionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = RemoRegions.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> remoRegionsService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of RemoRegions instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countRemoRegions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting RemoRegions");
		return remoRegionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getRemoRegionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return remoRegionsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/lelangSkDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the lelangSkDetails instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkDetail> findAssociatedLelangSkDetails(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated lelangSkDetails");
        return remoRegionsService.findAssociatedLelangSkDetails(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RemoRegionsService instance
	 */
	protected void setRemoRegionsService(RemoRegionsService service) {
		this.remoRegionsService = service;
	}

}