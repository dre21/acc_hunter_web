/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.GamificationPeojfUrutanSk;
import com.acc_hunter_web.acc_hunter.service.GamificationPeojfUrutanSkService;


/**
 * Controller object for domain model class GamificationPeojfUrutanSk.
 * @see GamificationPeojfUrutanSk
 */
@RestController("acc_hunter.GamificationPeojfUrutanSkController")
@Api(value = "GamificationPeojfUrutanSkController", description = "Exposes APIs to work with GamificationPeojfUrutanSk resource.")
@RequestMapping("/acc_hunter/GamificationPeojfUrutanSk")
public class GamificationPeojfUrutanSkController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfUrutanSkController.class);

    @Autowired
	@Qualifier("acc_hunter.GamificationPeojfUrutanSkService")
	private GamificationPeojfUrutanSkService gamificationPeojfUrutanSkService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GamificationPeojfUrutanSk instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfUrutanSk createGamificationPeojfUrutanSk(@RequestBody GamificationPeojfUrutanSk gamificationPeojfUrutanSk) {
		LOGGER.debug("Create GamificationPeojfUrutanSk with information: {}" , gamificationPeojfUrutanSk);

		gamificationPeojfUrutanSk = gamificationPeojfUrutanSkService.create(gamificationPeojfUrutanSk);
		LOGGER.debug("Created GamificationPeojfUrutanSk with information: {}" , gamificationPeojfUrutanSk);

	    return gamificationPeojfUrutanSk;
	}

    @ApiOperation(value = "Returns the GamificationPeojfUrutanSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfUrutanSk getGamificationPeojfUrutanSk(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GamificationPeojfUrutanSk with id: {}" , id);

        GamificationPeojfUrutanSk foundGamificationPeojfUrutanSk = gamificationPeojfUrutanSkService.getById(id);
        LOGGER.debug("GamificationPeojfUrutanSk details with id: {}" , foundGamificationPeojfUrutanSk);

        return foundGamificationPeojfUrutanSk;
    }

    @ApiOperation(value = "Updates the GamificationPeojfUrutanSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfUrutanSk editGamificationPeojfUrutanSk(@PathVariable("id") Integer id, @RequestBody GamificationPeojfUrutanSk gamificationPeojfUrutanSk) {
        LOGGER.debug("Editing GamificationPeojfUrutanSk with id: {}" , gamificationPeojfUrutanSk.getId());

        gamificationPeojfUrutanSk.setId(id);
        gamificationPeojfUrutanSk = gamificationPeojfUrutanSkService.update(gamificationPeojfUrutanSk);
        LOGGER.debug("GamificationPeojfUrutanSk details with id: {}" , gamificationPeojfUrutanSk);

        return gamificationPeojfUrutanSk;
    }
    
    @ApiOperation(value = "Partially updates the GamificationPeojfUrutanSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfUrutanSk patchGamificationPeojfUrutanSk(@PathVariable("id") Integer id, @RequestBody @MapTo(GamificationPeojfUrutanSk.class) Map<String, Object> gamificationPeojfUrutanSkPatch) {
        LOGGER.debug("Partially updating GamificationPeojfUrutanSk with id: {}" , id);

        GamificationPeojfUrutanSk gamificationPeojfUrutanSk = gamificationPeojfUrutanSkService.partialUpdate(id, gamificationPeojfUrutanSkPatch);
        LOGGER.debug("GamificationPeojfUrutanSk details after partial update: {}" , gamificationPeojfUrutanSk);

        return gamificationPeojfUrutanSk;
    }

    @ApiOperation(value = "Deletes the GamificationPeojfUrutanSk instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGamificationPeojfUrutanSk(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GamificationPeojfUrutanSk with id: {}" , id);

        GamificationPeojfUrutanSk deletedGamificationPeojfUrutanSk = gamificationPeojfUrutanSkService.delete(id);

        return deletedGamificationPeojfUrutanSk != null;
    }

    /**
     * @deprecated Use {@link #findGamificationPeojfUrutanSks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GamificationPeojfUrutanSk instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfUrutanSk> searchGamificationPeojfUrutanSksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GamificationPeojfUrutanSks list by query filter:{}", (Object) queryFilters);
        return gamificationPeojfUrutanSkService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfUrutanSk instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GamificationPeojfUrutanSk> findGamificationPeojfUrutanSks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfUrutanSks list by filter:", query);
        return gamificationPeojfUrutanSkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfUrutanSk instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfUrutanSk> filterGamificationPeojfUrutanSks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfUrutanSks list by filter", query);
        return gamificationPeojfUrutanSkService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGamificationPeojfUrutanSks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gamificationPeojfUrutanSkService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGamificationPeojfUrutanSksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GamificationPeojfUrutanSk.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> gamificationPeojfUrutanSkService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GamificationPeojfUrutanSk instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGamificationPeojfUrutanSks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GamificationPeojfUrutanSks");
		return gamificationPeojfUrutanSkService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGamificationPeojfUrutanSkAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gamificationPeojfUrutanSkService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GamificationPeojfUrutanSkService instance
	 */
	protected void setGamificationPeojfUrutanSkService(GamificationPeojfUrutanSkService service) {
		this.gamificationPeojfUrutanSkService = service;
	}

}