/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.GamificationPeojfSeasonalPoint;
import com.acc_hunter_web.acc_hunter.service.GamificationPeojfSeasonalPointService;


/**
 * Controller object for domain model class GamificationPeojfSeasonalPoint.
 * @see GamificationPeojfSeasonalPoint
 */
@RestController("acc_hunter.GamificationPeojfSeasonalPointController")
@Api(value = "GamificationPeojfSeasonalPointController", description = "Exposes APIs to work with GamificationPeojfSeasonalPoint resource.")
@RequestMapping("/acc_hunter/GamificationPeojfSeasonalPoint")
public class GamificationPeojfSeasonalPointController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GamificationPeojfSeasonalPointController.class);

    @Autowired
	@Qualifier("acc_hunter.GamificationPeojfSeasonalPointService")
	private GamificationPeojfSeasonalPointService gamificationPeojfSeasonalPointService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new GamificationPeojfSeasonalPoint instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfSeasonalPoint createGamificationPeojfSeasonalPoint(@RequestBody GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint) {
		LOGGER.debug("Create GamificationPeojfSeasonalPoint with information: {}" , gamificationPeojfSeasonalPoint);

		gamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointService.create(gamificationPeojfSeasonalPoint);
		LOGGER.debug("Created GamificationPeojfSeasonalPoint with information: {}" , gamificationPeojfSeasonalPoint);

	    return gamificationPeojfSeasonalPoint;
	}

    @ApiOperation(value = "Returns the GamificationPeojfSeasonalPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfSeasonalPoint getGamificationPeojfSeasonalPoint(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting GamificationPeojfSeasonalPoint with id: {}" , id);

        GamificationPeojfSeasonalPoint foundGamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointService.getById(id);
        LOGGER.debug("GamificationPeojfSeasonalPoint details with id: {}" , foundGamificationPeojfSeasonalPoint);

        return foundGamificationPeojfSeasonalPoint;
    }

    @ApiOperation(value = "Updates the GamificationPeojfSeasonalPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfSeasonalPoint editGamificationPeojfSeasonalPoint(@PathVariable("id") Integer id, @RequestBody GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint) {
        LOGGER.debug("Editing GamificationPeojfSeasonalPoint with id: {}" , gamificationPeojfSeasonalPoint.getId());

        gamificationPeojfSeasonalPoint.setId(id);
        gamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointService.update(gamificationPeojfSeasonalPoint);
        LOGGER.debug("GamificationPeojfSeasonalPoint details with id: {}" , gamificationPeojfSeasonalPoint);

        return gamificationPeojfSeasonalPoint;
    }
    
    @ApiOperation(value = "Partially updates the GamificationPeojfSeasonalPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GamificationPeojfSeasonalPoint patchGamificationPeojfSeasonalPoint(@PathVariable("id") Integer id, @RequestBody @MapTo(GamificationPeojfSeasonalPoint.class) Map<String, Object> gamificationPeojfSeasonalPointPatch) {
        LOGGER.debug("Partially updating GamificationPeojfSeasonalPoint with id: {}" , id);

        GamificationPeojfSeasonalPoint gamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointService.partialUpdate(id, gamificationPeojfSeasonalPointPatch);
        LOGGER.debug("GamificationPeojfSeasonalPoint details after partial update: {}" , gamificationPeojfSeasonalPoint);

        return gamificationPeojfSeasonalPoint;
    }

    @ApiOperation(value = "Deletes the GamificationPeojfSeasonalPoint instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGamificationPeojfSeasonalPoint(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting GamificationPeojfSeasonalPoint with id: {}" , id);

        GamificationPeojfSeasonalPoint deletedGamificationPeojfSeasonalPoint = gamificationPeojfSeasonalPointService.delete(id);

        return deletedGamificationPeojfSeasonalPoint != null;
    }

    /**
     * @deprecated Use {@link #findGamificationPeojfSeasonalPoints(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GamificationPeojfSeasonalPoint instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfSeasonalPoint> searchGamificationPeojfSeasonalPointsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GamificationPeojfSeasonalPoints list by query filter:{}", (Object) queryFilters);
        return gamificationPeojfSeasonalPointService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfSeasonalPoint instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GamificationPeojfSeasonalPoint> findGamificationPeojfSeasonalPoints(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfSeasonalPoints list by filter:", query);
        return gamificationPeojfSeasonalPointService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GamificationPeojfSeasonalPoint instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<GamificationPeojfSeasonalPoint> filterGamificationPeojfSeasonalPoints(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GamificationPeojfSeasonalPoints list by filter", query);
        return gamificationPeojfSeasonalPointService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportGamificationPeojfSeasonalPoints(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gamificationPeojfSeasonalPointService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportGamificationPeojfSeasonalPointsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = GamificationPeojfSeasonalPoint.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> gamificationPeojfSeasonalPointService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of GamificationPeojfSeasonalPoint instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countGamificationPeojfSeasonalPoints( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GamificationPeojfSeasonalPoints");
		return gamificationPeojfSeasonalPointService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getGamificationPeojfSeasonalPointAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gamificationPeojfSeasonalPointService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GamificationPeojfSeasonalPointService instance
	 */
	protected void setGamificationPeojfSeasonalPointService(GamificationPeojfSeasonalPointService service) {
		this.gamificationPeojfSeasonalPointService = service;
	}

}