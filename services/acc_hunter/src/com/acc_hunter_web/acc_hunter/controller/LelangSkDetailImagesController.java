/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.acc_hunter_web.acc_hunter.LelangSkDetailImages;
import com.acc_hunter_web.acc_hunter.service.LelangSkDetailImagesService;


/**
 * Controller object for domain model class LelangSkDetailImages.
 * @see LelangSkDetailImages
 */
@RestController("acc_hunter.LelangSkDetailImagesController")
@Api(value = "LelangSkDetailImagesController", description = "Exposes APIs to work with LelangSkDetailImages resource.")
@RequestMapping("/acc_hunter/LelangSkDetailImages")
public class LelangSkDetailImagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LelangSkDetailImagesController.class);

    @Autowired
	@Qualifier("acc_hunter.LelangSkDetailImagesService")
	private LelangSkDetailImagesService lelangSkDetailImagesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LelangSkDetailImages instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetailImages createLelangSkDetailImages(@RequestBody LelangSkDetailImages lelangSkDetailImages) {
		LOGGER.debug("Create LelangSkDetailImages with information: {}" , lelangSkDetailImages);

		lelangSkDetailImages = lelangSkDetailImagesService.create(lelangSkDetailImages);
		LOGGER.debug("Created LelangSkDetailImages with information: {}" , lelangSkDetailImages);

	    return lelangSkDetailImages;
	}

    @ApiOperation(value = "Returns the LelangSkDetailImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetailImages getLelangSkDetailImages(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LelangSkDetailImages with id: {}" , id);

        LelangSkDetailImages foundLelangSkDetailImages = lelangSkDetailImagesService.getById(id);
        LOGGER.debug("LelangSkDetailImages details with id: {}" , foundLelangSkDetailImages);

        return foundLelangSkDetailImages;
    }

    @ApiOperation(value = "Updates the LelangSkDetailImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetailImages editLelangSkDetailImages(@PathVariable("id") Integer id, @RequestBody LelangSkDetailImages lelangSkDetailImages) {
        LOGGER.debug("Editing LelangSkDetailImages with id: {}" , lelangSkDetailImages.getId());

        lelangSkDetailImages.setId(id);
        lelangSkDetailImages = lelangSkDetailImagesService.update(lelangSkDetailImages);
        LOGGER.debug("LelangSkDetailImages details with id: {}" , lelangSkDetailImages);

        return lelangSkDetailImages;
    }
    
    @ApiOperation(value = "Partially updates the LelangSkDetailImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LelangSkDetailImages patchLelangSkDetailImages(@PathVariable("id") Integer id, @RequestBody @MapTo(LelangSkDetailImages.class) Map<String, Object> lelangSkDetailImagesPatch) {
        LOGGER.debug("Partially updating LelangSkDetailImages with id: {}" , id);

        LelangSkDetailImages lelangSkDetailImages = lelangSkDetailImagesService.partialUpdate(id, lelangSkDetailImagesPatch);
        LOGGER.debug("LelangSkDetailImages details after partial update: {}" , lelangSkDetailImages);

        return lelangSkDetailImages;
    }

    @ApiOperation(value = "Deletes the LelangSkDetailImages instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLelangSkDetailImages(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LelangSkDetailImages with id: {}" , id);

        LelangSkDetailImages deletedLelangSkDetailImages = lelangSkDetailImagesService.delete(id);

        return deletedLelangSkDetailImages != null;
    }

    /**
     * @deprecated Use {@link #findLelangSkDetailImages(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LelangSkDetailImages instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkDetailImages> searchLelangSkDetailImagesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LelangSkDetailImages list by query filter:{}", (Object) queryFilters);
        return lelangSkDetailImagesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkDetailImages instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LelangSkDetailImages> findLelangSkDetailImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkDetailImages list by filter:", query);
        return lelangSkDetailImagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LelangSkDetailImages instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LelangSkDetailImages> filterLelangSkDetailImages(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LelangSkDetailImages list by filter", query);
        return lelangSkDetailImagesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLelangSkDetailImages(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return lelangSkDetailImagesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLelangSkDetailImagesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LelangSkDetailImages.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> lelangSkDetailImagesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LelangSkDetailImages instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLelangSkDetailImages( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LelangSkDetailImages");
		return lelangSkDetailImagesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLelangSkDetailImagesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return lelangSkDetailImagesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LelangSkDetailImagesService instance
	 */
	protected void setLelangSkDetailImagesService(LelangSkDetailImagesService service) {
		this.lelangSkDetailImagesService = service;
	}

}