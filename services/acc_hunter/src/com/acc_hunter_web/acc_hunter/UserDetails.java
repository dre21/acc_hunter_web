/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * UserDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`user_details`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_user_details_user_id`", columnNames = {"`user_id`"})})
public class UserDetails implements Serializable {

    private Integer id;
    private int userId;
    private String picFullName;
    private String picIdCardNo;
    private String picMobilePhoneNo;
    private String picEmail;
    private Users users;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`user_details_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`user_id`", nullable = false, updatable = false, scale = 0, precision = 10)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "`pic_full_name`", nullable = true, length = 255)
    public String getPicFullName() {
        return this.picFullName;
    }

    public void setPicFullName(String picFullName) {
        this.picFullName = picFullName;
    }

    @Column(name = "`pic_id_card_no`", nullable = true, length = 255)
    public String getPicIdCardNo() {
        return this.picIdCardNo;
    }

    public void setPicIdCardNo(String picIdCardNo) {
        this.picIdCardNo = picIdCardNo;
    }

    @Column(name = "`pic_mobile_phone_no`", nullable = true, length = 255)
    public String getPicMobilePhoneNo() {
        return this.picMobilePhoneNo;
    }

    public void setPicMobilePhoneNo(String picMobilePhoneNo) {
        this.picMobilePhoneNo = picMobilePhoneNo;
    }

    @Column(name = "`pic_email`", nullable = true, length = 255)
    public String getPicEmail() {
        return this.picEmail;
    }

    public void setPicEmail(String picEmail) {
        this.picEmail = picEmail;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_user_details_TO_usersEI008`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getId();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserDetails)) return false;
        final UserDetails userDetails = (UserDetails) o;
        return Objects.equals(getId(), userDetails.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}