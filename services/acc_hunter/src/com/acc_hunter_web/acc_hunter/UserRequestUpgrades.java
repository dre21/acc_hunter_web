/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * UserRequestUpgrades generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`user_request_upgrades`")
public class UserRequestUpgrades implements Serializable {

    private Integer id;
    private int userId;
    private Integer appId;
    private boolean isRequestApproved;
    private Users users;
    private Appointments appointments;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`user_request_upgrades_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`user_id`", nullable = false, scale = 0, precision = 10)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "`app_id`", nullable = true, scale = 0, precision = 10)
    public Integer getAppId() {
        return this.appId;
    }

    public void setAppId(Integer appId) {
        this.appId = appId;
    }

    @Column(name = "`is_request_approved`", nullable = false)
    public boolean isIsRequestApproved() {
        return this.isRequestApproved;
    }

    public void setIsRequestApproved(boolean isRequestApproved) {
        this.isRequestApproved = isRequestApproved;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_user_request_upgradesQco5l`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getId();
        }

        this.users = users;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`app_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_user_request_upgradesVW7CN`"))
    @Fetch(FetchMode.JOIN)
    public Appointments getAppointments() {
        return this.appointments;
    }

    public void setAppointments(Appointments appointments) {
        if(appointments != null) {
            this.appId = appointments.getId();
        }

        this.appointments = appointments;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof UserRequestUpgrades)) return false;
        final UserRequestUpgrades userRequestUpgrades = (UserRequestUpgrades) o;
        return Objects.equals(getId(), userRequestUpgrades.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}