/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Appointments generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`appointments`")
public class Appointments implements Serializable {

    private Integer id;
    private int userId;
    private String appDate;
    private String appPlace;
    private String pic;
    private Users users;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`appointments_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`user_id`", nullable = false, scale = 0, precision = 10)
    public int getUserId() {
        return this.userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    @Column(name = "`app_date`", nullable = false, length = 255)
    public String getAppDate() {
        return this.appDate;
    }

    public void setAppDate(String appDate) {
        this.appDate = appDate;
    }

    @Column(name = "`app_place`", nullable = false, length = 255)
    public String getAppPlace() {
        return this.appPlace;
    }

    public void setAppPlace(String appPlace) {
        this.appPlace = appPlace;
    }

    @Column(name = "`pic`", nullable = true, length = 255)
    public String getPic() {
        return this.pic;
    }

    public void setPic(String pic) {
        this.pic = pic;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`user_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_appointments_TO_userszBAys`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getId();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Appointments)) return false;
        final Appointments appointments = (Appointments) o;
        return Objects.equals(getId(), appointments.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}