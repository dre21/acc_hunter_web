/*Copyright (c) 2019-2020 deltadatamandiri.com All Rights Reserved.
 This software is the confidential and proprietary information of deltadatamandiri.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with deltadatamandiri.com*/
package com.acc_hunter_web.acc_hunter;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * NotificationUsers generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`notification_users`")
public class NotificationUsers implements Serializable {

    private Integer id;
    private int noCatId;
    private String content;
    private Integer skId;
    private String agrNo;
    private String endDt;
    private boolean isRead;
    private String userId;
    private LocalDateTime createdAt;
    private NotificationCategories notificationCategories;

    @Id
    @SequenceGenerator(name = "generator", sequenceName = "`notification_users_ID_seq`" , allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator")
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`no_cat_id`", nullable = false, scale = 0, precision = 10)
    public int getNoCatId() {
        return this.noCatId;
    }

    public void setNoCatId(int noCatId) {
        this.noCatId = noCatId;
    }

    @Column(name = "`content`", nullable = true, length = 255)
    public String getContent() {
        return this.content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    @Column(name = "`sk_id`", nullable = true, scale = 0, precision = 10)
    public Integer getSkId() {
        return this.skId;
    }

    public void setSkId(Integer skId) {
        this.skId = skId;
    }

    @Column(name = "`agr_no`", nullable = true, length = 255)
    public String getAgrNo() {
        return this.agrNo;
    }

    public void setAgrNo(String agrNo) {
        this.agrNo = agrNo;
    }

    @Column(name = "`end_dt`", nullable = true, length = 255)
    public String getEndDt() {
        return this.endDt;
    }

    public void setEndDt(String endDt) {
        this.endDt = endDt;
    }

    @Column(name = "`is_read`", nullable = false)
    public boolean isIsRead() {
        return this.isRead;
    }

    public void setIsRead(boolean isRead) {
        this.isRead = isRead;
    }

    @Column(name = "`user_id`", nullable = false, length = 20)
    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    @Column(name = "`created_at`", nullable = true)
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`no_cat_id`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_notification_users_TOlbpaV`"))
    @Fetch(FetchMode.JOIN)
    public NotificationCategories getNotificationCategories() {
        return this.notificationCategories;
    }

    public void setNotificationCategories(NotificationCategories notificationCategories) {
        if(notificationCategories != null) {
            this.noCatId = notificationCategories.getId();
        }

        this.notificationCategories = notificationCategories;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NotificationUsers)) return false;
        final NotificationUsers notificationUsers = (NotificationUsers) o;
        return Objects.equals(getId(), notificationUsers.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}